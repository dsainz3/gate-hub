# yaml-language-server: $schema=http://schemas.home-assistant.io/integration-homeassistant-packages
###############################################################################
# Huskers - Step 2: Detect scoring items by team
# Requires Team Tracker (HACS). Replace entity IDs below to match your setup.
###############################################################################

input_boolean:
  huskers_debug:
    name: "Huskers Debug Notifications"
    icon: mdi:bug

automation:
  - id: huskers_detect_score_events
    alias: "Huskers - Detect Score Events"
    description: >
      Detect score changes for Nebraska and the opponent using Team Tracker
      attributes. Emits custom events huskers_score and huskers_opponent_score.
      Optionally posts a notification when huskers_debug is on.
    mode: parallel
    # IMPORTANT: replace with your Team Tracker sensor entity
    trigger:
      - platform: state
        entity_id: sensor.team_tracker_nebraska
        attribute: home_score
      - platform: state
        entity_id: sensor.team_tracker_nebraska
        attribute: away_score

    # IMPORTANT: replace with your Team Tracker game-in-progress binary sensor
    condition:
      - condition: state
        entity_id: binary_sensor.team_tracker_nebraska_game
        state: "on"

    variables:
      is_home: "{{ state_attr('sensor.team_tracker_nebraska', 'is_home') | bool(false) }}"
      old_home: "{{ (trigger.from_state.attributes.home_score | int(0)) if trigger.from_state else 0 }}"
      new_home: "{{ state_attr('sensor.team_tracker_nebraska', 'home_score') | int(0) }}"
      old_away: "{{ (trigger.from_state.attributes.away_score | int(0)) if trigger.from_state else 0 }}"
      new_away: "{{ state_attr('sensor.team_tracker_nebraska', 'away_score') | int(0) }}"
      our_old: "{{ old_home if is_home else old_away }}"
      our_new: "{{ new_home if is_home else new_away }}"
      our_delta: "{{ our_new - our_old }}"
      opp_old: "{{ old_away if is_home else old_home }}"
      opp_new: "{{ new_away if is_home else new_home }}"
      opp_delta: "{{ opp_new - opp_old }}"
      quarter: >
        {{ state_attr('sensor.team_tracker_nebraska','quarter')
           or state_attr('sensor.team_tracker_nebraska','period')
           or '-' }}
      clock: "{{ state_attr('sensor.team_tracker_nebraska','clock') or '-' }}"
      home_team: "{{ state_attr('sensor.team_tracker_nebraska','home_team') }}"
      away_team: "{{ state_attr('sensor.team_tracker_nebraska','away_team') }}"
      our_team: "{{ home_team if is_home else away_team }}"
      opp_team: "{{ away_team if is_home else home_team }}"

    action:
      - choose:
          - conditions: "{{ our_delta > 0 }}"
            sequence:
              - variables:
                  score_type: >
                    {% set d = our_delta|int(0) %}
                    {% if d == 8 %}td_2pt{% elif d == 7 %}td_xp{% elif d == 6 %}td{% elif d == 3 %}fg{% elif d == 2 %}safety_or_2pt{% elif d == 1 %}xp_or_point{% else %}unknown{% endif %}
              - event: huskers_score
                event_data:
                  team: "{{ our_team }}"
                  opponent: "{{ opp_team }}"
                  delta: "{{ our_delta }}"
                  type: "{{ score_type }}"
                  our_score: "{{ our_new }}"
                  opp_score: "{{ opp_new }}"
                  quarter: "{{ quarter }}"
                  clock: "{{ clock }}"
              - if:
                  - condition: state
                    entity_id: input_boolean.huskers_debug
                    state: "on"
                then:
                  - service: persistent_notification.create
                    data:
                      title: "Huskers Scored ({{ score_type }})"
                      message: >
                        {{ our_team }} +{{ our_delta }} ({{ our_new }}-{{ opp_new }})
                        at {{ quarter }} {{ clock }}

          - conditions: "{{ opp_delta > 0 }}"
            sequence:
              - variables:
                  score_type: >
                    {% set d = opp_delta|int(0) %}
                    {% if d == 8 %}td_2pt{% elif d == 7 %}td_xp{% elif d == 6 %}td{% elif d == 3 %}fg{% elif d == 2 %}safety_or_2pt{% elif d == 1 %}xp_or_point{% else %}unknown{% endif %}
              - event: huskers_opponent_score
                event_data:
                  team: "{{ opp_team }}"
                  opponent: "{{ our_team }}"
                  delta: "{{ opp_delta }}"
                  type: "{{ score_type }}"
                  our_score: "{{ our_new }}"
                  opp_score: "{{ opp_new }}"
                  quarter: "{{ quarter }}"
                  clock: "{{ clock }}"
              - if:
                  - condition: state
                    entity_id: input_boolean.huskers_debug
                    state: "on"
                then:
                  - service: persistent_notification.create
                    data:
                      title: "Opponent Scored ({{ score_type }})"
                      message: >
                        {{ opp_team }} +{{ opp_delta }} ({{ our_new }}-{{ opp_new }})
                        at {{ quarter }} {{ clock }}

template:
  - trigger:
      - platform: event
        event_type: huskers_score
      - platform: event
        event_type: huskers_opponent_score
    sensor:
      - name: "Huskers Last Score Event"
        unique_id: huskers_last_score_event
        state: >
          {% set t = trigger.event.event_type %}
          {% if t == 'huskers_score' %}huskers{% else %}opponent{% endif %}_{{ trigger.event.data.type }}
        attributes:
          team: "{{ trigger.event.data.team }}"
          opponent: "{{ trigger.event.data.opponent }}"
          delta: "{{ trigger.event.data.delta }}"
          our_score: "{{ trigger.event.data.our_score }}"
          opp_score: "{{ trigger.event.data.opp_score }}"
          quarter: "{{ trigger.event.data.quarter }}"
          clock: "{{ trigger.event.data.clock }}"
          timestamp: "{{ now().isoformat() }}"
