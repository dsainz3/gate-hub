{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation Home","text":"<p>Welcome to the hypermodern documentation set for the gate-hub Home Assistant deployment. Content is grouped using the Divio model so readers can quickly find the right depth:</p> <p>Latest highlights: - Snapshot view now includes a dedicated agenda column showing the household calendar. - Agenda Planner package + kiosk view enable event/task entry from HA tablets. - Support \u00b7 Test Resources dashboard adds a Plex \u00b7 Theater lab with direct Fire TV controls and the HA Media Browser.</p> <ul> <li>Tutorials \u2013 step-by-step project onboarding (coming soon; contribute via the docs style guide).</li> <li>How-to guides \u2013 task-focused instructions to operate or extend the system.</li> <li>Reference \u2013 authoritative facts, inventories, and API/service contracts.</li> <li>Explanation \u2013 architectural rationale, historical context, and strategy.</li> <li>Archive \u2013 retired experiments kept for institutional memory.</li> </ul> <p>Use the sections below or the navigation in <code>mkdocs.yml</code> (once rendered) to browse. See the Documentation Style Guide for authoring conventions.</p>"},{"location":"#how-to-guides","title":"How-to Guides","text":"<ul> <li>CI Pipeline Runbook</li> <li>Pre-commit Hooks</li> <li>Mosquitto MQTT Add-on</li> <li>Govee2MQTT Add-on</li> <li>Husker Dashboard Guide (TeamTracker card, tailgate window, Big Ten standings, lighting macros)</li> <li>Husker LED MQTT Controls</li> <li>Govee Lighting Stack</li> <li>F1 Package &amp; Dashboard</li> </ul>"},{"location":"#reference","title":"Reference","text":"<ul> <li>Automation Catalog</li> <li>Holiday Mode Reference</li> <li>Basement Theater Media Package</li> <li>Infrastructure Overview</li> <li>Agenda Planner Package</li> <li>Configure Agenda Planner Calendars &amp; Todo Lists</li> </ul>"},{"location":"#explanation","title":"Explanation","text":"<ul> <li>Optimization Plan</li> <li>Huskers Dashboard History</li> <li>Pre-commit Quality Strategy</li> </ul>"},{"location":"#archive","title":"Archive","text":"<ul> <li>AI Automation Builder Prototype</li> </ul>"},{"location":"#architecture-decisions","title":"Architecture Decisions","text":"<ul> <li>ADR template: adr/_template.md</li> <li>Capture decisions for significant changes. Submit a PR adding a new ADR when the decision is accepted.</li> </ul>"},{"location":"#contributing-to-the-docs","title":"Contributing to the Docs","text":"<p>See the Documentation Style Guide for the docs workflow and review checklist.</p>"},{"location":"adr/_template/","title":"ADR:  <ul> <li>Status: Proposed | Accepted | Superseded by ADR-XXXX | Rejected</li> <li>Date: YYYY-MM-DD</li> <li>Deciders:  <li>Tags: architecture, decision</li>","text":""},{"location":"adr/_template/#context","title":"Context","text":"<p>What is the issue that we\u2019re seeing that is motivating this decision?</p>"},{"location":"adr/_template/#options","title":"Options","text":"<ol> <li> <li> <li>"},{"location":"adr/_template/#decision","title":"Decision","text":"<p>What is the change that we\u2019re proposing and/or doing?</p>"},{"location":"adr/_template/#consequences","title":"Consequences","text":"<ul> <li>Positive:</li> <li>Negative:</li> <li>Neutral/unknown:</li> </ul>"},{"location":"adr/_template/#alternatives-considered","title":"Alternatives considered","text":"<p>Brief notes on the options that were not chosen and why.</p>"},{"location":"adr/_template/#links","title":"Links","text":"<ul> <li>Related issues/PRs:</li> <li>References:</li> </ul>"},{"location":"archive/ai-automation-builder/","title":"AI Automation Builder (Archived Prototype)","text":"<p>The AI-driven automation workflow previously described here has been removed from the active configuration. The GitHub Actions job and generator script were experimental and were retired while the Home Assistant configuration was simplified. This document now serves as a reference for what existed and how to proceed without it.</p>","tags":["archive","automation"]},{"location":"archive/ai-automation-builder/#current-status","title":"Current Status","text":"<ul> <li>There is no <code>.github/workflows/ai_automation.yml</code> workflow in the repository.</li> <li>The supporting <code>tools/ai_automation/</code> generator script and <code>packages/ai/</code> target directory were   deleted during the cleanup.</li> <li>No automation packages are generated automatically\u2014new automations must be authored manually.</li> </ul>","tags":["archive","automation"]},{"location":"archive/ai-automation-builder/#current-authoring-process","title":"Current Authoring Process","text":"<ol> <li>Draft the automation YAML by hand, following the existing patterns in <code>packages/</code>.</li> <li>Create a new file under <code>packages/</code> (or extend an existing package) and include it via      <code>!include_dir_named packages</code> in <code>configuration.yaml</code>.</li> <li>Validate the change locally before opening a PR:</li> <li><code>pre-commit run --all-files</code> to apply formatting and run YAML checks.</li> <li><code>python scripts/ha_check_portable.py</code> if you want the containerised Home Assistant      <code>check_config</code> run that mirrors CI.</li> <li>Commit the automation, open a pull request, and merge once CI passes.</li> <li>Reload automations from Settings \u2192 System \u2192 Automations &amp; Scenes \u2192 Reload Automations (or    restart Home Assistant) after deploying.</li> </ol>","tags":["archive","automation"]},{"location":"archive/ai-automation-builder/#reviving-the-prototype","title":"Reviving the Prototype","text":"<p>If you would like to resurrect the AI builder, recover the workflow, script, and package directory from an earlier backup or branch and wire them back into the repository. Expect to: - Restore the GitHub Actions workflow under <code>.github/workflows/</code>. - Reintroduce the Python generator and ensure its dependencies are listed in <code>pyproject.toml</code>. - Decide where the generated YAML should land (for example, recreating a <code>packages/ai/</code> folder) and   confirm it is included by Home Assistant.</p> <p>Because the current repository snapshot no longer contains these files, coordinating with the maintainers or consulting an older clone/backup is required to retrieve them.</p>","tags":["archive","automation"]},{"location":"explanation/huskers-dashboard-history/","title":"Huskers Dashboard Cleanup","text":"","tags":["huskers","dashboards","history"]},{"location":"explanation/huskers-dashboard-history/#overview","title":"Overview","text":"<p>This document summarizes the cleanup of redundant Husker dashboard configurations to improve maintainability and reduce confusion.</p>","tags":["huskers","dashboards","history"]},{"location":"explanation/huskers-dashboard-history/#changes-made","title":"Changes Made","text":"<ol> <li>Consolidated Dashboards (2024)</li> <li>Kept <code>dashboards/huskers-teamtracker.yaml</code> as the primary dashboard</li> <li>Merged useful controls from <code>huskers-auto.yaml</code> into the teamtracker dashboard</li> <li> <p>Removed redundant dashboard files</p> </li> <li> <p>Removed Files</p> </li> <li><code>dashboards/huskers-all.yaml</code> \u2013 Basic version, functionality covered by teamtracker</li> <li><code>dashboards/huskers-dashboard.yaml</code> \u2013 Older version using individual sensors</li> <li><code>dashboards/huskers-auto.yaml</code> \u2013 Automation controls merged into teamtracker</li> <li> <p><code>ui-lovelace/huskers.yaml</code> \u2013 Legacy UI template</p> </li> <li> <p>File Structure</p> </li> <li>Primary dashboard: <code>dashboards/huskers-teamtracker.yaml</code></li> <li>Core configuration: <code>packages/huskers_everything.yaml</code></li> <li> <p>Lovelace include set: <code>lovelace/huskers.yaml</code></p> </li> <li> <p>2025 Enhancements</p> </li> <li>Split dashboard into Game Day, Team &amp; Data, and Lighting &amp; Scenes views for clearer separation of duties.</li> <li>Adopted the TeamTracker custom card and vendored resource (<code>www/community/teamtracker-card/ha-teamtracker-card.js</code>) for the hero game panel.</li> <li>Replaced legacy Big Ten standings scrape with ESPN\u2019s Core API (<code>sports.core.api.espn.com/v2/.../groups/5/standings/0</code>) and rendered it as a markdown table.</li> <li>Rebuilt team/opponent profiles as table-based cards with live color swatches derived from TeamTracker attributes.</li> <li>Switched scene listings to <code>custom:auto-entities</code> so snapshot scenes appear only while active, reducing Lovelace errors after restarts.</li> <li>Countdown cards now rely on <code>sensor.huskers_kickoff_in_effective</code>, respecting manual overrides from <code>input_boolean.huskers_use_manual_kickoff</code>.</li> <li>Removed the bespoke markdown scoreboard in favor of the TeamTracker hero card plus a lean pregame stack.</li> <li> <p>Introduced <code>binary_sensor.huskers_tailgate_window</code> to gate the countdown (24\u202fh pre-kickoff through 30\u202fmin post-game) and trimmed the in-game markdown to football-specific data shown only during live play.</p> </li> <li> <p>Key Components (current)</p> </li> <li>TeamTracker card for game info display</li> <li>Quick refresh controls for data updates</li> <li>Lighting macros (chase, burst, restore) tied into Huskers scripts</li> <li>Big Ten standings + matchup metadata sourced from updated ESPN feeds</li> </ol>","tags":["huskers","dashboards","history"]},{"location":"explanation/huskers-dashboard-history/#references","title":"References","text":"<ul> <li>Main configuration is in <code>packages/huskers_everything.yaml</code></li> <li>Dashboard layout is defined in <code>dashboards/huskers-teamtracker.yaml</code></li> </ul>","tags":["huskers","dashboards","history"]},{"location":"explanation/optimization-plan/","title":"Home Assistant Optimization Plan \u2013 gate-hub","text":"<p>This document outlines the current repository strengths, identified optimization opportunities, and a step-by-step plan to implement improvements. It is designed to serve as a living document in your repo (<code>HA_Optimization_Plan.md</code>) and will guide you through changes, GitHub workflow, and Home Assistant updates.</p>","tags":["roadmap","optimization","home-assistant"]},{"location":"explanation/optimization-plan/#current-repo-strengths","title":"\ud83d\udccc Current Repo Strengths","text":"","tags":["roadmap","optimization","home-assistant"]},{"location":"explanation/optimization-plan/#organization","title":"Organization","text":"<ul> <li>Modular structure \u2013 using <code>packages/</code> for feature-specific configs (e.g., Huskers automation).</li> <li>File separation \u2013 clear split of <code>automations.yaml</code>, <code>scripts.yaml</code>, <code>sensor.yaml</code>, dashboards, etc.</li> <li>Documentation \u2013 <code>README.md</code> is structured and easy to follow.</li> <li>Version control \u2013 proper Git workflow with CI/CD.</li> </ul>","tags":["roadmap","optimization","home-assistant"]},{"location":"explanation/optimization-plan/#code-quality","title":"Code Quality","text":"<ul> <li>Pre-commit hooks \u2013 <code>ruff</code>, <code>prettier</code>, <code>yamllint</code>, plus helpers for whitespace and HA config checks.</li> <li>CI pipeline \u2013 YAML config validation + pre-commit.</li> <li>Custom components \u2013 documented integrations (BLE monitor, Govee, etc.).</li> </ul>","tags":["roadmap","optimization","home-assistant"]},{"location":"explanation/optimization-plan/#advanced-features","title":"Advanced Features","text":"<ul> <li>Custom dashboards \u2013 multiple specialized dashboards (Huskers HQ, LED Test, etc.).</li> <li>Template sensors \u2013 advanced templating for game status/countdowns.</li> <li>Complex automations \u2013 Huskers game-day automations with proper state handling.</li> </ul>","tags":["roadmap","optimization","home-assistant"]},{"location":"explanation/optimization-plan/#priority-optimization-recommendations","title":"\ud83c\udfaf Priority Optimization Recommendations","text":"Priority Impact Effort Items P0 High Low Database optimization, Logger config P1 High Medium System monitoring, MQTT enhancement P2 Medium Low Backup automation, Secrets structure P3 Medium Medium Zigbee2MQTT tuning, Template organization P4 Low Medium System Performance dashboard, Huskers fade optimization","tags":["roadmap","optimization","home-assistant"]},{"location":"explanation/optimization-plan/#branching-strategy","title":"\ud83e\udeb5 Branching Strategy","text":"<p>We will use Trunk-based Development with short-lived topic branches. Each PR will be small, focused, and deleted after merge.</p> <p>Branch list: - <code>chore/recorder-opts</code> (P0) - <code>chore/logger-opts</code> (P0) - <code>feat/system-monitoring</code> (P1) - <code>feat/mqtt-enh</code> (P1) - <code>chore/backup-automation</code> (P2) - <code>chore/secrets-structure</code> (P2) - <code>feat/zigbee2mqtt-tuning</code> (P3) - <code>chore/templates-split</code> (P3) - <code>feat/perf-dashboard</code> (P4) - <code>feat/huskers-optimizations</code> (P4)</p>","tags":["roadmap","optimization","home-assistant"]},{"location":"explanation/optimization-plan/#github-cicd-plan","title":"\ud83e\udd16 GitHub CI/CD Plan","text":"","tags":["roadmap","optimization","home-assistant"]},{"location":"explanation/optimization-plan/#current-workflows","title":"Current Workflows","text":"<ul> <li><code>.github/workflows/ci.yml</code> runs two jobs:</li> <li><code>ruff</code> installs Python 3.11 with pip caching enabled, restores a dedicated Ruff cache, installs Ruff via pip, and runs both <code>ruff check</code> and <code>ruff format --check</code> against the repository.</li> <li><code>precommit</code> also uses Python 3.11 with pip caching and a pre-commit cache, installs <code>pre-commit</code>, skips Ruff hooks (handled earlier), and executes the remaining hooks for YAML formatting, whitespace hygiene, and the Home Assistant config check wrapper.</li> <li><code>.github/workflows/ha-config-check.yaml</code> focuses on validating the Home Assistant configuration: it checks out the repository, sets up Python 3.11 with pip caching, installs <code>homeassistant</code> and <code>pytest</code>, prepares a temporary <code>secrets.yaml</code> from <code>.ci/fakesecrets.yaml</code>, runs <code>hass --script check_config</code>, optionally executes pytest-based integration checks, uploads log artifacts, and cleans up generated files. \ud83d\udee0 Diff-Ready Patches Below are minimal diffs to apply per branch.</li> </ul> <p>P0 \u2013 Recorder diff Copy Edit --- a/configuration.yaml +++ b/configuration.yaml @@ +recorder: +  db_url: !secret db_url +  purge_keep_days: 14 +  auto_purge: true +  exclude: +    domains: +      - automation +      - script +      - scene +    entity_globs: +      - sensor._uptime +      - sensor._last_boot +      - binary_sensor.*_connectivity +    entities: +      - sensor.date +      - sensor.time P0 \u2013 Logger diff Copy Edit --- a/configuration.yaml +++ b/configuration.yaml @@ +logger: +  default: warning +  logs: +    homeassistant.core: info +    homeassistant.components.mqtt: warning +    custom_components.ble_monitor: info +    custom_components.govee: warning P1 \u2013 System Monitor Sensors diff Copy Edit --- a/sensor.yaml +++ b/sensor.yaml @@ +- platform: systemmonitor +  resources: +    - type: disk_use_percent +      arg: / +    - type: memory_use_percent +    - type: processor_use +    - type: last_boot + +- platform: uptime +  unit_of_measurement: hours P1 \u2013 MQTT Performance diff Copy Edit --- a/configuration.yaml +++ b/configuration.yaml @@ +mqtt: +  sensor: +    - name: \"MQTT Performance\" +      state_topic: \"system/performance\" +      json_attributes_topic: \"system/performance\" +      value_template: \"{{ value_json.status | default('unknown') }}\" P2 \u2013 Backup Automation diff Copy Edit --- a/automations.yaml +++ b/automations.yaml @@ +- id: system_daily_backup +  alias: \"System: Daily Backup\" +  trigger: +    - platform: time +      at: \"02:00:00\" +  action: +    - service: backup.create +      data: +        name: \"Automated Backup {{ now().strftime('%Y-%m-%d') }}\" +    - service: persistent_notification.create +      data: +        title: \"Backup Completed\" +        message: \"Daily backup completed successfully.\" P2 \u2013 Secrets Hygiene - Keep <code>.ci/fakesecrets.yaml</code> aligned with the keys required by CI and local development. - Store real secrets only in <code>secrets.yaml</code> on your Home Assistant host; avoid adding template files to version control. P3 \u2013 Zigbee2MQTT Advanced diff Copy Edit --- a/zigbee2mqtt/configuration.yaml +++ b/zigbee2mqtt/configuration.yaml @@ -advanced: -  log_level: info +advanced: +  log_level: warn +  last_seen: ISO_8601 +  legacy_api: false +  debounce: 0.5 +  cache_state: true +  availability_timeout: 60 P3 \u2013 Template Organization - Review <code>templates.yaml</code> and determine whether high-traffic sensors (e.g., Huskers game countdown) should move into dedicated include files. - If you adopt <code>!include_dir_merge_list</code> patterns, create the backing directories as part of the same change so CI and runtime both load the templates correctly. P4 \u2013 Performance Dashboard - Add a dedicated \"System Performance\" view under <code>ui-lovelace/</code> (create the file if it does not exist) highlighting CPU, memory, uptime, and disk usage from the sensors added in P1. - Combine gauges, history graphs, and entity cards to track trends and expose key metrics at a glance. P4 \u2013 Huskers Fade Script diff Copy Edit --- a/scripts.yaml +++ b/scripts.yaml @@ +util_fade_color_optimized: +  alias: 'Util: Optimized Fade to Color' +  mode: parallel +  max: 20 +  fields: +    light: {} +    h: {} +    s: {} +    brightness: {} +    transition: {} +    predim_pct: {} +    predim_hold: {} +  sequence: +    - service: light.turn_on +      data: +        entity_id: \"{{ light }}\" +        brightness_pct: \"{{ predim_pct | int(10) }}\" +        transition: 0.1 +    - delay: \"{{ predim_hold | float(1) }}\" +    - service: light.turn_on +      data: +        entity_id: \"{{ light }}\" +        hs_color: [ \"{{ h | int }}\", \"{{ s | int }}\" ] +        brightness: \"{{ brightness | int(255) }}\" +        transition: \"{{ transition | float(3) }}\" \ud83e\uddfe Implementation Roadmap Week 1 Branch: chore/recorder-opts, chore/logger-opts</p> <p>Apply P0 patches, validate via CI and HA config check.</p> <p>Week 2 Branch: feat/system-monitoring, feat/mqtt-enh</p> <p>Add system sensors and MQTT performance, confirm dashboard entities.</p> <p>Week 3 Branch: chore/secrets-structure, chore/backup-automation</p> <p>Add secrets.example.yaml, backup automation, verify backup runs nightly.</p> <p>Week 4 Branch: feat/zigbee2mqtt-tuning, chore/templates-split</p> <p>Tune Z2M advanced config, move Huskers template to templates/.</p> <p>Week 5 Branch: feat/perf-dashboard, feat/huskers-optimizations</p> <p>Add new dashboard view and optimized fade script.</p> <p>\u2705 Success Metrics Startup time (before/after P0).</p> <p>Database growth (recorder cleanup).</p> <p>Memory &amp; CPU usage (via new sensors).</p> <p>Automation latency (logbook monitor).</p> <p>System stability (fewer forced restarts).</p>","tags":["roadmap","optimization","home-assistant"]},{"location":"explanation/pre-commit-strategy/","title":"Pre-commit Strategy for Green PRs","text":"<p>We rely on pre-commit to stop avoidable defects before they reach CI. The hooks mirror the checks that gate every pull request. When they pass locally, the CI run stays green, reviewers stay focused on the change itself, and merges happen without churn.</p>","tags":["pre-commit","ci","workflow"]},{"location":"explanation/pre-commit-strategy/#why-we-invest-in-pre-commit","title":"Why We Invest in Pre-commit","text":"<ul> <li>Fast feedback: Hooks run in seconds on a developer workstation versus several minutes in GitHub Actions.</li> <li>PR signal quality: A green pipeline signals \u201cready for review\u201d; red builds slow code review and slip our deployment cadence.</li> <li>Consistent automation: YAML formatting, lint rules, and Home Assistant validation stay identical everywhere because the same config powers local and remote runs.</li> <li>Reduced merge debt: Auto-fixes happen on the contributor\u2019s machine, eliminating follow-up commits or forced pushes during review.</li> </ul>","tags":["pre-commit","ci","workflow"]},{"location":"explanation/pre-commit-strategy/#how-ci-blocks-a-pull-request","title":"How CI Blocks a Pull Request","text":"<p>Two jobs in <code>.github/workflows/ci.yml</code> must pass before a PR can merge: - <code>ruff</code> runs the Python linter and formatter in check-only mode. - <code>pre-commit</code> skips the Ruff hooks but executes everything else (YAML formatter, whitespace hygiene, <code>yamllint</code>, and <code>hass-config-check</code>).</p> <p>If either job fails, the PR stays blocked. The quickest fix is to reproduce the failing hook locally with the same configuration.</p>","tags":["pre-commit","ci","workflow"]},{"location":"explanation/pre-commit-strategy/#definition-of-ready-to-push","title":"Definition of \u201cReady to Push\u201d","text":"<p>Do these before opening or updating a PR: 1. Activate the project environment: <code>poetry install</code> (first time) and <code>poetry shell</code> (optional) or <code>poetry run</code>. 2. Run <code>pre-commit run --all-files</code> to exercise the full hook suite. 3. Run <code>ruff check .</code> and <code>ruff format --check .</code> if you touched Python and want to mirror the dedicated CI job. 4. Restage any files changed by auto-fixes and re-run until clean.</p>","tags":["pre-commit","ci","workflow"]},{"location":"explanation/pre-commit-strategy/#handling-hook-failures","title":"Handling Hook Failures","text":"<ul> <li>Formatting rewrites: Stage the modified files (<code>git add</code>) and retry the commit.</li> <li>YAML schema violations: Review the error output; run <code>yamllint &lt;file&gt;</code> for focused debugging.</li> <li>Home Assistant validation: Use <code>pre-commit run hass-config-check</code> or <code>poetry run python .ci/run_hass_check.py</code> for a single repro. When the error references missing secrets, ensure <code>.ci/fakesecrets.yaml</code> covers new keys.</li> <li>Upstream updates: If hooks complain about missing versions, run <code>pre-commit autoupdate</code> in a dedicated PR.</li> </ul>","tags":["pre-commit","ci","workflow"]},{"location":"explanation/pre-commit-strategy/#continuous-improvement","title":"Continuous Improvement","text":"<p>We track flaky or slow hooks in the docs backlog. When a hook causes repeated false positives, log an issue and discuss whether to tweak configuration or move the check to a scheduled workflow.</p> <p>Future enhancements under discussion: - Lightweight nightly run of <code>hass --script check_config</code> to catch environment drift without blocking PRs. - Per-feature hook profiles that developers can opt into while experimenting (without weakening the default gate).</p> <p>By treating pre-commit as the first line of defence, we keep pull requests reviewable, shorten feedback loops, and ensure production automation stays reliable.</p>","tags":["pre-commit","ci","workflow"]},{"location":"how-to/agenda-planner/","title":"Configure Agenda Planner Calendars &amp; Todo Lists","text":"<p>The Agenda Planner scripts expect an existing <code>calendar</code> entity for events and a <code>todo</code> list entity for tasks. Follow the steps below using the Home Assistant UI (HAOS client or web browser).</p>","tags":["agenda","todo","home-assistant"]},{"location":"how-to/agenda-planner/#1-create-a-household-calendar","title":"1. Create a Household Calendar","text":"<ol> <li>Open Settings \u2192 Devices &amp; Services \u2192 + Add Integration.</li> <li>Search for Local Calendar (built-in) and click Local Calendar.</li> <li>Provide a name such as <code>Household Agenda</code>. Home Assistant will create an entity like <code>calendar.household_agenda</code>.</li> <li>Optional: add a description, set the color, and click Submit.</li> <li>Confirm the entity ID and copy it; you will paste it into <code>input_text.agenda_planner_calendar_entity</code> later.</li> </ol> <p>Tip: If you already sync another calendar (Google, Microsoft, etc.), you can use that existing entity instead. The agenda package only needs the entity ID.</p>","tags":["agenda","todo","home-assistant"]},{"location":"how-to/agenda-planner/#2-create-a-todo-list","title":"2. Create a Todo List","text":"<ol> <li>Navigate to Settings \u2192 Devices &amp; Services \u2192 + Add Integration again.</li> <li>Search for Todo List and choose Todo list (built-in).</li> <li>Enter a name such as <code>Household Tasks</code>. Home Assistant generates an entity like <code>todo.household_tasks</code>.</li> <li>Press Submit to finish. Copy the entity ID for the next step.</li> </ol> <p>Note: Home Assistant also supports third-party todo providers (e.g., CalDAV, Microsoft To Do). Any <code>todo.*</code> entity works with the Agenda Planner scripts.</p>","tags":["agenda","todo","home-assistant"]},{"location":"how-to/agenda-planner/#3-map-entities-to-the-agenda-planner-helpers","title":"3. Map Entities to the Agenda Planner Helpers","text":"<ol> <li>Go to Settings \u2192 Devices &amp; Services \u2192 Helpers.</li> <li>Locate the following helpers created by <code>packages/agenda_planner.yaml</code>:</li> <li><code>Agenda Planner Calendar Entity</code> (<code>input_text.agenda_planner_calendar_entity</code>)</li> <li><code>Agenda Planner Task List Entity</code> (<code>input_text.agenda_planner_task_list_entity</code>)</li> <li>Edit each helper and paste the entity ID from steps 1 and 2 (for example, <code>calendar.household_agenda</code> and <code>todo.household_tasks</code>). Save changes.</li> </ol>","tags":["agenda","todo","home-assistant"]},{"location":"how-to/agenda-planner/#4-optional-add-lovelace-controls","title":"4. (Optional) Add Lovelace Controls","text":"<p>Use the sample card layout from Agenda Planner Reference to drop the helpers and scripts onto a dashboard. Once the helpers hold the correct entity IDs, the buttons will create events and tasks immediately.</p>","tags":["agenda","todo","home-assistant"]},{"location":"how-to/agenda-planner/#5-test-the-flow","title":"5. Test the Flow","text":"<ol> <li>Enter a sample event title, adjust the start/end, and tap Agenda Planner \u2013 Add Calendar Event.</li> <li>Enter a sample task and tap Agenda Planner \u2013 Add Task.</li> <li>Verify the new event appears under Calendar, and the task under To-do list.</li> <li>Clear the sample items if desired.</li> </ol> <p>You're now ready to use the Agenda Planner from any Home Assistant client.</p>","tags":["agenda","todo","home-assistant"]},{"location":"how-to/ci/","title":"CI Pipeline Runbook","text":"<p>Use this guide when diagnosing pipeline failures or validating changes locally. The workflows live in <code>.github/workflows/</code> and mirror the tooling described in the Infrastructure Overview.</p>","tags":["ci","github-actions","home-assistant"]},{"location":"how-to/ci/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 installed locally (or use <code>poetry run</code>).</li> <li>Access to the repository with the full Git history.</li> <li>Docker available for reproducing the Home Assistant config check (optional but recommended).</li> </ul>","tags":["ci","github-actions","home-assistant"]},{"location":"how-to/ci/#workflow-inventory","title":"Workflow Inventory","text":"Workflow Trigger Purpose <code>ci.yml</code> Push &amp; PR Runs Ruff lint/format checks and the pre-commit suite. <code>ha-config-check.yaml</code> Manual, schedule, or PR label Executes <code>hass --script check_config</code> inside the official container using fakesecrets.","tags":["ci","github-actions","home-assistant"]},{"location":"how-to/ci/#local-parity","title":"Local Parity","text":"<p>Run the linting and formatting jobs exactly as CI:</p> <pre><code>ruff check .\nruff format --check .\npre-commit run --all-files\n</code></pre> <p>For configuration validation without pushing a branch:</p> <pre><code>poetry run python scripts/ha_check_portable.py\n# or via HA CLI on the host\nha core check\n</code></pre>","tags":["ci","github-actions","home-assistant"]},{"location":"how-to/ci/#ha-config-check-internals","title":"ha-config-check Internals","text":"<ol> <li>Checkout repository and restore caches.</li> <li>Copy <code>.ci/fakesecrets.yaml</code> to <code>secrets.yaml</code> (if present) to avoid leaking real credentials.</li> <li>Run <code>hass --script check_config</code> inside the official <code>homeassistant/home-assistant</code> image.</li> <li>Upload logs and the <code>configuration.yaml</code> snapshot as workflow artefacts for debugging.</li> </ol> <p>Retain <code>fakesecrets.yaml</code> in sync with required keys; reference the template when adding new secrets.</p>","tags":["ci","github-actions","home-assistant"]},{"location":"how-to/ci/#troubleshooting-cheatsheet","title":"Troubleshooting Cheatsheet","text":"<ul> <li>Ruff cache mismatch \u2192 run <code>ruff clean</code> locally and retry.</li> <li>Stale pre-commit hooks \u2192 delete <code>~/.cache/pre-commit</code> or pass <code>PRE_COMMIT_ALLOW_NO_CONFIG=1</code> once.</li> <li>Missing secrets in HA check \u2192 add placeholders to <code>.ci/fakesecrets.yaml</code> and regenerate.</li> <li>Workflow stuck in queued \u2192 confirm GitHub Actions concurrency limits; cancel redundant runs.</li> </ul>","tags":["ci","github-actions","home-assistant"]},{"location":"how-to/ci/#escalation","title":"Escalation","text":"<ul> <li>For CI infra issues (runner outages, permission problems) open a GitHub issue labelled <code>ci</code> and notify the platform team in chat.</li> <li>Add an ADR when changing workflow topology or introducing new validation stages.</li> </ul>","tags":["ci","github-actions","home-assistant"]},{"location":"how-to/pre-commit/","title":"Pre-commit Workflow","text":"<p>Follow this guide to keep local commits aligned with CI enforcement. Hooks live in <code>.pre-commit-config.yaml</code> and run automatically after you install the git hook.</p>","tags":["pre-commit","linting","workflow"]},{"location":"how-to/pre-commit/#hook-inventory","title":"Hook Inventory","text":"<ul> <li><code>yaml-format</code> local hook that uses <code>ruamel.yaml</code> for deterministic YAML formatting.</li> <li><code>trailing-whitespace</code>, <code>end-of-file-fixer</code>, <code>mixed-line-ending</code>, <code>check-yaml</code> from <code>pre-commit-hooks</code> keep whitespace, line endings, and schemas consistent.</li> <li><code>yamllint</code> enforces the style guide defined in <code>.yamllint.yml</code>.</li> <li><code>ruff</code> (lint + autofix) and <code>ruff-format</code> maintain Python quality.</li> <li><code>hass-config-check</code> wraps <code>.ci/run_hass_check.py</code> to mirror the Home Assistant validation performed in CI (rerun locally or via <code>ha core check</code> for deeper investigation).</li> </ul>","tags":["pre-commit","linting","workflow"]},{"location":"how-to/pre-commit/#setup","title":"Setup","text":"<pre><code>poetry install          # installs Ruff and pre-commit into the virtualenv\npre-commit install      # registers the git hook in .git/hooks/pre-commit\n</code></pre>","tags":["pre-commit","linting","workflow"]},{"location":"how-to/pre-commit/#typical-commands","title":"Typical Commands","text":"<pre><code>pre-commit run --all-files        # run everything once\nSKIP=ruff,ruff-format pre-commit run --all-files   # temporary skip (remember to re-run!)\n</code></pre> <p>Hooks that auto-fix files (<code>ruff --fix</code>, <code>yaml-format</code>, etc.) require you to re-stage the changes before committing.</p> <p>\u2705 Keep PRs unblocked: Run <code>pre-commit run --all-files</code> before pushing a branch. CI executes the same hooks, so a clean local run is the fastest way to avoid \u201cred\u201d pull requests and reviewer churn.</p>","tags":["pre-commit","linting","workflow"]},{"location":"how-to/pre-commit/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Upgrade hooks with <code>pre-commit autoupdate</code> then re-run to repin versions.</li> <li>Delete <code>~/.cache/pre-commit</code> if caches become corrupted after updates.</li> <li>For Ruff cache issues run <code>ruff clean</code>.</li> <li>If the hook fails on <code>hass-config-check</code>, reproduce locally via <code>poetry run python scripts/ha_check_portable.py</code> or <code>ha core check</code>.</li> </ul>","tags":["pre-commit","linting","workflow"]},{"location":"how-to/pre-commit/#related-docs","title":"Related Docs","text":"<ul> <li>CI Pipeline Runbook for the GitHub Actions mirror of these hooks.</li> <li>Infrastructure Overview for environment prerequisites.</li> </ul>","tags":["pre-commit","linting","workflow"]},{"location":"how-to/addons/govee2mqtt/","title":"Govee2MQTT Add-on","text":"<p>Use this playbook to integrate Govee lighting and air purifiers with Home Assistant via the community-driven Govee2MQTT add-on.</p>","tags":["govee","mqtt","addons"]},{"location":"how-to/addons/govee2mqtt/#prerequisites","title":"Prerequisites","text":"<ul> <li>Mosquitto broker installed and integrated (see Mosquitto guide).</li> <li>Advanced Mode enabled for your Home Assistant user.</li> <li>Govee account email/password for the IOT websocket and (optionally) a Govee API key for richer metadata.</li> </ul>","tags":["govee","mqtt","addons"]},{"location":"how-to/addons/govee2mqtt/#install-and-configure","title":"Install and Configure","text":"","tags":["govee","mqtt","addons"]},{"location":"how-to/addons/govee2mqtt/#1-install-the-add-on","title":"1. Install the add-on","text":"<ol> <li>Go to Settings \u2192 Add-ons \u2192 Add-on Store.</li> <li>Search for Govee to MQTT and click Install.</li> <li>In Configuration, start with LAN-only settings:    <code>yaml    temperature_scale: F    enable_lan: true    enable_iot: false    prefer_lan: true    homeassistant_discovery: true    retain_discovery: true    publish_state_updates: true    persist_state: true    cache_ttl_seconds: 900    log_level: info</code></li> <li>Start the add-on and watch the Log for messages such as \u201cStarting LAN discovery \u2026\u201d and \u201cMQTT connected \u2026 Connection Accepted\u201d.</li> </ol>","tags":["govee","mqtt","addons"]},{"location":"how-to/addons/govee2mqtt/#2-enable-iot-for-non-lan-devices-optional","title":"2. Enable IOT for non-LAN devices (optional)","text":"<p>Some devices (e.g., purifiers) require the cloud websocket.</p> <pre><code>enable_iot: true\ngovee_email: \"you@example.com\"\ngovee_password: \"REPLACE_ME\"\n#govee_mfa_token: \"123456\"  # if MFA is enabled and supported\n#govee_api_key: \"gv-REPLACE_WITH_YOUR_API_KEY\"\n</code></pre> <p>Restart the add-on after updating credentials. Check the log for a successful websocket connection, then restart once more while listening to <code>homeassistant/#</code> in Developer Tools \u2192 MQTT to confirm discovery payloads arrive.</p> <p>Supervisor add-on options cannot read <code>!secret</code>. Keep credentials in the add-on UI (they are not committed). Optionally mirror them in <code>secrets.yaml</code> for human reference only.</p>","tags":["govee","mqtt","addons"]},{"location":"how-to/addons/govee2mqtt/#verify-entities","title":"Verify Entities","text":"<ul> <li>Lights should appear as <code>light.*</code> entities with brightness, colour temperature, and effect lists where supported.</li> <li>Purifiers typically surface as <code>fan.*</code>, <code>switch.*</code>, and supporting <code>sensor.*</code> entities for filter life and mode.</li> </ul> <p>Test from Developer Tools \u2192 States or call services such as <code>light.turn_on</code> and <code>fan.set_percentage</code> to confirm control.</p>","tags":["govee","mqtt","addons"]},{"location":"how-to/addons/govee2mqtt/#optional-enhancements","title":"Optional Enhancements","text":"<ul> <li>Install Passive BLE Monitor via HACS for BLE-only sensors, then add the integration; entities will surface automatically.</li> <li>Retain the official \u201cGovee (cloud)\u201d integration only if you require redundancy\u2014avoid mixing entity sources in automations.</li> </ul>","tags":["govee","mqtt","addons"]},{"location":"how-to/addons/govee2mqtt/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Purifier missing \u2192 verify <code>enable_iot: true</code>, credentials, and device support in the add-on log; power-cycle the device.</li> <li>No effect list \u2192 supply your <code>govee_api_key</code> so the add-on can fetch extended metadata.</li> <li>No MQTT discovery payloads \u2192 confirm the Mosquitto integration is connected and restart the add-on while listening on <code>homeassistant/#</code>.</li> </ul>","tags":["govee","mqtt","addons"]},{"location":"how-to/addons/govee2mqtt/#resources","title":"Resources","text":"<ul> <li>Project docs: https://github.com/wez/govee2mqtt</li> <li>Govee developer portal: https://developer.govee.com/</li> <li>Passive BLE Monitor docs: https://custom-components.github.io/ble_monitor/</li> <li>Example configuration: govee2mqtt.options.example.yaml</li> </ul>","tags":["govee","mqtt","addons"]},{"location":"how-to/addons/mqtt/","title":"Mosquitto MQTT Add-on","text":"<p>This guide walks through installing the official Mosquitto broker add-on, wiring it to Home Assistant, and validating end-to-end messaging.</p>","tags":["mqtt","addons","home-assistant"]},{"location":"how-to/addons/mqtt/#prerequisites","title":"Prerequisites","text":"<ul> <li>Home Assistant OS with Supervisor and Advanced Mode enabled.</li> <li>Optional: Studio Code Server add-on for editing files.</li> <li>Decide on a dedicated MQTT user/password (store credentials in <code>secrets.yaml</code>, not in git).</li> </ul>","tags":["mqtt","addons","home-assistant"]},{"location":"how-to/addons/mqtt/#procedure","title":"Procedure","text":"","tags":["mqtt","addons","home-assistant"]},{"location":"how-to/addons/mqtt/#1-install-the-add-on","title":"1. Install the add-on","text":"<ol> <li>Open Settings \u2192 Add-ons \u2192 Add-on Store.</li> <li>Search for Mosquitto broker and click Install.</li> <li>(Optional) Review the Configuration tab. Defaults suit most deployments.</li> <li>Start the add-on and confirm the status turns to Running.</li> </ol>","tags":["mqtt","addons","home-assistant"]},{"location":"how-to/addons/mqtt/#2-create-an-mqtt-user-optional-but-recommended","title":"2. Create an MQTT user (optional but recommended)","text":"<ol> <li>Navigate to Settings \u2192 People \u2192 Users.</li> <li>Add a service account such as <code>addons</code> with a strong password.</li> </ol>","tags":["mqtt","addons","home-assistant"]},{"location":"how-to/addons/mqtt/#3-configure-the-mqtt-integration","title":"3. Configure the MQTT integration","text":"<ol> <li>Go to Settings \u2192 Devices &amp; Services \u2192 Add Integration \u2192 MQTT.</li> <li>If the broker is not auto-discovered, set:</li> <li>Broker: <code>core-mosquitto</code></li> <li>Port: <code>1883</code></li> <li>Username/Password: your MQTT user</li> <li>Submit and verify the card shows Connected.</li> </ol>","tags":["mqtt","addons","home-assistant"]},{"location":"how-to/addons/mqtt/#4-optional-yaml-declaration","title":"4. Optional YAML declaration","text":"<p>Store credentials in <code>secrets.yaml</code>:</p> <pre><code>mqtt_username: addons\nmqtt_password: REPLACE_ME\n</code></pre> <p>Then append to <code>configuration.yaml</code> if you prefer YAML-managed integrations:</p> <pre><code>mqtt:\n  broker: core-mosquitto\n  port: 1883\n  username: !secret mqtt_username\n  password: !secret mqtt_password\n</code></pre> <p>Avoid configuring MQTT via both UI and YAML unless the values match.</p>","tags":["mqtt","addons","home-assistant"]},{"location":"how-to/addons/mqtt/#verification","title":"Verification","text":"<ol> <li>Open Developer Tools \u2192 MQTT (requires Advanced Mode).</li> <li>Subscribe to <code>homeassistant/#</code>.</li> <li>Restart an MQTT client (e.g., Zigbee2MQTT). You should see retained discovery messages and state updates.</li> </ol>","tags":["mqtt","addons","home-assistant"]},{"location":"how-to/addons/mqtt/#hardening-operations","title":"Hardening &amp; Operations","text":"<ul> <li>Keep port <code>1883</code> limited to the LAN; do not expose it publicly.</li> <li>Use dedicated credentials per client where feasible.</li> <li>Take snapshots before major configuration changes (<code>Settings \u2192 System \u2192 Backups</code>).</li> <li>Document retention topics or custom ACLs in an ADR if you deviate from defaults.</li> </ul>","tags":["mqtt","addons","home-assistant"]},{"location":"how-to/addons/mqtt/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Integration shows \u201cDisconnected\u201d \u2014 re-enter broker host <code>core-mosquitto</code>, confirm the add-on is running, and validate credentials.</li> <li>No messages \u2014 ensure a publisher is online, confirm Advanced Mode, and re-check the MQTT listen tool.</li> <li>Duplicate entities \u2014 clear retained discovery topics for the device (<code>homeassistant/.../config</code>) and restart the publisher.</li> </ul>","tags":["mqtt","addons","home-assistant"]},{"location":"how-to/addons/mqtt/#related-resources","title":"Related Resources","text":"<ul> <li>Home Assistant MQTT docs: https://www.home-assistant.io/integrations/mqtt/</li> <li>Eclipse Mosquitto: https://mosquitto.org/</li> <li>Public test broker: https://test.mosquitto.org/</li> <li>For Govee devices, continue with the Govee2MQTT guide.</li> </ul>","tags":["mqtt","addons","home-assistant"]},{"location":"how-to/f1/","title":"Formula 1 Package &amp; Dashboard","text":"<p>This guide walks through enabling the Nicxe F1 Sensor integration, wiring the new <code>packages/f1_everything.yaml</code> automations, and importing the Lovelace dashboard that ships with this branch.</p>"},{"location":"how-to/f1/#prerequisites","title":"Prerequisites","text":"<ul> <li>Home Assistant 2024.12 or later with YAML packages enabled (<code>homeassistant: packages: !include_dir_merge_named packages</code>).</li> <li>The custom integration <code>Nicxe/f1_sensor</code> dropped into <code>custom_components/f1_sensor</code> (already present in this repo) or installed through HACS.</li> <li>An API configuration for the integration via Settings \u2192 Devices &amp; Services \u2192 Add Integration \u2192 F1 Sensor. Make sure you enable at least:</li> <li><code>next_race</code></li> <li><code>driver_standings</code></li> <li><code>constructor_standings</code></li> <li><code>weather</code></li> <li>Live options if you want track status, safety car, lap count, or weather telemetry on race day.</li> </ul>"},{"location":"how-to/f1/#deploy-the-package","title":"Deploy the Package","text":"<ol> <li>Copy <code>packages/f1_everything.yaml</code> into the directory that Home Assistant includes for packages.</li> <li>Restart Home Assistant so the helpers, templates, scenes, scripts, and automations register.</li> <li>After the restart, visit Settings \u2192 Devices &amp; Services \u2192 Helpers to confirm the new <code>F1</code> input booleans, numbers, and texts exist.</li> </ol>"},{"location":"how-to/f1/#optional-tweaks","title":"Optional Tweaks","text":"<ul> <li>Edit the light group at <code>group.f1_show_lights</code> if your celebratory fixtures differ from the Huskers install.</li> <li>Update the <code>scene.f1_*</code> definitions with your preferred colors and transitions.</li> <li>If you keep automations disabled outside of race weekends, flip <code>input_boolean.f1_automations_enabled</code> off; the dashboard exposes a quick toggle.</li> </ul>"},{"location":"how-to/f1/#import-the-dashboard","title":"Import the Dashboard","text":"<ol> <li>Place <code>dashboards/f1-dashboard.yaml</code> alongside your other YAML dashboards.</li> <li>In Settings \u2192 Dashboards, add a new YAML dashboard that points to this file (or update an existing entry).</li> <li>Refresh Lovelace; the new \u201cF1 Race Center\u201d view surfaces:</li> <li>Countdown, local start time, and phase label built from the F1 Sensor data</li> <li>Quick controls to refresh data and trigger the lighting scripts</li> <li>Markdown tables for the weekend schedule plus driver/constructor top fives</li> <li>Telemetry rows for live weather, lap count, safety car status, and the stored last flag message</li> </ol>"},{"location":"how-to/f1/#automation-overview","title":"Automation Overview","text":"<ul> <li>Enable Race Mode kicks in when the countdown drops below three hours or the session goes live. Race mode gates the show scripts and other automations.</li> <li>Disable Race Mode waits for wrap-up or a large countdown gap to power everything down and restore lights.</li> <li>Lights Out Showtime replays the classic five-light sequence five minutes before the green flag.</li> <li>Chequered Flag Celebration fires when the session transitions into a finished/finalised/ended state.</li> <li>Track Status Watch logs every change in the track status sensor and stashes a timestamped summary in <code>input_text.f1_last_flag_message</code> for dashboard display.</li> </ul> <p>Tune thresholds, quiet hours, or script targets as needed; the scaffolding mirrors the Huskers package so the patterns stay familiar.</p>"},{"location":"how-to/huskers/dashboard/","title":"Huskers Dashboard Guide","text":"<p>This guide documents the Huskers dashboards delivered in <code>dashboards/huskers-teamtracker.yaml</code>. Pair it with the Automation Catalog and Husker LED MQTT controls when troubleshooting, and keep the Huskers Dashboard History handy for architectural context.</p>","tags":["lovelace","huskers","dashboards"]},{"location":"how-to/huskers/dashboard/#prerequisites","title":"Prerequisites","text":"<ul> <li>Team Tracker integration (<code>custom_components/teamtracker</code>) configured for Nebraska (team id <code>158</code>).</li> <li>TeamTracker Lovelace card copied to <code>www/community/teamtracker-card/ha-teamtracker-card.js</code> and registered under <code>lovelace.resources</code>:   ```yaml</li> <li>url: /hacsfiles/teamtracker-card/ha-teamtracker-card.js     type: module   ```</li> <li>ESPN REST sensors from <code>packages/huskers_everything.yaml</code>, including the Big Ten standings endpoint (<code>sports.core.api.espn.com/.../groups/5/standings/0</code>).</li> <li>Apply the <code>Huskers Cream</code> theme (defined in <code>packages/huskers.yaml</code>) so custom Huskers CSS variables resolve correctly.</li> </ul> <p>Reload themes after deployment via Developer Tools \u2192 YAML \u2192 Reload themes so the custom color variables are available.</p>","tags":["lovelace","huskers","dashboards"]},{"location":"how-to/huskers/dashboard/#views","title":"Views","text":"","tags":["lovelace","huskers","dashboards"]},{"location":"how-to/huskers/dashboard/#1-game-day-husker-game-day","title":"1. Game Day (<code>/husker-game-day</code>)","text":"<p>Purpose: Fan-facing board with real-time game context.</p> <p>Highlights - TeamTracker hero card summarising clock, score, probability, and win/loss context. - Quick actions to refresh ESPN endpoints (<code>sensor.husker_team</code>, <code>sensor.espn_cfb_scoreboard</code>, <code>sensor.espn_nebraska_schedule</code>). - Lighting macros: launch the dual-cream 45\u202fs chase, trigger the Hail Varsity burst, or fall back to the all-scarlet scene. - Game Essentials card showing kickoff ISO, venue, TV network, betting line, and manual override flags sourced from <code>input_boolean.huskers_use_manual_score</code>/<code>input_boolean.huskers_use_manual_kickoff</code>. - Tailgate Countdown markdown wrapped in <code>binary_sensor.huskers_tailgate_window</code> so it only renders 24\u202fh before kickoff through 30\u202fmin post-game. - In-Game Situation markdown gated by <code>binary_sensor.huskers_is_live_espn</code>, focused on football context (clock, down/distance, drive, timeouts, win probability).</p> <p>Usage Notes - Manual kickoffs propagate through <code>sensor.huskers_kickoff_in_effective</code>; the countdown card automatically respects <code>input_boolean.huskers_use_manual_kickoff</code> and <code>input_number.huskers_kickoff_in_manual</code>. - <code>binary_sensor.huskers_tailgate_window</code> evaluates the kickoff timestamp, live/post-game states, and post-game runout to decide when the countdown card is shown. - Score overrides live in <code>input_number.huskers_our_score_manual</code> and <code>sensor.huskers_our_score_effective</code> and are reflected in the TeamTracker card. - The in-game card hides outside live phases; confirm <code>binary_sensor.huskers_is_live_espn</code> before troubleshooting missing data.</p>","tags":["lovelace","huskers","dashboards"]},{"location":"how-to/huskers/dashboard/#2-team-data-husker-team-data","title":"2. Team &amp; Data (<code>/husker-team-data</code>)","text":"<p>Purpose: Operator view for stats, standings, and sensor health.</p> <p>Highlights - Profile tables for Nebraska and the upcoming opponent, rendered with table rows instead of unordered bullet lists for faster scanning. - Color swatches convert hex strings (primary/secondary colors discovered from TeamTracker attributes) into live chips with the hex code beside a colored square. - Series summary placeholder driven by <code>sensor.husker_team</code> attributes when ESPN provides historical matchup text. - Raw sensor reference using entity rows for <code>sensor.husker_team</code> attributes; helps validate that the TeamTracker integration is populating data. - Big Ten standings markdown card built from the new ESPN Core API feed (<code>sports.core.api.espn.com/v2/.../groups/5/standings/0</code>). Each row displays overall and conference records in a markdown table. - Tailgate countdown uses the effective kickoff helper and is only visible while <code>binary_sensor.huskers_tailgate_window</code> is <code>on</code>.</p> <p>Usage Notes - When colors are missing from ESPN data, fallback Scarlet &amp; Cream palette values populate the color chips. - If the standings markdown shows \u201cunavailable,\u201d confirm that the REST sensor <code>sensor.espn_big_ten_teams</code> is returning the <code>standings</code> attribute (requires the updated package).</p>","tags":["lovelace","huskers","dashboards"]},{"location":"how-to/huskers/dashboard/#3-lighting-scenes-huskers-lighting","title":"3. Lighting &amp; Scenes (<code>/huskers-lighting</code>)","text":"<p>Purpose: Maintenance console for lighting automations and Husker-specific scenes.</p> <p>Highlights - Markdown intro summarising the intent and linking scenes/automations conceptually. - Lighting automation list for baseline daily lighting schedules (sunrise/sunset, monthly patterns). - Permanent LED status row showing <code>light.permanent_outdoor_lights</code> plus its detected effect, alongside the eight interior/exterior chase fixtures. - Dynamic scene list using <code>custom:auto-entities</code> so transient snapshot scenes (e.g., <code>scene.huskers_before_chase</code>) only appear when available.</p> <p>Usage Notes - Because snapshot scenes (<code>scene.huskers_before_chase</code>, <code>scene.huskers_before_burst</code>) only exist while a show is running, the auto-entities card hides them after restarts to avoid \u201centity not available.\u201d - The chase scripts drive the eight fixture group at 80\u202f% brightness while locking the permanent LEDs at 100\u202f%; use the effect attribute row to confirm the strip picked up <code>LED-Gametime</code> during shows. - The <code>sensor.huskers_game_status_espn</code> tile now exposes a <code>status_source</code> attribute. If ESPN removes the live scoreboard entry immediately after the whistle, the sensor falls back to the latest completed game from the season schedule so postgame automation checks keep working. If you notice the wrong source, confirm the schedule feed still lists the most recent matchup.</p>","tags":["lovelace","huskers","dashboards"]},{"location":"how-to/huskers/dashboard/#operations-checklist","title":"Operations Checklist","text":"<ul> <li>Use Refresh Game Data before kickoff or when ESPN phases feel stale.</li> <li>Toggle <code>input_boolean.huskers_test_mode</code> to simulate game phases without waiting for live data.</li> <li>Monitor <code>binary_sensor.huskers_light_show_active</code> while running lighting scripts; the sidebar icon warns if shows fail to shut down post-game.</li> <li>Validate the Big Ten standings table weekly during the season; ESPN occasionally changes payload structure\u2014adjust <code>packages/huskers_everything.yaml</code> accordingly.</li> </ul>","tags":["lovelace","huskers","dashboards"]},{"location":"how-to/huskers/dashboard/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If the TeamTracker card fails to load, verify the resource URL (<code>/hacsfiles/teamtracker-card/ha-teamtracker-card.js</code>) and clear the Lovelace cache (refresh with Ctrl+Shift+R).</li> <li>Missing logos or color swatches often mean ESPN returned <code>None</code>; check Home Assistant logs for REST errors and rerun the refresh buttons.</li> <li>If the countdown never shows, verify <code>binary_sensor.huskers_tailgate_window</code> (should turn on 24\u202fh pre-kickoff) and ensure <code>sensor.husker_team</code> carries a valid <code>date</code> attribute.</li> <li>Incorrect kickoff countdown usually points to the manual override toggles\u2014confirm <code>input_boolean.huskers_use_manual_kickoff</code> is set as expected.</li> </ul>","tags":["lovelace","huskers","dashboards"]},{"location":"how-to/huskers/dashboard/#related-documentation","title":"Related Documentation","text":"<ul> <li>Husker LED MQTT Controls</li> <li>Automation Catalog \u2013 Huskers Package</li> <li>Huskers Dashboard History</li> </ul>","tags":["lovelace","huskers","dashboards"]},{"location":"how-to/kiosk/sanitation-schedule/","title":"Kiosk Sanitation Schedule","text":"<p>This guide documents the Gretna Sanitation integration that feeds the kiosk dashboard with trash, recycling, and yard-waste pickup dates.</p>"},{"location":"how-to/kiosk/sanitation-schedule/#overview","title":"Overview","text":"<ul> <li>Script: <code>/config/scripts/gretna_sanitation.py</code> computes weekly trash, bi-weekly recycling, and seasonal yard-waste pickups with holiday offsets.</li> <li>Sensors: Defined in <code>configuration.yaml</code> under the <code>command_line:</code> domain and exposed via kiosk template sensors (<code>packages/kiosk.yaml</code>).</li> <li>Dashboard: The kiosk dashboard renders a markdown block summarising the next trash and recycling dates.</li> </ul>"},{"location":"how-to/kiosk/sanitation-schedule/#command-line-sensor-setup","title":"Command-line Sensor Setup","text":"<p>The command-line integration executes the schedule script twice per day and stores the JSON payload on <code>sensor.gretna_sanitation_schedule</code>.</p> <pre><code>command_line:\n  - sensor:\n      name: Todo Repo Tracker\n      unique_id: todo_repo_tracker\n      command: \"cat /config/TODO.md\"\n      scan_interval: 120\n\n  - sensor:\n      name: Gretna Sanitation Schedule\n      unique_id: kiosk_gretna_sanitation_schedule\n      command: \"/config/scripts/gretna_sanitation.py\"\n      scan_interval: 21600\n      value_template: \"{{ value_json.status | default('error') }}\"\n      json_attributes:\n        - generated_at\n        - reference_date\n        - trash\n        - recycling\n        - yard_waste\n        - metadata\n</code></pre> <p>The script itself can be tested manually with:</p> <pre><code>python /config/scripts/gretna_sanitation.py --reference-date 2025-05-20\n</code></pre> <p>Use the optional <code>--reference-date</code> flag to validate holiday shifts and season boundaries.</p>"},{"location":"how-to/kiosk/sanitation-schedule/#kiosk-template-sensors","title":"Kiosk Template Sensors","text":"<p><code>packages/kiosk.yaml</code> exposes user-friendly entities that read from the command-line sensor:</p> <ul> <li><code>sensor.kiosk_trash_pickup</code></li> <li><code>sensor.kiosk_recycling_pickup</code></li> <li><code>sensor.kiosk_yard_waste_pickup</code></li> <li><code>binary_sensor.kiosk_sanitation_feed_ok</code></li> <li><code>sensor.kiosk_yard_waste_in_season</code></li> </ul> <p>These provide the next pickup dates, holiday delay flags, and season windows consumed by the dashboard.</p>"},{"location":"how-to/kiosk/sanitation-schedule/#dashboard-markdown-card","title":"Dashboard Markdown Card","text":"<p><code>dashboards/kiosk-dashboard.yaml</code> includes a top-row markdown card titled Sanitation Schedule:</p> <pre><code>- type: markdown\n  content: |\n    ### Sanitation Schedule\n    {% set trash = states('sensor.kiosk_trash_pickup') %}\n    {% set trash_day = state_attr('sensor.kiosk_trash_pickup', 'pickup_weekday') %}\n    {% set recycle = states('sensor.kiosk_recycling_pickup') %}\n    {% set recycle_day = state_attr('sensor.kiosk_recycling_pickup', 'pickup_weekday') %}\n    - **Trash:** {% if trash not in ['unknown', 'unavailable', '', none] %}{{ trash }}{% if trash_day and trash_day not in ['unknown','unavailable'] %} ({{ trash_day }}){% endif %}{% else %}Pending\u2026{% endif %}\n    - **Recycling:** {% if recycle not in ['unknown', 'unavailable', '', none] %}{{ recycle }}{% if recycle_day and recycle_day not in ['unknown','unavailable'] %} ({{ recycle_day }}){% endif %}{% else %}Pending\u2026{% endif %}\n</code></pre> <p>The card updates automatically once the command-line sensor populates.</p>"},{"location":"how-to/kiosk/sanitation-schedule/#validation-steps","title":"Validation Steps","text":"<ol> <li>Reload Home Assistant or the command-line integration.</li> <li>Confirm <code>sensor.gretna_sanitation_schedule</code> reports <code>ok</code> and exposes attributes.</li> <li>Verify kiosk sensors show actual dates instead of <code>unknown</code>.</li> <li>Refresh the kiosk dashboard to see the Sanitation Schedule markdown card.</li> </ol> <p>When adding future cards, keep this block near the top of the Snapshot view to preserve the high-level overview.</p>"},{"location":"how-to/lighting/govee-lighting-stack/","title":"Govee Lighting Stack","text":"<p>This guide documents how we run Govee lighting (and the seasonal Tree) in Home Assistant using three coordinated pieces:</p> <ul> <li>HACS Govee integration (<code>https://github.com/LaggAt/hacs-govee</code>) for REST polling, effect metadata, and diagnostics.</li> <li>Govee2MQTT Supervisor add-on for low-latency LAN control and MQTT discovery.</li> <li>Mosquitto broker as the shared message bus, with credentials held in <code>secrets.yaml</code>.</li> </ul> <p>The combination gives us redundant control paths\u2014cloud-backed API plus the LAN bridge\u2014while maintaining a single entity set in Home Assistant.</p>","tags":["govee","mqtt","hacs","lighting"]},{"location":"how-to/lighting/govee-lighting-stack/#architecture-overview","title":"Architecture Overview","text":"<pre><code>Govee Cloud  \u2500\u2500\u25ba HACS Govee Integration\n                    \u2502\nLAN Devices \u2500\u2500\u25ba Govee2MQTT Add-on \u2500\u2500\u25ba Mosquitto Broker \u2500\u2500\u25ba Home Assistant MQTT integration\n                    \u2502                                                 \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 entity discovery &amp; state \u2500\u2500\u2500\u2518\n</code></pre> <ul> <li>The HACS integration supplies official entity metadata (names, effect lists, diagnostics) via REST polling every 10 seconds (<code>delay</code> in the config entry).</li> <li>Govee2MQTT publishes instant LAN state updates and commands through Mosquitto using the MQTT credentials defined in <code>secrets.yaml</code> (<code>mqtt_username</code> / <code>mqtt_password</code>).</li> <li>Home Assistant merges both sources under the <code>light.*</code> entities listed in <code>.storage/core.entity_registry</code> (see the verification section below).</li> </ul>","tags":["govee","mqtt","hacs","lighting"]},{"location":"how-to/lighting/govee-lighting-stack/#prerequisites","title":"Prerequisites","text":"<ul> <li>Home Assistant OS 16.x with Supervisor and Advanced Mode enabled.</li> <li>HACS installed.</li> <li>Mosquitto broker and Govee2MQTT add-ons available in the Add-on Store.</li> <li>At least one Govee lighting device on the same network.</li> <li>Govee account credentials and REST API key (create at https://developer.govee.com/).</li> </ul> <p>Use the existing how-to guides for baseline setup: Mosquitto and Govee2MQTT.</p>","tags":["govee","mqtt","hacs","lighting"]},{"location":"how-to/lighting/govee-lighting-stack/#step-1-store-mqtt-secrets","title":"Step 1 \u2013 Store MQTT Secrets","text":"<p>Hold broker credentials in <code>secrets.yaml</code> so both YAML and UI-based integrations refer to the same values:</p> <pre><code>mqtt_username: mqtt\nmqtt_password: REPLACE_WITH_STRONG_PASSWORD\n</code></pre> <p>These keys already exist in this repository; update the password locally if it changes. Avoid committing real secrets.</p>","tags":["govee","mqtt","hacs","lighting"]},{"location":"how-to/lighting/govee-lighting-stack/#step-2-wire-mosquitto-to-home-assistant","title":"Step 2 \u2013 Wire Mosquitto to Home Assistant","text":"<ol> <li>Install and start the Mosquitto broker add-on.</li> <li>Add the MQTT integration via Settings \u2192 Devices &amp; Services \u2192 Add Integration \u2192 MQTT. If auto-discovery fails, use:</li> <li>Broker: <code>core-mosquitto</code></li> <li>Port: <code>1883</code></li> <li>Username / Password: <code>!secret mqtt_username</code> and <code>!secret mqtt_password</code></li> <li>(Optional) Mirror the connection in YAML:</li> </ol> <p><code>yaml    mqtt:      broker: core-mosquitto      port: 1883      username: !secret mqtt_username      password: !secret mqtt_password</code></p> <ol> <li>Subscribe to <code>homeassistant/#</code> in Developer Tools \u2192 MQTT to verify the broker responds.</li> </ol>","tags":["govee","mqtt","hacs","lighting"]},{"location":"how-to/lighting/govee-lighting-stack/#step-3-configure-the-govee2mqtt-bridge","title":"Step 3 \u2013 Configure the Govee2MQTT Bridge","text":"<p>Follow the Govee2MQTT add-on playbook with these project-specific notes:</p> <ul> <li>In the add-on configuration UI, set the MQTT section to match the secrets above:</li> </ul> <p><code>yaml   mqtt:     host: core-mosquitto     port: 1883     username: mqtt     password: ${MQTT_PASSWORD}</code></p> <p>Replace <code>${MQTT_PASSWORD}</code> with the actual password\u2014Supervisor add-ons cannot read <code>!secret</code>. Keep the value synced with <code>secrets.yaml</code> manually. - Enable both LAN and IoT modes when you need cloud-only devices (purifiers) alongside LAN-capable lights:</p> <p><code>yaml   enable_lan: true   enable_iot: true   prefer_lan: true</code></p> <ul> <li>Supply <code>govee_email</code>, <code>govee_password</code>, and optional <code>govee_api_key</code> directly in the add-on UI. Restart after saving and check the log for <code>MQTT connected</code> and <code>Home Assistant discovery queued</code> lines.</li> </ul>","tags":["govee","mqtt","hacs","lighting"]},{"location":"how-to/lighting/govee-lighting-stack/#step-4-install-the-hacs-govee-integration","title":"Step 4 \u2013 Install the HACS Govee Integration","text":"<ol> <li>Open HACS \u2192 Integrations \u2192 \u22ee \u2192 Custom repositories.</li> <li>Add <code>https://github.com/LaggAt/hacs-govee</code> with category Integration.</li> <li>Back in HACS, search for Govee, install the integration, and restart Home Assistant when prompted.</li> <li>Go to Settings \u2192 Devices &amp; Services \u2192 Add Integration \u2192 Govee (from HACS). When the config flow prompts:</li> <li>Enter the REST API key. Record it in a local password manager; optionally add <code>govee_rest_api_key: YOUR_KEY</code> to <code>secrets.yaml</code> for reference (not read automatically).</li> <li>Leave the poll delay at <code>10</code> seconds unless API limits are hit.</li> <li>Confirm the integration card shows 1 device, N entities matching your fleet.</li> </ol> <p>The configuration data is stored in <code>.storage/core.config_entries</code> under the <code>domain: \"govee\"</code> entry. Changing the API key later re-runs the auth step.</p>","tags":["govee","mqtt","hacs","lighting"]},{"location":"how-to/lighting/govee-lighting-stack/#step-5-wire-the-kiosk-dashboard","title":"Step 5 \u2013 Wire the Kiosk Dashboard","text":"<p>The refreshed <code>dashboards/kiosk-dashboard.yaml</code> relies entirely on stock Lovelace cards so it works out of the box on a clean Home Assistant install. The Control tab is organised as:</p> <ol> <li>Status stacks built from <code>markdown</code>, <code>grid</code>, and <code>tile</code> cards for quick counts (lights on, runtimes, automations).</li> <li>Group and individual controls using <code>tile</code> cards so every light or switch can be toggled without third-party components.</li> <li>Automation buttons created with the core <code>button</code> card to trigger scenes and scripts.</li> </ol> <p>Example fragment:</p> <pre><code># Main Floor lights in dashboards/kiosk-dashboard.yaml\n- type: vertical-stack\n  cards:\n    - type: markdown\n      content: \"## Main Floor Lights\"\n    - type: grid\n      columns: 3\n      square: false\n      cards:\n        - type: tile\n          entity: light.livingroom_light\n          name: Living Room\n        - type: tile\n          entity: light.diningroom_light\n          name: Dining Room\n        - type: tile\n          entity: light.sunroom_light\n          name: Sunroom\n</code></pre> <ul> <li>Because only built-in cards are used, there are no Lovelace resource entries to manage for the kiosk dashboard.</li> <li>After editing the YAML, a normal browser refresh is enough\u2014no cache purge is typically required.</li> </ul>","tags":["govee","mqtt","hacs","lighting"]},{"location":"how-to/lighting/govee-lighting-stack/#step-6-verify-unified-entities","title":"Step 6 \u2013 Verify Unified Entities","text":"<p>Use this <code>jq</code> command (from <code>/config</code>) to list every entity tied to the Govee config entry <code>01K684EHN5KW6ED0GDXBZFF0J9</code> plus its device metadata:</p> <pre><code>jq --slurp --arg entry \"01K684EHN5KW6ED0GDXBZFF0J9\" '.[0] as $entities | .[1] as $devices | ($entities.data.entities | map(select(.config_entry_id == $entry))) as $filtered | ($devices.data.devices | map({id,name,area_id,manufacturer,model})) as $devs | $filtered | map({entity_id, original_name, device: ($devs[]? | select(.id == .device_id))})' .storage/core.entity_registry .storage/core.device_registry\n</code></pre> <p>Expected highlights:</p> <ul> <li>Lights such as <code>light.livingroom_light</code> map to physical devices discovered via Govee2MQTT (<code>manufacturer: \"Govee\"</code>).</li> <li>Group entities (e.g., <code>light.mainfloor_lights</code>) live in <code>light.yaml</code> and combine the individual devices for kiosk control.</li> </ul> <p>If entities are missing, restart the add-on and re-run the command. Clearing retained MQTT discovery topics (<code>homeassistant/gv2mqtt/.../config</code>) forces a fresh publish.</p>","tags":["govee","mqtt","hacs","lighting"]},{"location":"how-to/lighting/govee-lighting-stack/#ongoing-maintenance","title":"Ongoing Maintenance","text":"<ul> <li>Monthly: Check HACS for updates to the Govee integration and restart Home Assistant after upgrading.</li> <li>Quarterly: Update the Govee2MQTT add-on and confirm LAN discovery still reaches every device.</li> <li>Secrets hygiene: Rotate the MQTT password (<code>mqtt_password</code> in <code>secrets.yaml</code>) and update the add-on UI accordingly.</li> <li>Backup: Include <code>.storage/</code> and <code>secrets.yaml</code> in full supervisor snapshots before major upgrades.</li> </ul>","tags":["govee","mqtt","hacs","lighting"]},{"location":"how-to/lighting/govee-lighting-stack/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Entities duplicated \u2013 Delete old <code>light.*</code> entries tied to legacy integrations, then reload MQTT discovery.</li> <li>Color controls missing in the UI \u2013 Tile cards expose on/off, brightness, and colour temperature by default. For RGB colour pickers, expose the entity through the standard light more-info dialog or layer in a custom card if needed.</li> <li>MQTT auth failures \u2013 Re-enter credentials in the add-on UI and the MQTT integration; inspect the Mosquitto log for <code>Connection Refused</code> codes.</li> <li>API quota exceeded \u2013 Increase the poll <code>delay</code> in the Govee integration configuration or temporarily disable the cloud path and rely on the LAN bridge.</li> </ul>","tags":["govee","mqtt","hacs","lighting"]},{"location":"how-to/lighting/govee-lighting-stack/#references","title":"References","text":"<ul> <li>HACS repository: https://github.com/LaggAt/hacs-govee</li> <li>Lovelace tile reference: https://www.home-assistant.io/dashboards/tile/</li> <li>Govee2MQTT project: https://github.com/wez/govee2mqtt</li> <li>Mosquitto add-on docs: docs/how-to/addons/mqtt.md</li> <li>Govee2MQTT add-on guide: docs/how-to/addons/govee2mqtt.md</li> </ul>","tags":["govee","mqtt","hacs","lighting"]},{"location":"how-to/lighting/husker-led-mqtt/","title":"Husker LED MQTT Controls","text":"<p>This guide explains how to deploy the Husker LED scripts that coordinate the permanent outdoor lighting with game-day automations. The scripts live in <code>packages/huskers_everything.yaml</code> and depend on the Mosquitto broker being online.</p>","tags":["mqtt","lighting","scripts"]},{"location":"how-to/lighting/husker-led-mqtt/#prerequisites","title":"Prerequisites","text":"<ul> <li>Home Assistant in YAML mode with <code>homeassistant.packages: !include_dir_merge_named packages</code> configured.</li> <li>MQTT broker configured and reachable.</li> <li>Permanent outdoor LED strip entities exposed as <code>light.permanent_outdoor_lights</code> (or adjust the script target).</li> </ul>","tags":["mqtt","lighting","scripts"]},{"location":"how-to/lighting/husker-led-mqtt/#deployment-steps","title":"Deployment Steps","text":"<ol> <li>Ensure packages directory is enabled in <code>configuration.yaml</code>:    <code>yaml    homeassistant:      packages: !include_dir_merge_named packages</code></li> <li>Place or update the Husker package in <code>packages/huskers_everything.yaml</code> (see repository for canonical version).</li> <li>Reload automations and scripts after deploying:</li> <li>UI: Settings \u2192 System \u2192 Automations &amp; Scenes \u2192 Reload Automations (and Scripts).</li> <li>CLI: <code>ha core reload</code>.</li> </ol>","tags":["mqtt","lighting","scripts"]},{"location":"how-to/lighting/husker-led-mqtt/#available-scripts","title":"Available Scripts","text":"<ul> <li><code>script.husker_led_start</code> \u2014 pushes the scarlet &amp; cream theme via MQTT.</li> <li><code>script.husker_led_stop</code> \u2014 stops the show and re-applies the monthly effect using <code>automation.led_monthly_effect_scheduler</code>.</li> </ul> <p>Use these scripts from the Husker dashboards\u2014the Lighting &amp; Scenes view surfaces the key scripts and automations\u2014or via direct service calls. During game-day shows the chase routines hold the permanent LEDs at 100\u202f% brightness while the chase group runs at 80\u202f%, so the strip always punches through exterior ambient light even if indoor fixtures are dimmed.</p>","tags":["mqtt","lighting","scripts"]},{"location":"how-to/lighting/husker-led-mqtt/#manual-invocation","title":"Manual Invocation","text":"<p>Trigger from Developer Tools \u2192 Services:</p> <pre><code>service: script.turn_on\ndata:\n  entity_id: script.husker_led_start\n</code></pre> <p>To revert to the monthly effect:</p> <pre><code>service: script.turn_on\ndata:\n  entity_id: script.husker_led_stop\n</code></pre>","tags":["mqtt","lighting","scripts"]},{"location":"how-to/lighting/husker-led-mqtt/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>No response from LEDs \u2192 confirm the MQTT broker is reachable and the light entity supports effects/brightness. Check the add-on logs.</li> <li>Effect unavailable \u2192 verify the monthly effect exists in <code>light.permanent_outdoor_lights</code>\u2019 <code>effect_list</code>.</li> <li>Automation conflict \u2192 ensure the Husker lighting hold sensors allow the automation (see Automation Catalog).</li> </ul>","tags":["mqtt","lighting","scripts"]},{"location":"how-to/lighting/husker-led-mqtt/#related-docs","title":"Related Docs","text":"<ul> <li>Husker Dashboard Guide</li> <li>Automation Catalog</li> <li>Mosquitto MQTT Add-on</li> </ul>","tags":["mqtt","lighting","scripts"]},{"location":"reference/agenda-planner/","title":"Agenda Planner","text":"<p>The <code>agenda_planner</code> package bundles helpers, scripts, and template sensors so family members can create calendar events and to\u2011do items straight from the Home Assistant UI (mobile or kiosk). It relies on native Home Assistant <code>calendar</code> and <code>todo</code> integrations, so you can point it at any configured entity.</p>","tags":["agenda","todo","home-assistant"]},{"location":"reference/agenda-planner/#entities-provided","title":"Entities Provided","text":"Domain Entity Purpose <code>input_text</code> <code>agenda_planner_calendar_entity</code> Stores the default calendar entity ID (e.g. <code>calendar.household_agenda</code>). <code>input_text</code> <code>agenda_planner_event_title</code> / <code>agenda_planner_event_description</code> Capture event summary and optional notes before submission. <code>input_datetime</code> <code>agenda_planner_event_start</code> / <code>agenda_planner_event_end</code> Date/time pickers used by the event script. <code>input_select</code> <code>agenda_planner_event_category</code> Quick category tag to include in the notification message. <code>input_text</code> <code>agenda_planner_task_list_entity</code>, <code>agenda_planner_task_title</code>, <code>agenda_planner_task_notes</code> Manage the target todo list and task metadata. <code>input_datetime</code> <code>agenda_planner_task_due</code> Task due date/time. <code>input_boolean</code> <code>agenda_planner_task_all_day</code> Toggle to treat the task due date as all-day. <code>input_select</code> <code>agenda_planner_task_priority</code> Maps to the <code>todo.add_item</code> priority field. <code>script</code> <code>script.agenda_planner_add_event</code> Validates inputs and calls <code>calendar.create_event</code>. <code>script</code> <code>script.agenda_planner_add_task</code> Validates inputs and calls <code>todo.add_item</code>. <code>sensor</code> <code>sensor.agenda_planner_summary</code> Shows how many calendars/lists are available, plus the next event and open task count. <code>sensor</code> <code>sensor.agenda_planner_entities</code> Helper sensor exposing available calendar and todo entity IDs for the scripts. <p>Automations inside the package seed default start/end times on HA start, auto-extend the end time if a user picks a start in the past, and normalize the due date when the all-day toggle is enabled.</p>","tags":["agenda","todo","home-assistant"]},{"location":"reference/agenda-planner/#usage-workflow","title":"Usage Workflow","text":"<ol> <li>Update <code>input_text.agenda_planner_calendar_entity</code> and <code>input_text.agenda_planner_task_list_entity</code> once with the entity IDs you want to target (see Creating the calendar and list).</li> <li>Add the helpers and scripts to a Lovelace dashboard (e.g. Mushroom form cards or built-in <code>input</code> cards).</li> <li>Users fill in the title, optionally adjust dates/times, and press the corresponding script button to create the event or task.</li> <li>Confirmation arrives via <code>persistent_notification.create</code>; adjust the script if you prefer mobile push or another channel.</li> </ol>","tags":["agenda","todo","home-assistant"]},{"location":"reference/agenda-planner/#refresh-defaults","title":"Refresh Defaults","text":"<p>If the helper fields ever fall out of sync, run the <code>Agenda Planner \u2013 Refresh Defaults On Startup</code> automation manually (or restart Home Assistant) to restore time pickers and blank the text fields.</p>","tags":["agenda","todo","home-assistant"]},{"location":"reference/agenda-planner/#related-dashboard-idea","title":"Related Dashboard Idea","text":"<p>A simple Lovelace layout:</p> <pre><code>- type: vertical-stack\n  cards:\n    - type: entities\n      title: Quick Event\n      entities:\n        - input_text.agenda_planner_event_title\n        - input_text.agenda_planner_event_description\n        - input_datetime.agenda_planner_event_start\n        - input_datetime.agenda_planner_event_end\n        - input_select.agenda_planner_event_category\n        - script.agenda_planner_add_event\n    - type: entities\n      title: Quick Task\n      entities:\n        - input_text.agenda_planner_task_title\n        - input_text.agenda_planner_task_notes\n        - input_datetime.agenda_planner_task_due\n        - input_boolean.agenda_planner_task_all_day\n        - input_select.agenda_planner_task_priority\n        - script.agenda_planner_add_task\n</code></pre> <p>Customize the cards (Mushroom, button, or form cards) to match your dashboard styling.</p>","tags":["agenda","todo","home-assistant"]},{"location":"reference/agenda-planner/#task-list-limitations","title":"Task list limitations","text":"<p>The built-in Home Assistant todo list integration currently ignores priority values. The <code>agenda_planner_add_task</code> script sends the summary, description, and due date/time only; adjust the script if you migrate to a provider that supports priorities.</p>","tags":["agenda","todo","home-assistant"]},{"location":"reference/automations/","title":"Automation Catalog","text":"<p>Use this catalog as the single source of truth for automation behaviour. Each entry references its source file so code owners can jump straight to definitions. When adding or modifying automations, update this page in the same pull request.</p>","tags":["home-assistant","automations"]},{"location":"reference/automations/#lighting-led-safety-climate-automationsyaml","title":"Lighting, LED, Safety &amp; Climate (<code>automations.yaml</code>)","text":"","tags":["home-assistant","automations"]},{"location":"reference/automations/#lighting-evening-lights-at-sunset-automationsyaml3","title":"Lighting: Evening Lights at Sunset (<code>automations.yaml:3</code>)","text":"<ul> <li>ID <code>evening_lights_at_sunset</code></li> <li>Trigger: Sun sets +5 minutes (<code>platform: sun</code>, <code>event: sunset</code>, <code>offset: 00:05:00</code>).</li> <li>Guards: Requires <code>binary_sensor.holiday_mode_active</code> to be <code>off</code> and <code>binary_sensor.huskers_lighting_hold</code> to be <code>off</code> so holiday overrides and Husker light shows can take priority.</li> <li>Actions: Brings sunroom, dining room, and living room lighting to 60% with a 2 s transition.</li> </ul>","tags":["home-assistant","automations"]},{"location":"reference/automations/#lighting-exterior-front-garage-on-sunset-automationsyaml28","title":"Lighting: Exterior Front &amp; Garage On (Sunset) (<code>automations.yaml:28</code>)","text":"<ul> <li>ID <code>exterior_front_garage_on_sunset</code></li> <li>Trigger: Sun sets +5 minutes.</li> <li>Guards: Skips when either <code>binary_sensor.holiday_mode_active</code> is <code>on</code> or <code>binary_sensor.huskers_lighting_hold</code> is <code>on</code>.</li> <li>Actions: Turns on porch and garage fixtures at low brightness and ramps <code>light.permanent_outdoor_lights</code> to 50% when available.</li> </ul>","tags":["home-assistant","automations"]},{"location":"reference/automations/#lighting-night-mode-at-midnight-automationsyaml65","title":"Lighting: Night Mode at Midnight (<code>automations.yaml:65</code>)","text":"<ul> <li>ID <code>night_mode_at_midnight</code></li> <li>Trigger: Time equals <code>00:00:00</code>.</li> <li>Guards: Pauses while <code>binary_sensor.holiday_mode_active</code> is <code>on</code> to honour holiday scenes.</li> <li>Actions: Powers down interior/exterior fixtures and leaves permanent LEDs glowing at 20%.</li> </ul>","tags":["home-assistant","automations"]},{"location":"reference/automations/#lighting-early-morning-gentle-wake-330-am-automationsyaml105","title":"Lighting: Early Morning Gentle Wake (3:30 AM) (<code>automations.yaml:105</code>)","text":"<ul> <li>ID <code>early_morning_lights_0330</code></li> <li>Trigger: Time equals <code>03:30:00</code>.</li> <li>Guards: Suppressed if <code>binary_sensor.holiday_mode_active</code> is <code>on</code>.</li> <li>Actions: Softly lights interior spaces (10%, warm) and exterior fixtures (10%, cool); boosts permanent LEDs to 50%.</li> </ul>","tags":["home-assistant","automations"]},{"location":"reference/automations/#lighting-morning-lights-off-sunrise-15-min-automationsyaml148","title":"Lighting: Morning Lights Off (Sunrise + 15 min) (<code>automations.yaml:148</code>)","text":"<ul> <li>ID <code>interior_lights_sunrise_off</code></li> <li>Trigger: Sunrise +15 minutes.</li> <li>Guards: Skips while <code>binary_sensor.holiday_mode_active</code> is <code>on</code> or <code>binary_sensor.huskers_light_show_active</code> is <code>on</code>.</li> <li>Actions: Fades sunroom, living room, and dining room lights off.</li> </ul>","tags":["home-assistant","automations"]},{"location":"reference/automations/#lighting-exterior-front-garage-off-sunrise-automationsyaml171","title":"Lighting: Exterior Front &amp; Garage Off (Sunrise) (<code>automations.yaml:171</code>)","text":"<ul> <li>ID <code>exterior_lights_sunrise_off</code></li> <li>Trigger: Sunrise +5 minutes.</li> <li>Guards: Skips while <code>binary_sensor.holiday_mode_active</code> or <code>binary_sensor.huskers_light_show_active</code> is <code>on</code>.</li> <li>Actions: Turns off porch, garage, and permanent outdoor lights.</li> </ul>","tags":["home-assistant","automations"]},{"location":"reference/automations/#led-monthly-effect-scheduler-automationsyaml205","title":"LED: Monthly Effect Scheduler (<code>automations.yaml:205</code>)","text":"<ul> <li>ID <code>exterior_led_monthly_effect</code></li> <li>Triggers: Time <code>00:00:01</code> daily and Home Assistant start.</li> <li>Guards: Requires <code>binary_sensor.holiday_mode_active</code> to be <code>off</code> and confirms the requested <code>effect</code> exists in <code>light.permanent_outdoor_lights</code>.</li> <li>Actions: Waits up to two minutes for the permanent outdoor light effect list to load after startup, applies the month-specific effect when available, and logs success or a skip if the effect never appears. See Husker LED MQTT Controls for manual overrides.</li> </ul>","tags":["home-assistant","automations"]},{"location":"reference/automations/#climate-humidor-temperature-control-automationsyaml251","title":"Climate: Humidor Temperature Control (<code>automations.yaml:251</code>)","text":"<ul> <li>ID <code>humidor_plug_temp_control</code></li> <li>Triggers: Temperature at <code>sensor.hygrometer_humidor_temperature</code> &gt; 74\u00b0F for 2 minutes, or &lt; 70\u00b0F for 1 minute.</li> <li>Guards: Requires <code>binary_sensor.holiday_mode_active</code> to be <code>off</code> and uses a template safeguard so the plug toggles only when necessary.</li> <li>Actions: Switches <code>switch.plug_humidor</code> on/off and logs temperature + humidity snapshots.</li> </ul>","tags":["home-assistant","automations"]},{"location":"reference/automations/#safety-nightly-burner-plug-shutoff-automationsyaml296","title":"Safety: Nightly Burner Plug Shutoff (<code>automations.yaml:296</code>)","text":"<ul> <li>ID <code>burner_plugs_off_2300</code></li> <li>Trigger: Time equals <code>23:00:00</code>.</li> <li>Guards: Does not run while <code>binary_sensor.holiday_mode_active</code> is <code>on</code> to respect manual/holiday overrides.</li> <li>Actions: Turns off all burner plugs, pushes a persistent notification, and records a logbook entry.</li> </ul>","tags":["home-assistant","automations"]},{"location":"reference/automations/#weather-dashboard-package-packagesweather_dashboard_packageyaml","title":"Weather Dashboard Package (<code>packages/weather_dashboard_package.yaml</code>)","text":"","tags":["home-assistant","automations"]},{"location":"reference/automations/#weather-severe-alert-notification-packagesweather_dashboard_packageyaml223","title":"Weather: Severe Alert \u2192 Notification (<code>packages/weather_dashboard_package.yaml:223</code>)","text":"<ul> <li>ID <code>weather_alert_notify</code></li> <li>Trigger: Any state change on <code>sensor.nws_alerts</code>.</li> <li>Guards: Requires <code>input_boolean.weather_notifications_enabled</code> to be <code>on</code>.</li> <li>Actions: Creates a persistent notification summarising the incoming alert.</li> </ul>","tags":["home-assistant","automations"]},{"location":"reference/automations/#huskers-package-packageshuskers_everythingyaml","title":"Huskers Package (<code>packages/huskers_everything.yaml</code>)","text":"<p>These automations pair with the Husker Dashboard Guide and Huskers LED scripts. ESPN data is sourced via the TeamTracker integration and the REST sensors defined in <code>packages/huskers_everything.yaml</code> (including the Core API standings endpoint).</p>","tags":["home-assistant","automations"]},{"location":"reference/automations/#huskers-enable-game-mode-window-packageshuskers_everythingyaml997","title":"Huskers: Enable Game Mode Window (<code>packages/huskers_everything.yaml:997</code>)","text":"<ul> <li>ID <code>huskers_game_mode_enable_window</code></li> <li>Triggers: <code>sensor.huskers_kickoff_in_effective</code> &lt; 121 for \u22651 minute, or ESPN pregame/live binary sensors turning <code>on</code>.</li> <li>Guards: Game mode currently <code>off</code> and evidence of an upcoming or active game.</li> <li>Actions: Enables <code>input_boolean.huskers_game_mode</code> and logs kickoff timing.</li> </ul>","tags":["home-assistant","automations"]},{"location":"reference/automations/#huskers-disable-game-mode-window-packageshuskers_everythingyaml1038","title":"Huskers: Disable Game Mode Window (<code>packages/huskers_everything.yaml:1038</code>)","text":"<ul> <li>ID <code>huskers_game_mode_disable_window</code></li> <li>Triggers: Postgame ESPN sensor <code>on</code> for 2 hours, or kickoff timer &gt; 120 for \u22655 minutes.</li> <li>Guards: Game mode <code>on</code>, ESPN pregame and live sensors both <code>off</code>.</li> <li>Actions: Disables <code>input_boolean.huskers_game_mode</code> and logs the change.</li> </ul>","tags":["home-assistant","automations"]},{"location":"reference/automations/#huskers-pregame-showtime-t-20-minutes-packageshuskers_everythingyaml1072","title":"Huskers: Pregame Showtime (T-20 Minutes) (<code>packages/huskers_everything.yaml:1072</code>)","text":"<ul> <li>ID <code>huskers_showtime_at_t_20</code></li> <li>Trigger: Kickoff timer between 19\u201321 minutes for &gt;5 seconds.</li> <li>Guards: Huskers automations enabled, game mode <code>on</code>, ESPN pregame <code>on</code> (or test mode), and chase scripts idle.</li> <li>Actions: Launches <code>script.huskers_chase30_start</code> (dual-cream, 45\u202fs loop; interior group at 80\u202f% brightness, permanent LEDs pinned at 100\u202f%) and logs the start event.</li> </ul>","tags":["home-assistant","automations"]},{"location":"reference/automations/#huskers-touchdown-celebration-packageshuskers_everythingyaml1114","title":"Huskers: Touchdown Celebration (<code>packages/huskers_everything.yaml:1114</code>)","text":"<ul> <li>ID <code>huskers_td_burst_on_score</code></li> <li>Trigger: State change on <code>sensor.huskers_our_score_effective</code>.</li> <li>Guards: Huskers automations + game mode <code>on</code>; score must increase.</li> <li>Actions: Runs <code>script.huskers_hail_burst_8s</code> (scarlet reset plus cream accents at 80\u202f%, permanent LEDs held at 100\u202f%) and logs the score delta.</li> </ul>","tags":["home-assistant","automations"]},{"location":"reference/automations/#huskers-postgame-cleanup-packageshuskers_everythingyaml1144","title":"Huskers: Postgame Cleanup (<code>packages/huskers_everything.yaml:1144</code>)","text":"<ul> <li>ID <code>huskers_postgame_cleanup</code></li> <li>Trigger: <code>binary_sensor.huskers_is_postgame_espn</code> transitions <code>on</code> \u2192 <code>off</code>.</li> <li>Guards: Huskers automations + game mode <code>on</code>.</li> <li>Actions: Stops chase scripts in parallel and records cleanup completion.</li> <li>Notes: The supporting status sensor stores a <code>status_source</code> attribute (<code>scoreboard</code> or <code>schedule</code>). If ESPN\u2019s live feed disappears immediately after the game, the fallback schedule entry keeps the sensor in <code>Final</code> so this automation still fires once the postgame window expires.</li> </ul> <p>Maintenance checklist 1. Update this catalog when automations change (preferably by re-running a documentation script or copying from diffs). 2. Verify entity names align with <code>configuration.yaml</code> includes. 3. Add links to new runbooks or dashboards that depend on the automation.</p>","tags":["home-assistant","automations"]},{"location":"reference/documentation-style-guide/","title":"Documentation Style Guide","text":"<p>Follow these rules to keep the documentation consistent, reviewable, and ready for static-site publishing.</p>","tags":["docs","style-guide"]},{"location":"reference/documentation-style-guide/#structure","title":"Structure","text":"<ul> <li>Use the Divio model: tutorials (coming soon), how-to, reference, explanation, and archive.</li> <li>Place files in the matching directory (<code>how-to/</code>, <code>reference/</code>, etc.).</li> <li>Name files with hyphenated lowercase titles (e.g., <code>husker-led-mqtt.md</code>).</li> </ul>","tags":["docs","style-guide"]},{"location":"reference/documentation-style-guide/#front-matter","title":"Front Matter","text":"<p>Every Markdown file (except templates) must start with YAML front matter:</p> <pre><code>---\ntitle: Descriptive Title\nsummary: One-line synopsis in sentence case.\nstatus: active | archived\ncategory: how-to | reference | explanation | tutorial | archive\nupdated: YYYY-MM-DD\nowner: team-or-role\ntags:\n  - keyword\n---\n</code></pre> <p>Update <code>updated</code> whenever you make a meaningful change. Keep <code>owner</code> aligned with the responsible team.</p>","tags":["docs","style-guide"]},{"location":"reference/documentation-style-guide/#writing-conventions","title":"Writing Conventions","text":"<ul> <li>Prefer imperative headings for how-to guides (e.g., \u201cInstall and Configure\u201d).</li> <li>Keep paragraphs short; use bullet lists for steps and checklists.</li> <li>Link to related documents with relative paths (e.g., <code>../reference/automations.md</code>).</li> <li>Use fenced code blocks with language hints (<code>yaml</code>, <code>bash</code>, <code>json</code>).</li> <li>For alerts or callouts, use Markdown blockquotes (<code>&gt;</code>). Avoid raw HTML.</li> </ul>","tags":["docs","style-guide"]},{"location":"reference/documentation-style-guide/#review-checklist","title":"Review Checklist","text":"<ol> <li>Correct folder and filename.</li> <li>Front matter present and accurate.</li> <li>Links resolve and categories make sense.</li> <li>Commands verified or noted if environment-specific.</li> <li>Spelling and grammar pass (run <code>pre-commit run --all-files</code>).</li> </ol>","tags":["docs","style-guide"]},{"location":"reference/documentation-style-guide/#tooling","title":"Tooling","text":"<ul> <li>Run <code>pre-commit run --all-files</code> before committing.</li> <li>When adding navigation, update <code>mkdocs.yml</code> (see repository root).</li> <li>Preview locally with <code>mkdocs serve</code> after installing <code>mkdocs-material</code> (optional).</li> </ul>","tags":["docs","style-guide"]},{"location":"reference/documentation-style-guide/#contributing","title":"Contributing","text":"<ul> <li>For major structural changes, open or update an ADR in <code>docs/adr/</code>.</li> <li>Keep the Documentation Index in sync with new pages.</li> <li>Archive obsolete content instead of deleting when historical context matters.</li> </ul>","tags":["docs","style-guide"]},{"location":"reference/holidays/","title":"Holiday Mode Reference","text":"<p>The holiday package centralises the signal Home Assistant uses to pause daily routines while keeping Huskers game-day flows untouched. Use this page to confirm entity names, data sources, and the manual override helper.</p>","tags":["home-assistant","holidays"]},{"location":"reference/holidays/#calendar-source","title":"Calendar Source","text":"<ul> <li>Integration: ICS Calendar custom integration installed under <code>custom_components/ics_calendar</code>.</li> <li>Entity: <code>calendar.us_federal_holidays</code> (managed via Settings \u2192 Devices &amp; Services \u2192 ICS Calendar).</li> <li>Feed: Google public US holiday calendar (<code>https://calendar.google.com/calendar/ical/en.usa%23holiday%40group.v.calendar.google.com/public/basic.ics</code>).</li> <li>Behaviour: All-day holiday events surface as <code>on</code> during their occurrence; attributes expose <code>message</code>, <code>start_time</code>, and <code>end_time</code> consumed by the template sensors below.</li> </ul>","tags":["home-assistant","holidays"]},{"location":"reference/holidays/#manual-overrides","title":"Manual Overrides","text":"<ul> <li>Helper: <code>input_boolean.holiday_mode_manual</code> (friendly name: Holiday Mode Override).</li> <li>Use: Toggle from any dashboard to simulate a holiday or test automation behaviour. When set to <code>on</code>, it forces Holiday Mode regardless of the calendar state.</li> </ul>","tags":["home-assistant","holidays"]},{"location":"reference/holidays/#derived-entities-packagesholidaysyaml","title":"Derived Entities (<code>packages/holidays.yaml</code>)","text":"<ul> <li><code>binary_sensor.holiday_mode_active</code> \u2013 master flag the automations read. Turns <code>on</code> when either the holiday calendar is active or the manual override is enabled. Attributes include:</li> <li><code>holiday_source</code>: <code>manual</code>, <code>calendar</code>, or <code>none</code>.</li> <li><code>active_holiday</code>: Name of the active holiday or <code>Manual Override</code> when forced.</li> <li><code>active_until</code>: Calendar event end timestamp when available.</li> <li><code>sensor.next_us_holiday</code> \u2013 friendly name and start/end timestamps for the next scheduled holiday event.</li> </ul>","tags":["home-assistant","holidays"]},{"location":"reference/holidays/#automation-contract","title":"Automation Contract","text":"<ul> <li>Lighting, LED, climate, and safety routines in <code>automations.yaml</code> include a guard requiring <code>binary_sensor.holiday_mode_active = off</code> so daily schedules pause on holidays. Huskers game automations intentionally ignore this guard to keep game-day lighting intact.</li> <li>When adding new automations that should observe the holiday schedule, include:   ```yaml   condition:<ul> <li>condition: state   entity_id: binary_sensor.holiday_mode_active   state: 'off'   ```   Add any Husker exclusions as separate conditions.</li> </ul> </li> </ul>","tags":["home-assistant","holidays"]},{"location":"reference/holidays/#operational-checklist","title":"Operational Checklist","text":"<ol> <li>Confirm <code>calendar.us_federal_holidays</code> exists after each Home Assistant upgrade; re-add through the UI if necessary.</li> <li>Surface <code>input_boolean.holiday_mode_manual</code>, <code>binary_sensor.holiday_mode_active</code>, and <code>sensor.next_us_holiday</code> on test dashboards for quick visibility.</li> <li>When a new holiday calendar is needed, add it via the ICS Calendar UI flow; update this page with the new entity IDs.</li> </ol>","tags":["home-assistant","holidays"]},{"location":"reference/infrastructure/","title":"Infrastructure Overview","text":"<p>This page documents the baseline platform for gate-hub. Pair it with the CI runbook and pre-commit workflow for day-to-day operations.</p>","tags":["infrastructure","home-assistant","tooling"]},{"location":"reference/infrastructure/#vs-code-workspace","title":"VS Code Workspace","text":"<p>Connect from the desktop VS Code client via the Remote - SSH extension to the Home Assistant SSH add-on (<code>root@homeassistant.local:22</code>). The workspace opens directly under <code>/config</code>. A minimal <code>.code-workspace</code> snippet:</p> <pre><code>{\n  \"name\": \"haos-workspace\",\n  \"extensions\": [\n    \"ms-python.python\",\n    \"esbenp.prettier-vscode\"\n  ],\n  \"settings\": {\n    \"editor.tabSize\": 2,\n    \"files.trimTrailingWhitespace\": true\n  }\n}\n</code></pre>","tags":["infrastructure","home-assistant","tooling"]},{"location":"reference/infrastructure/#home-assistant-os","title":"Home Assistant OS","text":"<ul> <li>Recorded version: <code>2025.9.4</code> (verify via Settings \u2192 System \u2192 About or <code>ha os info</code>).</li> <li>Supervisor and add-on updates run weekly via the UI; log upgrade notes in the ops journal.</li> <li>Keep snapshots on external storage (NAS or cloud) before major upgrades.</li> </ul>","tags":["infrastructure","home-assistant","tooling"]},{"location":"reference/infrastructure/#git-integration","title":"Git Integration","text":"<p>Clone directly into <code>/config</code> on the HA host:</p> <pre><code>cd /config\ngit clone https://github.com/dsainz3/gate-hub.git .\n</code></pre> <p>Store GitHub credentials in <code>~/.netrc</code> for non-interactive access:</p> <pre><code>machine github.com\n  login dsainz3\n  password &lt;TOKEN&gt;\n</code></pre> <p>Protect the file with <code>chmod 600 ~/.netrc</code>. Rotate tokens quarterly or when offboarding.</p>","tags":["infrastructure","home-assistant","tooling"]},{"location":"reference/infrastructure/#python-tooling","title":"Python Tooling","text":"<p>We manage dependencies with Poetry:</p> <pre><code>poetry install\n</code></pre> <p>Use the virtual environment for checks and scripts:</p> <pre><code>poetry run pre-commit run --all-files\npoetry run python scripts/ha_check_portable.py\n</code></pre> <p>See the pre-commit how-to for hook details.</p>","tags":["infrastructure","home-assistant","tooling"]},{"location":"reference/infrastructure/#network-monitoring-integrations","title":"Network Monitoring Integrations","text":"<ul> <li>TP-Link Router custom component is installed via HACS to expose Deco node health, client rosters, and router controls.</li> <li>TP-Link Deco custom integration is configured alongside it for expanded mesh telemetry and device tracking.</li> <li><code>packages/network_monitor.yaml</code> aggregates the speedtest entities plus Deco throughput into summary sensors and rolling statistics windows (1h/24h/7d/30d). Those statistics sensors power the Network Monitor dashboard comparisons and are whitelisted in <code>recorder_include_entities</code> so long-term trend charts stay populated.</li> <li>The <code>dashboards/network-dashboard.yaml</code> Lovelace view surfaces the Deco health, throughput trends, and ping comparisons (current vs averages) alongside auto-entities blocks for live Deco nodes and any <code>sensor.ping_*</code> entities.</li> </ul>","tags":["infrastructure","home-assistant","tooling"]},{"location":"reference/infrastructure/#agenda-tasks","title":"Agenda &amp; Tasks","text":"<ul> <li><code>packages/agenda_planner.yaml</code> centralizes helpers and scripts for adding events (<code>calendar.create_event</code>) and tasks (<code>todo.add_item</code>) from the UI. The Kiosk snapshot view now includes a dedicated agenda column using this package.</li> <li><code>docs/reference/agenda-planner.md</code> documents setup, dashboards, and entity usage.</li> </ul>","tags":["infrastructure","home-assistant","tooling"]},{"location":"reference/infrastructure/#media-theater","title":"Media &amp; Theater","text":"<ul> <li><code>packages/theater_media.yaml</code> encapsulates the basement Fire TV + Plex helper scripts, template sensors, and entity group used by the Support \u00b7 Test Resources dashboard.</li> <li>The Plex \u00b7 Theater view (<code>dashboards/_support/test_resources.dashboard.yaml</code>) surfaces the controls alongside a Lovelace media browser card. Ensure <code>media_source:</code> stays declared in <code>configuration.yaml</code> so the browser renders.</li> <li>Reference details live in Basement Theater Media Package.</li> </ul>","tags":["infrastructure","home-assistant","tooling"]},{"location":"reference/infrastructure/#repository-layout","title":"Repository Layout","text":"<pre><code>.\n\u251c\u2500 configuration.yaml          # entry point (includes packages and domain files)\n\u251c\u2500 automations.yaml            # base automations; see reference/automations.md\n\u251c\u2500 packages/                   # feature packages (Huskers, weather dashboards, etc.)\n\u251c\u2500 custom_components/          # custom integrations (wundergroundpws, etc.)\n\u251c\u2500 dashboards/                 # Lovelace dashboards referenced in configuration.yaml\n\u251c\u2500 scripts/ &amp; scripts.yaml     # reusable automation helpers\n\u251c\u2500 docs/                       # you are here\n\u2514\u2500 www/                        # static assets (dashboards, themes, cards)\n   \u2514\u2500 community/teamtracker-card/ha-teamtracker-card.js   # vendored TeamTracker Lovelace card\n</code></pre> <p>Use this structure when creating new features so includes stay predictable for CI and for the Automation Catalog.</p>","tags":["infrastructure","home-assistant","tooling"]},{"location":"reference/infrastructure/#operational-checklist","title":"Operational Checklist","text":"<ul> <li>Monitor disk usage and database growth monthly (log findings in the optimization plan).</li> <li>Keep secrets out of version control (<code>secrets.yaml</code> stays on the HA host).</li> <li>Capture breaking changes or migrations in a new ADR when decisions impact architecture.</li> </ul>","tags":["infrastructure","home-assistant","tooling"]},{"location":"reference/theater-media/","title":"Basement Theater Media Package","text":"<p>The <code>packages/theater_media.yaml</code> bundle standardises how the basement theater Fire TV and Plex server are controlled and monitored. Use this page to confirm entity names, dependencies, and dashboard wiring when maintaining the Plex integration or adding new media clients.</p>","tags":["home-assistant","plex","fire-tv"]},{"location":"reference/theater-media/#dependencies","title":"Dependencies","text":"<ul> <li>Integrations:</li> <li>Android TV Remote configured for the basement Fire TV (<code>media_player.basement_fire_tv</code>, <code>remote.basement_fire_tv</code>).</li> <li>Plex integration exposing the server sensors (<code>sensor.plex</code>, <code>button.plex_scan_clients</code>, <code>update.plex_update</code>) and the Android TV client entity (<code>media_player.plex_plex_for_android_tv_aftgazl</code>).</li> <li>Core configuration: <code>media_source:</code> must be present in <code>configuration.yaml</code> so the Lovelace media browser card can enumerate the Plex library.</li> <li>Devices: Ensure ADB debugging remains enabled on the Fire TV so <code>androidtv.adb_command</code> calls succeed.</li> </ul>","tags":["home-assistant","plex","fire-tv"]},{"location":"reference/theater-media/#helpers-and-scripts","title":"Helpers and Scripts","text":"Entity Type Purpose <code>script.basement_fire_tv_launch_plex</code> script Powers on the Fire TV if needed, returns to the home screen, and launches the Plex client via an ADB intent. <code>script.basement_fire_tv_play_pause</code> script Sends a play/pause toggle to the Fire TV media player. <code>script.basement_fire_tv_home</code> script Issues a <code>HOME</code> remote command for quick navigation. <code>script.basement_fire_tv_power_off</code> script Turns the Fire TV off through <code>media_player.turn_off</code>. <code>script.plex_refresh_clients</code> script Presses <code>button.plex_scan_clients</code> to refresh the Plex device roster. <code>sensor.basement_theater_media_status</code> template sensor Normalised status for the Fire TV including app name, media metadata, and last-changed timestamp. <code>sensor.plex_server_sessions</code> template sensor Exposes the active Plex session count with friendly text, players list, and last update timestamp. <code>binary_sensor.basement_theater_active</code> template binary sensor Turns <code>on</code> when either the Fire TV is active (<code>on</code>/<code>playing</code>/<code>paused</code>) or Plex reports one or more active sessions. <code>group.theater_media_entities</code> group Roll-up of the entities above for debugging and auto-entities cards. <p>Friendly names and icons for the player, remote, and scripts are defined in the <code>homeassistant.customize</code> block at the top of the package.</p>","tags":["home-assistant","plex","fire-tv"]},{"location":"reference/theater-media/#dashboard-wiring","title":"Dashboard Wiring","text":"<p>The Support \u00b7 Test Resources dashboard adds a dedicated Plex \u00b7 Theater view (<code>dashboards/_support/test_resources.dashboard.yaml</code>) to exercise the package:</p> <ol> <li>Status row \u2013 Mushroom media player card (Fire TV) plus a template card that surfaces the active/idle state, running app, and Plex session summary.</li> <li>Controls grid \u2013 Buttons mapped to the scripts above for launching Plex, play/pause, returning home, powering off, and forcing a Plex client rescan.</li> <li>Telemetry entities \u2013 Current state, Plex server session count, raw Plex sensor, and the scan button for quick access.</li> <li>Media browser \u2013 Lovelace media browser card targeting <code>media_player.plex_plex_for_android_tv_aftgazl</code> so testers can launch titles straight from the dashboard.</li> </ol> <p>Keep the Fire TV online (Plex app open at least once) before loading the view so the client entity appears and the media browser renders without configuration errors.</p>","tags":["home-assistant","plex","fire-tv"]},{"location":"reference/theater-media/#operational-checklist","title":"Operational Checklist","text":"<ol> <li>After updating the package, reload Home Assistant packages or restart Core so template sensors and scripts are registered.</li> <li>Confirm <code>media_source</code> stays enabled in <code>configuration.yaml</code> after merges; the HA config check will fail if it is removed.</li> <li>Validate the Support \u00b7 Test Resources dashboard reloads without missing-entity warnings. Use the <code>group.theater_media_entities</code> group in Developer Tools \u2192 States when troubleshooting.</li> <li>When adding new Fire TV/Plex clients, clone this package, adjust entity IDs, and document the new view in the same style.</li> </ol>","tags":["home-assistant","plex","fire-tv"]}]}
