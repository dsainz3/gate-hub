# =========================
# HUSKERS SCRIPTS (drop-in)
# =========================
# Expectation:
# configuration.yaml -> script: !include scripts.yaml

# --- Theater Show (Start) ---
huskers_theater_show_start:
  alias: 'Huskers: Theater Show (Start)'
  mode: restart
  variables:
    snapshot_id: huskers_theater_pre_show
    watch_scripts: []
  sequence:
    - variables:
        running_scripts: >-
          {{ watch_scripts | select('truthy') | select('in', states | map(attribute='entity_id') | list)
             | select('equalto','on', attribute='state') | list }}
    - service: input_text.set_value
      target:
        entity_id: input_text.huskers_theater_prev_scripts
      data:
        value: >-
          {{ running_scripts | join(',') }}
    - service: scene.create
      data:
        scene_id: '{{ snapshot_id }}'
        snapshot_entities:
          - light.light_theater_left
          - light.light_theater_right
    - repeat:
        while: '{{ true }}'
        sequence:
          - service: light.turn_on
            target: { entity_id: light.light_theater_left }
            data: { brightness: 255, hs_color: [355, 90], transition: 3 }
          - service: light.turn_on
            target: { entity_id: light.light_theater_right }
            data: { brightness: 255, hs_color: [48, 12], transition: 3 }
          - delay: '00:00:03'
          - service: light.turn_on
            target: { entity_id: light.light_theater_left }
            data: { brightness: 255, hs_color: [48, 12], transition: 3 }
          - service: light.turn_on
            target: { entity_id: light.light_theater_right }
            data: { brightness: 255, hs_color: [355, 90], transition: 3 }
          - delay: '00:00:03'
          - service: light.turn_on
            target: { entity_id: light.light_theater_left }
            data: { brightness: 255, hs_color: [355, 90], transition: 3 }
          - service: light.turn_on
            target: { entity_id: light.light_theater_right }
            data: { brightness: 255, hs_color: [48, 12], transition: 3 }
          - delay: '00:00:03'

# --- Theater Show (Stop) ---
huskers_theater_show_stop:
  alias: 'Huskers: Theater Show (Stop)'
  mode: single
  variables:
    snapshot_id: huskers_theater_pre_show
  sequence:
    - service: script.turn_off
      target:
        entity_id: script.huskers_theater_show_start
    - choose:
        - conditions: "{{ states('scene.' ~ snapshot_id) != 'unknown' }}"
          sequence:
            - service: scene.turn_on
              target:
                entity_id: 'scene.{{ snapshot_id }}'
              data:
                transition: 1
            - delay: '00:00:01'
            - service: scene.delete
              data:
                entity_id: 'scene.{{ snapshot_id }}'
      default: []
    - variables:
        prev: "{{ states('input_text.huskers_theater_prev_scripts') | trim }}"
        prev_list: >-
          {% set parts = prev.split(',') if prev else [] %}
          {{ parts | select('trim') | select('length') | list }}
    - choose:
        - conditions: '{{ prev_list | length > 0 }}'
          sequence:
            - repeat:
                for_each: '{{ prev_list }}'
                sequence:
                  - service: script.turn_on
                    target:
                      entity_id: '{{ repeat.item }}'
    - service: input_text.set_value
      target:
        entity_id: input_text.huskers_theater_prev_scripts
      data:
        value: ''

# --- Exterior Show (Start) ---
huskers_exterior_show_start:
  alias: 'Huskers: Exterior Show (Start)'
  mode: single
  sequence:
    - action: scene.turn_on
      target:
        entity_id: scene.scene_huskers_alternating_exterior
      data:
        transition: 2

# --- Exterior Show (Stop) ---
huskers_exterior_show_stop:
  alias: 'Huskers: Exterior Show (Stop)'
  mode: single
  sequence:
    - service: light.turn_off
      target:
        entity_id:
          - light.light_front_left
          - light.light_front_right
          - light.garage_l
          - light.garage_c
          - light.garage_r

# --- Bursts ---
huskers_touchdown_burst:
  alias: 'Huskers: Theater Touchdown Burst'
  mode: restart
  sequence:
    - service: light.turn_on
      target:
        entity_id:
          - light.light_theater_left
          - light.light_theater_right
      data: { flash: short }

huskers_exterior_touchdown_burst:
  alias: 'Huskers: Exterior Touchdown Burst'
  mode: restart
  sequence:
    - service: light.turn_on
      target:
        entity_id:
          - light.light_front_left
          - light.light_front_right
          - light.garage_l
          - light.garage_c
          - light.garage_r
      data: { flash: short }

# --- Test helper ---
huskers_test_score_update:
  alias: 'Huskers: ðŸ§ª Simulate Score + Burst'
  mode: single
  sequence:
    - service: input_text.set_value
      target:
        entity_id: input_text.huskers_last_score
      data: { value: 'NU TD (test)' }
    - service: script.turn_on
      target:
        entity_id:
          - script.huskers_touchdown_burst
          - script.huskers_exterior_touchdown_burst

# --- Game-day LED (snapshot + effect + restore) ---
huskers_led_gameday_start:
  alias: 'Huskers: Game-Day LED (Start)'
  mode: single
  sequence:
    - service: scene.create
      data:
        scene_id: huskers_outdoor_pre_gameday
        snapshot_entities:
          - light.permanent_outdoor_lights
    - service: light.turn_on
      target: { entity_id: light.permanent_outdoor_lights }
      data: { effect: LED_Huskers }

huskers_led_stop:
  alias: 'Huskers: Stop LED Effect (Restore Previous)'
  mode: single
  variables: { snapshot_id: huskers_outdoor_pre_gameday }
  sequence:
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ states('scene.' ~ snapshot_id) != 'unknown' }}"
          sequence:
            - service: scene.turn_on
              target: { entity_id: 'scene.{{ snapshot_id }}' }
              data: { transition: 1 }
            - delay: '00:00:01'
            - service: scene.delete
              data: { entity_id: 'scene.{{ snapshot_id }}' }
      default: []
