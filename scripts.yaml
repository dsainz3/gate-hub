# scripts.yaml â€” rebuilt Huskers show system

# ==============
# SNAPSHOT / RESTORE
# ==============

huskers_snapshot_before:
  alias: 'Huskers: Snapshot Current Lighting'
  sequence:
    - service: scene.create
      data:
        scene_id: huskers_before
        snapshot_entities:
          - light.light_theater_left
          - light.light_theater_right
          - light.light_front_left
          - light.light_front_right
          - light.garage_left
          - light.garage_center
          - light.garage_right
          - light.permanent_outdoor_lights
    - service: logbook.log
      data:
        name: Huskers Snapshot
        message: 'Saved current lighting state before gameday show'

huskers_restore_after:
  alias: 'Huskers: Restore Pre-Game Lighting'
  sequence:
    - service: scene.turn_on
      target:
        entity_id: scene.huskers_before
    - service: logbook.log
      data:
        name: Huskers Restore
        message: 'Restored lighting state after game'

# ==============
# THEATER SHOW
# ==============

huskers_theater_show_start:
  alias: 'Huskers: Theater Show Start'
  sequence:
    - service: script.turn_on
      target:
        entity_id: script.huskers_snapshot_before
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.huskers_theater_show_running
    - service: script.turn_on
      target:
        entity_id: script.huskers_theater_show_loop

huskers_theater_show_loop:
  alias: 'Huskers: Theater Alternating Loop'
  mode: restart
  sequence:
    - repeat:
        while:
          - condition: state
            entity_id: input_boolean.huskers_theater_show_running
            state: 'on'
        sequence:
          # Left scarlet, Right cream
          - service: light.turn_on
            target:
              entity_id: light.light_theater_left
            data:
              rgb_color: [204, 0, 0]
              brightness_pct: 50
              transition: 5
          - service: light.turn_on
            target:
              entity_id: light.light_theater_right
            data:
              rgb_color: [255, 253, 208]
              brightness_pct: 50
              transition: 5
          - delay: '00:00:30'

          # Left cream, Right scarlet
          - service: light.turn_on
            target:
              entity_id: light.light_theater_left
            data:
              rgb_color: [255, 253, 208]
              brightness_pct: 50
              transition: 5
          - service: light.turn_on
            target:
              entity_id: light.light_theater_right
            data:
              rgb_color: [204, 0, 0]
              brightness_pct: 50
              transition: 5
          - delay: '00:00:30'

huskers_theater_show_stop:
  alias: 'Huskers: Theater Show Stop'
  sequence:
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.huskers_theater_show_running
    - service: script.turn_on
      target:
        entity_id: script.huskers_restore_after

# ==============
# EXTERIOR SHOW
# ==============

huskers_exterior_show_start:
  alias: 'Huskers: Exterior Show Start'
  sequence:
    - service: script.turn_on
      target:
        entity_id: script.huskers_snapshot_before
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.huskers_exterior_show_running
    - service: script.turn_on
      target:
        entity_id: script.huskers_exterior_show_loop

huskers_exterior_show_loop:
  alias: 'Huskers: Exterior Alternating Loop'
  mode: restart
  sequence:
    - repeat:
        while:
          - condition: state
            entity_id: input_boolean.huskers_exterior_show_running
            state: 'on'
        sequence:
          # Left side scarlet, Right side cream
          - service: light.turn_on
            target:
              entity_id:
                - light.light_front_left
                - light.garage_left
                - light.garage_right
            data:
              rgb_color: [204, 0, 0]
              brightness_pct: 80
              transition: 5
          - service: light.turn_on
            target:
              entity_id:
                - light.light_front_right
                - light.garage_center
            data:
              rgb_color: [255, 253, 208]
              brightness_pct: 80
              transition: 5
          - delay: '00:00:30'

          # Swap sides
          - service: light.turn_on
            target:
              entity_id:
                - light.light_front_left
                - light.garage_left
                - light.garage_right
            data:
              rgb_color: [255, 253, 208]
              brightness_pct: 80
              transition: 5
          - service: light.turn_on
            target:
              entity_id:
                - light.light_front_right
                - light.garage_center
            data:
              rgb_color: [204, 0, 0]
              brightness_pct: 80
              transition: 5
          - delay: '00:00:30'

huskers_exterior_show_stop:
  alias: 'Huskers: Exterior Show Stop'
  sequence:
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.huskers_exterior_show_running
    - service: script.turn_on
      target:
        entity_id: script.huskers_restore_after

# ==============
# THEATER ALTERNATING SCRIPTS (10s cycles)
# ==============

huskers_theater_alt_start:
  alias: 'Huskers: Theater Alternating (10s cycles)'
  mode: restart
  sequence:
    - service: script.turn_on
      target:
        entity_id: script.huskers_snapshot_before
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.huskers_theater_show_running
    - service: script.turn_on
      target:
        entity_id: script.huskers_theater_alt_loop

huskers_theater_alt_loop:
  alias: 'Huskers: Theater Alternating Loop'
  mode: restart
  sequence:
    - repeat:
        while:
          - condition: state
            entity_id: input_boolean.huskers_theater_show_running
            state: 'on'
        sequence:
          # Normal pattern: Left scarlet, Right cream
          - service: scene.turn_on
            target:
              entity_id: scene.huskers_alternating_theater
            data:
              transition: 2
          - delay: '00:00:10'

          # Inverted pattern: Left cream, Right scarlet
          - service: scene.turn_on
            target:
              entity_id: scene.huskers_alternating_theater_inverted
            data:
              transition: 2
          - delay: '00:00:10'

huskers_theater_alt_stop:
  alias: 'Huskers: Theater Alternating Stop'
  sequence:
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.huskers_theater_show_running
    - service: script.turn_on
      target:
        entity_id: script.huskers_restore_after

# ==============
# TOUCHDOWN BURST SCRIPTS (10 seconds)
# ==============

huskers_td_burst_bpm_theater:
  alias: 'Huskers: TD Burst Theater (BPM Synced)'
  mode: restart
  variables:
    bpm: "{{ states('input_number.huskers_hail_varsity_bpm') | int(120) }}"
    beat_duration: '{{ (60 / bpm) | round(2) }}'
    half_beat: '{{ (beat_duration / 2) | round(2) }}'
  sequence:
    # Capture current state first
    - service: scene.create
      data:
        scene_id: td_burst_theater_restore
        snapshot_entities:
          - light.light_theater_left
          - light.light_theater_right

    # Log the celebration
    - service: logbook.log
      data:
        name: Huskers TD Burst
        message: 'Theater celebration started - {{ bpm }} BPM for 10 seconds'

    # Run for 10 seconds (calculate number of beats)
    - repeat:
        count: '{{ (10 / beat_duration) | int }}'
        sequence:
          # Beat 1: Scarlet
          - service: light.turn_on
            target:
              entity_id: light.light_theater_left
            data:
              rgb_color: [204, 0, 0]
              brightness: 255
              transition: '{{ half_beat }}'
          - service: light.turn_on
            target:
              entity_id: light.light_theater_right
            data:
              rgb_color: [204, 0, 0]
              brightness: 255
              transition: '{{ half_beat }}'
          - delay: '{{ half_beat }}'

          # Beat 2: Cream
          - service: light.turn_on
            target:
              entity_id: light.light_theater_left
            data:
              rgb_color: [255, 253, 208]
              brightness: 255
              transition: '{{ half_beat }}'
          - service: light.turn_on
            target:
              entity_id: light.light_theater_right
            data:
              rgb_color: [255, 253, 208]
              brightness: 255
              transition: '{{ half_beat }}'
          - delay: '{{ half_beat }}'

    # Restore previous state
    - service: scene.turn_on
      target:
        entity_id: scene.td_burst_theater_restore

huskers_td_burst_bpm_exterior:
  alias: 'Huskers: TD Burst Exterior (BPM Synced)'
  mode: restart
  variables:
    bpm: "{{ states('input_number.huskers_hail_varsity_bpm') | int(120) }}"
    beat_duration: '{{ (60 / bpm) | round(2) }}'
    half_beat: '{{ (beat_duration / 2) | round(2) }}'
  sequence:
    # Capture current state first
    - service: scene.create
      data:
        scene_id: td_burst_exterior_restore
        snapshot_entities:
          - light.light_front_left
          - light.light_front_right
          - light.garage_left
          - light.garage_center
          - light.garage_right

    # Log the celebration
    - service: logbook.log
      data:
        name: Huskers TD Burst
        message: 'Exterior celebration started - {{ bpm }} BPM for 10 seconds'

    # Run for 10 seconds (calculate number of beats)
    - repeat:
        count: '{{ (10 / beat_duration) | int }}'
        sequence:
          # Beat 1: Alternating pattern (left side scarlet, right side cream)
          - service: light.turn_on
            target:
              entity_id:
                - light.light_front_left
                - light.garage_left
                - light.garage_right
            data:
              rgb_color: [204, 0, 0]
              brightness: 255
              transition: '{{ half_beat }}'
          - service: light.turn_on
            target:
              entity_id:
                - light.light_front_right
                - light.garage_center
            data:
              rgb_color: [255, 253, 208]
              brightness: 255
              transition: '{{ half_beat }}'
          - delay: '{{ half_beat }}'

          # Beat 2: Swap colors
          - service: light.turn_on
            target:
              entity_id:
                - light.light_front_left
                - light.garage_left
                - light.garage_right
            data:
              rgb_color: [255, 253, 208]
              brightness: 255
              transition: '{{ half_beat }}'
          - service: light.turn_on
            target:
              entity_id:
                - light.light_front_right
                - light.garage_center
            data:
              rgb_color: [204, 0, 0]
              brightness: 255
              transition: '{{ half_beat }}'
          - delay: '{{ half_beat }}'

    # Check if exterior show was running before burst
    - if:
        - condition: state
          entity_id: input_boolean.huskers_exterior_show_running
          state: 'on'
      then:
        # Resume exterior alternating show
        - service: script.turn_on
          target:
            entity_id: script.huskers_exterior_show_loop
      else:
        # Restore previous state if no show was running
        - service: scene.turn_on
          target:
            entity_id: scene.td_burst_exterior_restore

huskers_led_td_burst:
  alias: 'Huskers: LED Strip TD Burst'
  mode: restart
  sequence:
    # Capture current LED state
    - service: scene.create
      data:
        scene_id: td_burst_led_restore
        snapshot_entities:
          - light.permanent_outdoor_lights

    # Set LED to Huskers effect or solid scarlet
    - service: light.turn_on
      target:
        entity_id: light.permanent_outdoor_lights
      data:
        brightness: 255
        rgb_color: [204, 0, 0]
        effect: LED_Huskers # Try Huskers effect first
      continue_on_error: true

    # If effect doesn't exist, use rapid color changes
    - delay: 1
    - repeat:
        count: 5 # 10 seconds of 2-second cycles
        sequence:
          - service: light.turn_on
            target:
              entity_id: light.permanent_outdoor_lights
            data:
              rgb_color: [204, 0, 0]
              brightness: 255
          - delay: 1
          - service: light.turn_on
            target:
              entity_id: light.permanent_outdoor_lights
            data:
              rgb_color: [255, 253, 208]
              brightness: 255
          - delay: 1

    # Restore previous LED state
    - service: scene.turn_on
      target:
        entity_id: scene.td_burst_led_restore

# ==============
# GLOBAL CLEANUP
# ==============

huskers_cleanup_all:
  alias: 'Huskers: Cleanup All Shows'
  sequence:
    - service: input_boolean.turn_off
      target:
        entity_id:
          - input_boolean.huskers_theater_show_running
          - input_boolean.huskers_exterior_show_running
    - service: script.turn_on
      target:
        entity_id: script.huskers_restore_after

# ==============
# DEBUG SCRIPTS
# ==============

huskers_debug_test:
  alias: 'Debug: Minimal Theater Test'
  sequence:
    - service: logbook.log
      data:
        name: Debug Test
        message: 'Script started successfully'
    - service: light.turn_on
      target:
        entity_id: light.light_theater_left
      data:
        brightness: 100
        rgb_color: [255, 0, 0]
    - service: logbook.log
      data:
        name: Debug Test
        message: 'Light command sent'
