# =========================
# HUSKERS SCRIPTS (drop-in)
# =========================
# Expectation:
# configuration.yaml -> script: !include scripts.yaml

# --- Theater Show (Start) ---
huskers_theater_show_start:
  alias: 'Huskers: Theater Show (Start)'
  mode: restart
  variables:
    snapshot_id: huskers_theater_pre_show
    watch_scripts: []
  sequence:
    - variables:
        running_scripts: >-
          {{ watch_scripts | select('truthy')
             | select('in', states | map(attribute='entity_id') | list)
             | select('equalto','on', attribute='state') | list }}
    - service: input_text.set_value
      target:
        entity_id: input_text.huskers_theater_prev_scripts
      data:
        value: >-
          {{ running_scripts | join(',') }}

    # Snapshot current theater lights
    - service: scene.create
      data:
        scene_id: '{{ snapshot_id }}'
        snapshot_entities:
          - light.light_theater_left
          - light.light_theater_right

    # Instant start: Left=Scarlet, Right=Cream (no transition)
    - parallel:
        - service: light.turn_on
          target:
            entity_id: light.light_theater_left
          data:
            brightness: 255
            hs_color: [355, 90]
        - service: light.turn_on
          target:
            entity_id: light.light_theater_right
          data:
            brightness: 255
            hs_color: [48, 12]

    # Rotate every 3 seconds until stopped
    - repeat:
        while: '{{ true }}'
        sequence:
          - delay: '00:00:03'
          - parallel:
              - service: light.turn_on
                target:
                  entity_id: light.light_theater_left
                data:
                  brightness: 255
                  hs_color: [48, 12]
              - service: light.turn_on
                target:
                  entity_id: light.light_theater_right
                data:
                  brightness: 255
                  hs_color: [355, 90]
          - delay: '00:00:03'
          - parallel:
              - service: light.turn_on
                target:
                  entity_id: light.light_theater_left
                data:
                  brightness: 255
                  hs_color: [355, 90]
              - service: light.turn_on
                target:
                  entity_id: light.light_theater_right
                data:
                  brightness: 255
                  hs_color: [48, 12]

# --- Theater Show (Stop) ---
huskers_theater_show_stop:
  alias: 'Huskers: Theater Show (Stop)'
  mode: single
  variables:
    snapshot_id: huskers_theater_pre_show
  sequence:
    - service: script.turn_off
      target:
        entity_id: script.huskers_theater_show_start
    - choose:
        - conditions: "{{ states('scene.' ~ snapshot_id) != 'unknown' }}"
          sequence:
            - service: scene.turn_on
              target:
                entity_id: 'scene.{{ snapshot_id }}'
              data:
                transition: 1
            - delay: '00:00:01'
            - service: scene.delete
              data:
                entity_id: 'scene.{{ snapshot_id }}'
      default: []
    - variables:
        prev: "{{ states('input_text.huskers_theater_prev_scripts') | trim }}"
        prev_list: >-
          {% set parts = prev.split(',') if prev else [] %}
          {{ parts | select('trim') | select('length') | list }}
    - choose:
        - conditions: '{{ prev_list | length > 0 }}'
          sequence:
            - repeat:
                for_each: '{{ prev_list }}'
                sequence:
                  - service: script.turn_on
                    target:
                      entity_id: '{{ repeat.item }}'
    - service: input_text.set_value
      target:
        entity_id: input_text.huskers_theater_prev_scripts
      data:
        value: ''

# --- Exterior Show (Start) ---
huskers_exterior_show_start:
  alias: 'Huskers: Exterior Show (Start)'
  mode: restart
  variables:
    snap_id: huskers_exterior_pre_show
  sequence:
    # 1) Snapshot current state
    - service: scene.create
      data:
        scene_id: '{{ snap_id }}'
        snapshot_entities:
          - light.light_front_left
          - light.light_front_right
          - light.garage_l
          - light.garage_c
          - light.garage_r

    # 2) Instant start colors (no transition)
    #    FL, GL, GR = scarlet ; FR, GC = cream
    - parallel:
        - service: light.turn_on
          target: { entity_id: light.light_front_left }
          data: { brightness: 255, hs_color: [355, 90] }
        - service: light.turn_on
          target: { entity_id: light.light_front_right }
          data: { brightness: 255, hs_color: [48, 12] }
        - service: light.turn_on
          target: { entity_id: light.garage_l }
          data: { brightness: 255, hs_color: [355, 90] }
        - service: light.turn_on
          target: { entity_id: light.garage_c }
          data: { brightness: 255, hs_color: [48, 12] }
        - service: light.turn_on
          target: { entity_id: light.garage_r }
          data: { brightness: 255, hs_color: [355, 90] }

    # 3) Rotate every 3s until stopped
    - repeat:
        while: '{{ true }}'
        sequence:
          - delay: '00:00:03'
          # invert: FL/GL/GR = cream ; FR/GC = scarlet
          - parallel:
              - service: light.turn_on
                target: { entity_id: light.light_front_left }
                data: { brightness: 255, hs_color: [48, 12] }
              - service: light.turn_on
                target: { entity_id: light.light_front_right }
                data: { brightness: 255, hs_color: [355, 90] }
              - service: light.turn_on
                target: { entity_id: light.garage_l }
                data: { brightness: 255, hs_color: [48, 12] }
              - service: light.turn_on
                target: { entity_id: light.garage_c }
                data: { brightness: 255, hs_color: [355, 90] }
              - service: light.turn_on
                target: { entity_id: light.garage_r }
                data: { brightness: 255, hs_color: [48, 12] }
          - delay: '00:00:03'
          # back to original map
          - parallel:
              - service: light.turn_on
                target: { entity_id: light.light_front_left }
                data: { brightness: 255, hs_color: [355, 90] }
              - service: light.turn_on
                target: { entity_id: light.light_front_right }
                data: { brightness: 255, hs_color: [48, 12] }
              - service: light.turn_on
                target: { entity_id: light.garage_l }
                data: { brightness: 255, hs_color: [355, 90] }
              - service: light.turn_on
                target: { entity_id: light.garage_c }
                data: { brightness: 255, hs_color: [48, 12] }
              - service: light.turn_on
                target: { entity_id: light.garage_r }
                data: { brightness: 255, hs_color: [355, 90] }

huskers_exterior_show_stop:
  alias: 'Huskers: Exterior Show (Stop)'
  mode: single
  variables:
    snap_id: huskers_exterior_pre_show
  sequence:
    # 1) Turn off loop toggle so any automation quits
    - choose:
        - conditions:
            - condition: state
              entity_id: input_boolean.huskers_exterior_color_show
              state: 'on'
          sequence:
            - service: input_boolean.turn_off
              target:
                entity_id: input_boolean.huskers_exterior_color_show

    # 2) Kill the running start script (cancels the repeat loop)
    - service: script.turn_off
      target:
        entity_id: script.huskers_exterior_show_start
    - delay: '00:00:01' # allow a tick for the loop to cancel

    # 3) Restore snapshot if we have it; else, hard-off the five lights
    - choose:
        - conditions:
            - condition: template
              value_template: >-
                {{ states('scene.' ~ snap_id) != 'unknown' }}
          sequence:
            - service: scene.turn_on
              target:
                entity_id: 'scene.{{ snap_id }}'
              data:
                transition: 0
            - delay: '00:00:01'
            - service: scene.delete
              data:
                entity_id: 'scene.{{ snap_id }}'
      default:
        - service: light.turn_off
          target:
            entity_id:
              - light.light_front_left
              - light.light_front_right
              - light.garage_l
              - light.garage_c
              - light.garage_r

# --- Bursts ---
huskers_touchdown_burst:
  alias: 'Huskers: Theater Touchdown Burst'
  mode: restart
  sequence:
    - service: light.turn_on
      target:
        entity_id:
          - light.light_theater_left
          - light.light_theater_right
      data: { flash: short }

huskers_exterior_touchdown_burst:
  alias: 'Huskers: Exterior Touchdown Burst'
  mode: restart
  sequence:
    - service: light.turn_on
      target:
        entity_id:
          - light.light_front_left
          - light.light_front_right
          - light.garage_l
          - light.garage_c
          - light.garage_r
      data: { flash: short }

# --- Test helper ---
huskers_test_score_update:
  alias: 'Huskers: ðŸ§ª Simulate Score + Burst'
  mode: single
  sequence:
    - service: input_text.set_value
      target:
        entity_id: input_text.huskers_last_score
      data: { value: 'NU TD (test)' }
    - service: script.turn_on
      target:
        entity_id:
          - script.huskers_touchdown_burst
          - script.huskers_exterior_touchdown_burst

# --- Game-day LED (snapshot + effect + restore) ---
huskers_led_gameday_start:
  alias: 'Huskers: Game-Day LED (Start)'
  mode: single
  sequence:
    - service: scene.create
      data:
        scene_id: huskers_outdoor_pre_gameday
        snapshot_entities:
          - light.permanent_outdoor_lights
    - service: light.turn_on
      target: { entity_id: light.permanent_outdoor_lights }
      data: { effect: LED_Huskers }

huskers_led_stop:
  alias: 'Huskers: Stop LED Effect (Restore Previous)'
  mode: single
  variables: { snapshot_id: huskers_outdoor_pre_gameday }
  sequence:
    - choose:
        - conditions:
            - condition: template
              value_template: >-
                {{ states('scene.' ~ snapshot_id) != 'unknown' }}
          sequence:
            - service: scene.turn_on
              target: { entity_id: 'scene.{{ snapshot_id }}' }
              data: { transition: 1 }
            - delay: '00:00:01'
            - service: scene.delete
              data: { entity_id: 'scene.{{ snapshot_id }}' }
      default: []

# --- BPM Bursts (Scarlet/Cream only) ---
huskers_td_burst_bpm_theater:
  alias: 'Huskers: TD Burst BPM (Theater)'
  mode: restart
  variables:
    bpm_val: >-
      {{ states('input_number.huskers_hail_varsity_bpm') | int(120) }}
    beat_s: '{{ (60 / bpm_val) | float }}'
    pulse_ratio: 0.2
    pulse_s: '{{ (beat_s * pulse_ratio) | float }}'
    rest_s: '{{ (beat_s * (1 - pulse_ratio)) | float }}'
    beats: 8
    snap_id: huskers_theater_burst_pre
  sequence:
    - service: scene.create
      data:
        scene_id: '{{ snap_id }}'
        snapshot_entities:
          - light.light_theater_left
          - light.light_theater_right
    - repeat:
        count: '{{ beats }}'
        sequence:
          # Odd beat â†’ L=Scarlet, R=Cream; even â†’ inverted
          - choose:
              - conditions: '{{ (repeat.index | int(1)) % 2 == 1 }}'
                sequence:
                  - parallel:
                      - service: light.turn_on
                        target:
                          entity_id: light.light_theater_left
                        data:
                          brightness: 255
                          hs_color: [355, 90]
                      - service: light.turn_on
                        target:
                          entity_id: light.light_theater_right
                        data:
                          brightness: 255
                          hs_color: [48, 12]
            default:
              - parallel:
                  - service: light.turn_on
                    target:
                      entity_id: light.light_theater_left
                    data:
                      brightness: 255
                      hs_color: [48, 12]
                  - service: light.turn_on
                    target:
                      entity_id: light.light_theater_right
                    data:
                      brightness: 255
                      hs_color: [355, 90]
          - delay: '{{ pulse_s }}'
          - service: scene.turn_on
            target:
              entity_id: 'scene.{{ snap_id }}'
          - delay: '{{ rest_s }}'
    - choose:
        - conditions: "{{ states('scene.' ~ snap_id) != 'unknown' }}"
          sequence:
            - service: scene.delete
              data:
                entity_id: 'scene.{{ snap_id }}'

huskers_td_burst_bpm_exterior:
  alias: 'Huskers: TD Burst BPM (Exterior)'
  mode: restart
  variables:
    bpm_val: >-
      {{ states('input_number.huskers_hail_varsity_bpm') | int(120) }}
    beat_s: '{{ (60 / bpm_val) | float }}'
    pulse_ratio: 0.2
    pulse_s: '{{ (beat_s * pulse_ratio) | float }}'
    rest_s: '{{ (beat_s * (1 - pulse_ratio)) | float }}'
    beats: 8
    snap_id: huskers_exterior_burst_pre
  sequence:
    - service: scene.create
      data:
        scene_id: '{{ snap_id }}'
        snapshot_entities:
          - light.light_front_left
          - light.light_front_right
          - light.garage_l
          - light.garage_c
          - light.garage_r
    - repeat:
        count: '{{ beats }}'
        sequence:
          # Odd beat â†’ FL/GL/GR=Scarlet, FR/GC=Cream; even â†’ inverted
          - choose:
              - conditions: '{{ (repeat.index | int(1)) % 2 == 1 }}'
                sequence:
                  - parallel:
                      - service: light.turn_on
                        target:
                          entity_id: light.light_front_left
                        data:
                          brightness: 255
                          hs_color: [355, 90]
                      - service: light.turn_on
                        target:
                          entity_id: light.light_front_right
                        data:
                          brightness: 255
                          hs_color: [48, 12]
                      - service: light.turn_on
                        target:
                          entity_id: light.garage_l
                        data:
                          brightness: 255
                          hs_color: [355, 90]
                      - service: light.turn_on
                        target:
                          entity_id: light.garage_c
                        data:
                          brightness: 255
                          hs_color: [48, 12]
                      - service: light.turn_on
                        target:
                          entity_id: light.garage_r
                        data:
                          brightness: 255
                          hs_color: [355, 90]
            default:
              - parallel:
                  - service: light.turn_on
                    target:
                      entity_id: light.light_front_left
                    data:
                      brightness: 255
                      hs_color: [48, 12]
                  - service: light.turn_on
                    target:
                      entity_id: light.light_front_right
                    data:
                      brightness: 255
                      hs_color: [355, 90]
                  - service: light.turn_on
                    target:
                      entity_id: light.garage_l
                    data:
                      brightness: 255
                      hs_color: [48, 12]
                  - service: light.turn_on
                    target:
                      entity_id: light.garage_c
                    data:
                      brightness: 255
                      hs_color: [355, 90]
                  - service: light.turn_on
                    target:
                      entity_id: light.garage_r
                    data:
                      brightness: 255
                      hs_color: [48, 12]
          - delay: '{{ pulse_s }}'
          - service: scene.turn_on
            target:
              entity_id: 'scene.{{ snap_id }}'
          - delay: '{{ rest_s }}'
    - choose:
        - conditions: "{{ states('scene.' ~ snap_id) != 'unknown' }}"
          sequence:
            - service: scene.delete
              data:
                entity_id: 'scene.{{ snap_id }}'
huskers_all_events_manual:
  alias: 'Huskers: Run All (Manual)'
  mode: single
  sequence:
    # Pregame showtime (game look + both shows)
    - service: script.turn_on
      target:
        entity_id:
          - script.huskers_led_gameday_start
          - script.huskers_theater_show_start
          - script.huskers_exterior_show_start
    # Give the show a moment to come up before bursts
    - delay: '00:00:05'
    # Touchdown bursts: theater + exterior (BPM) + LED_Huskers overlay
    - service: script.turn_on
      target:
        entity_id:
          - script.huskers_td_burst_bpm_theater
          - script.huskers_td_burst_bpm_exterior
          - script.huskers_led_td_burst
