# /config/templates.yaml  (no top-level 'template:' key)

# =========================
# WEATHER & ENVIRONMENT SENSORS
# =========================
- sensor:
    - name: 'KNEPLATT72 Pressure Trend'
      unique_id: kneplatt72_pressure_trend
      device_class: enum
      availability: >-
        {{ has_value('sensor.kneplatt72_pressure') and
           has_value('sensor.kneplatt72_pressure_24h_change') }}
      state: >-
        {% set unit = state_attr('sensor.kneplatt72_pressure', 'unit_of_measurement') | default('') %}
        {% set change = states('sensor.kneplatt72_pressure_24h_change') | float(0) %}
        {% set delta_inhg = change if unit == 'inHg'
            else (change / 33.8638866667) if unit in ['hPa', 'mbar']
            else change %}
        {% set threshold = 0.02 %}
        {% if delta_inhg >= threshold %}rising
        {% elif delta_inhg <= -threshold %}falling
        {% else %}steady
        {% endif %}
      icon: >-
        {% set trend = this.state %}
        {% if trend == 'rising' %}mdi:arrow-up-bold
        {% elif trend == 'falling' %}mdi:arrow-down-bold
        {% elif trend == 'steady' %}mdi:swap-horizontal-bold
        {% else %}mdi:help-circle-outline
        {% endif %}
      attributes:
        friendly_name: 'Pressure Trend (24h)'
        raw_change_value: "{{ states('sensor.kneplatt72_pressure_24h_change') }}"
        current_pressure: "{{ states('sensor.kneplatt72_pressure') }}"
        current_unit: "{{ state_attr('sensor.kneplatt72_pressure', 'unit_of_measurement') }}"
        delta_hpa: >-
          {% set unit = state_attr('sensor.kneplatt72_pressure', 'unit_of_measurement') | default('') %}
          {% set change = states('sensor.kneplatt72_pressure_24h_change') | float(0) %}
          {{ (change if unit in ['hPa', 'mbar'] else (change * 33.8638866667))  | round(2) }}
        delta_inhg: >-
          {% set unit = state_attr('sensor.kneplatt72_pressure', 'unit_of_measurement') | default('') %}
          {% set change = states('sensor.kneplatt72_pressure_24h_change') | float(0) %}
          {{ (change if unit == 'inHg' else (change / 33.8638866667)) | round(3) }}
        threshold_hpa: '0.68'
        threshold_inhg: '0.02'

    - name: 'KNEPLATT72 Temperature Trend'
      unique_id: kneplatt72_temperature_trend
      device_class: enum
      availability: "{{ has_value('sensor.kneplatt72_temperature_24h_change') }}"
      state: >-
        {% set change = states('sensor.kneplatt72_temperature_24h_change') | float('nan') %}
        {% if change == change %}
          {% set threshold = 2.0 %}
          {% if change > threshold %}rising
          {% elif change < -threshold %}falling
          {% else %}steady
          {% endif %}
        {% else %}unknown
        {% endif %}
      icon: >-
        {% set change = states('sensor.kneplatt72_temperature_24h_change') | float(0) %}
        {% if change > 2.0 %}mdi:thermometer-chevron-up
        {% elif change < -2.0 %}mdi:thermometer-chevron-down
        {% else %}mdi:thermometer
        {% endif %}
      attributes:
        friendly_name: 'Temperature Trend (24h)'
        delta_degf: "{{ states('sensor.kneplatt72_temperature_24h_change') | float(0) | round(1) }}"
        threshold_degf: '2.0'
        current_temperature: "{{ states('sensor.kneplatt72_temperature') }}"

    - name: 'KNEPLATT72 Humidity Trend'
      unique_id: kneplatt72_humidity_trend
      device_class: enum
      availability: "{{ has_value('sensor.kneplatt72_humidity_24h_change') }}"
      state: >-
        {% set change = states('sensor.kneplatt72_humidity_24h_change') | float('nan') %}
        {% if change == change %}
          {% set threshold = 5.0 %}
          {% if change > threshold %}rising
          {% elif change < -threshold %}falling
          {% else %}steady
          {% endif %}
        {% else %}unknown
        {% endif %}
      icon: >-
        {% set change = states('sensor.kneplatt72_humidity_24h_change') | float(0) %}
        {% if change > 5.0 %}mdi:water-plus
        {% elif change < -5.0 %}mdi:water-minus
        {% else %}mdi:water-percent
        {% endif %}
      attributes:
        friendly_name: 'Humidity Trend (24h)'
        delta_percent: "{{ states('sensor.kneplatt72_humidity_24h_change') | float(0) | round(1) }}"
        threshold_percent: '5.0'
        current_humidity: "{{ states('sensor.kneplatt72_relative_humidity') }}"

# =========================
# NETWORK & CONNECTIVITY SENSORS
# =========================
- sensor:
    - name: 'Network Active Hosts (Nmap)'
      unique_id: network_nmap_active_hosts
      icon: mdi:lan
      availability: "{{ integration_entities('nmap_tracker') | length > 0 }}"
      state: >-
        {% set nmap_entities = integration_entities('nmap_tracker') | default([]) %}
        {% set active_devices = expand(nmap_entities)
            | selectattr('domain', 'equalto', 'device_tracker')
            | selectattr('state', 'equalto', 'home')
            | list %}
        {{ active_devices | length }}
      attributes:
        friendly_name: 'Active Network Hosts'
        total_tracked: >-
          {% set nmap_entities = integration_entities('nmap_tracker') | default([]) %}
          {{ expand(nmap_entities) | selectattr('domain', 'equalto', 'device_tracker') | list | length }}
        integration: nmap_tracker

    - name: 'Network Clients Online (TP-Link)'
      unique_id: network_tplink_clients_online
      icon: mdi:wifi
      availability: "{{ integration_entities('tplink_router') | length > 0 }}"
      state: >-
        {% set tplink_entities = integration_entities('tplink_router') | default([]) %}
        {% set online_devices = expand(tplink_entities)
            | selectattr('domain', 'equalto', 'device_tracker')
            | selectattr('state', 'equalto', 'home')
            | list %}
        {{ online_devices | length }}
      attributes:
        friendly_name: 'TP-Link Clients Online'
        integration: tplink_router

    - name: 'Internet Connectivity Status'
      unique_id: internet_connectivity_status
      availability: "{{ has_value('binary_sensor.internet_reachable') }}"
      state: >-
        {% if is_state('binary_sensor.internet_reachable', 'on') %}
          {% set latency = states('sensor.internet_reachable_latency') | float(-1) %}
          {% if latency >= 0 %}
            Online ({{ latency | round(0) }}ms)
          {% else %}
            Online
          {% endif %}
        {% else %}
          Offline
        {% endif %}
      icon: >-
        {% if is_state('binary_sensor.internet_reachable', 'on') %}mdi:check-network
        {% else %}mdi:close-network
        {% endif %}
      attributes:
        friendly_name: 'Internet Status'
        is_online: "{{ is_state('binary_sensor.internet_reachable', 'on') }}"
        latency_ms: "{{ states('sensor.internet_reachable_latency') | float(-1) | round(0) }}"

# =========================
# HUSKERS GAME SENSORS
# =========================
- sensor:
    - name: 'Huskers Our Score'
      unique_id: huskers_our_score
      availability: "{{ has_value('sensor.husker_team') }}"
      state: "{{ state_attr('sensor.husker_team', 'team_score') | default(0) }}"
      icon: mdi:scoreboard
      attributes:
        friendly_name: 'Nebraska Score'

    - name: 'Huskers Opponent Score'
      unique_id: huskers_opponent_score
      availability: "{{ has_value('sensor.husker_team') }}"
      state: "{{ state_attr('sensor.husker_team', 'opponent_score') | default(0) }}"
      icon: mdi:scoreboard-outline
      attributes:
        friendly_name: 'Opponent Score'

    - name: 'Huskers Opponent Name'
      unique_id: huskers_opponent_name
      availability: "{{ has_value('sensor.husker_team') }}"
      state: "{{ state_attr('sensor.husker_team', 'opponent_name') | default('Unknown') }}"
      icon: mdi:shield
      attributes:
        friendly_name: 'Opponent Name'

    - name: 'Huskers Quarter'
      unique_id: huskers_quarter
      availability: "{{ has_value('sensor.husker_team') }}"
      state: "{{ state_attr('sensor.husker_team', 'quarter') | default('1') }}"
      icon: mdi:numeric
      attributes:
        friendly_name: 'Current Quarter'

    - name: 'Huskers Game Clock'
      unique_id: huskers_game_clock
      availability: "{{ has_value('sensor.husker_team') }}"
      state: "{{ state_attr('sensor.husker_team', 'clock') | default('15:00') }}"
      icon: mdi:clock-outline
      attributes:
        friendly_name: 'Game Clock'

    - name: 'Huskers Kickoff In'
      unique_id: huskers_kickoff_in
      unit_of_measurement: 'min'
      availability: "{{ has_value('sensor.husker_team') and state_attr('sensor.husker_team', 'date') is not none }}"
      state: >-
        {% set game_date = state_attr('sensor.husker_team', 'date') %}
        {% if game_date %}
          {% set kickoff_dt = as_datetime(game_date) %}
          {% if kickoff_dt %}
            {% set minutes_until = ((kickoff_dt - now()).total_seconds() / 60) | round(0) %}
            {{ [minutes_until, 0] | max }}
          {% else %}0{% endif %}
        {% else %}0{% endif %}
      icon: mdi:clock-outline
      attributes:
        friendly_name: 'Minutes Until Kickoff'

    - name: 'Huskers Game Status'
      unique_id: huskers_game_status
      availability: "{{ has_value('sensor.huskers_kickoff_in') }}"
      state: >-
        {% set minutes_until = states('sensor.huskers_kickoff_in') | int(-1) %}
        {% if minutes_until < 0 %}finished
        {% elif 0 <= minutes_until <= 120 %}pregame
        {% elif minutes_until > 120 %}scheduled
        {% else %}in_progress
        {% endif %}
      icon: mdi:football
      attributes:
        friendly_name: 'Game Status'

    - name: 'Huskers Next Game Start'
      unique_id: huskers_next_game_start
      availability: "{{ has_value('sensor.husker_team') }}"
      state: "{{ state_attr('sensor.husker_team', 'date') }}"
      icon: mdi:calendar-start
      attributes:
        friendly_name: 'Next Game Start Time'

    - name: 'Huskers Next Game Status'
      unique_id: huskers_next_game_status
      availability: "{{ has_value('sensor.husker_team') }}"
      state: "{{ states('sensor.husker_team') }}"
      icon: mdi:information
      attributes:
        friendly_name: 'Next Game Status'

    - name: 'Huskers Kickoff Time CT'
      unique_id: huskers_kickoff_time_ct
      availability: "{{ has_value('sensor.husker_team') }}"
      state: >-
        {% set game_date = state_attr('sensor.husker_team', 'date') %}
        {% if game_date %}
          {% set dt = as_datetime(game_date) %}
          {% if dt %}{{ as_local(dt).strftime('%I:%M %p CT') }}
          {% else %}Unknown{% endif %}
        {% else %}Unknown{% endif %}
      icon: mdi:clock-time-eight
      attributes:
        friendly_name: 'Kickoff Time (Central)'

    - name: 'Huskers Game Clock CT'
      unique_id: huskers_game_clock_ct
      state: "{{ now().strftime('%I:%M %p CT') }}"
      icon: mdi:clock
      attributes:
        friendly_name: 'Current Time (Central)'

    - name: 'Huskers Kickoff In (Effective)'
      unique_id: huskers_kickoff_in_effective
      unit_of_measurement: 'min'
      availability: "{{ has_value('sensor.huskers_kickoff_in') or has_value('input_number.huskers_kickoff_in_manual') }}"
      state: >-
        {% if has_value('sensor.huskers_kickoff_in') %}
          {{ states('sensor.huskers_kickoff_in') | float(0) }}
        {% elif has_value('input_number.huskers_kickoff_in_manual') %}
          {{ states('input_number.huskers_kickoff_in_manual') | float(0) }}
        {% else %}0{% endif %}
      icon: mdi:timer-sand
      attributes:
        friendly_name: 'Effective Kickoff Countdown'

    - name: 'Huskers Our Score (Effective)'
      unique_id: huskers_our_score_effective
      availability: "{{ has_value('sensor.huskers_our_score') or has_value('input_number.huskers_our_score_manual') }}"
      state: >-
        {% if has_value('sensor.huskers_our_score') %}
          {{ states('sensor.huskers_our_score') | int(0) }}
        {% elif has_value('input_number.huskers_our_score_manual') %}
          {{ states('input_number.huskers_our_score_manual') | int(0) }}
        {% else %}0{% endif %}
      icon: mdi:scoreboard
      attributes:
        friendly_name: 'Nebraska Score (Effective)'

    - name: 'Huskers Last Score (test)'
      unique_id: huskers_last_score_test
      availability: "{{ has_value('input_number.huskers_our_score') }}"
      state: "{{ states('input_number.huskers_our_score') | default(0) }}"
      icon: mdi:test-tube
      attributes:
        friendly_name: 'Last Test Score'

# =========================
# HUSKERS BINARY SENSORS
# =========================
- binary_sensor:
    - name: 'Huskers Pregame Window'
      unique_id: huskers_pregame_window
      device_class: running
      availability: "{{ has_value('sensor.huskers_kickoff_in_effective') }}"
      state: >-
        {% set minutes_until = states('sensor.huskers_kickoff_in_effective') | int(-1) %}
        {{ 0 < minutes_until <= 120 }}
      icon: >-
        {% if this.state %}mdi:clock-fast{% else %}mdi:clock-outline{% endif %}
      attributes:
        friendly_name: 'Pregame Window (2 hours)'

    - name: 'Huskers Game In Progress (TT)'
      unique_id: huskers_game_in_progress_tt
      device_class: running
      availability: "{{ has_value('sensor.husker_team') }}"
      state: >-
        {% set game_state = states('sensor.husker_team') %}
        {{ game_state in ['IN', 'LIVE'] }}
      icon: >-
        {% if this.state %}mdi:football{% else %}mdi:football-helmet{% endif %}
      attributes:
        friendly_name: 'Game In Progress'

    - name: 'Huskers Postgame Window'
      unique_id: huskers_postgame_window
      device_class: running
      availability: "{{ has_value('sensor.husker_team') }}"
      state: >-
        {% set game_state = states('sensor.husker_team') %}
        {{ game_state == 'POST' }}
      icon: >-
        {% if this.state %}mdi:flag-checkered{% else %}mdi:flag-outline{% endif %}
      attributes:
        friendly_name: 'Postgame Window'
