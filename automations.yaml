# === AUTOMATIONS (Base / generic) ===

  - id: evening_lights_at_sunset
    alias: 'Lighting: Evening Sunset (Interior)'
    description: >
      Activates evening lighting at sunset. Skips while Husker lighting hold is active.
    mode: single
    trigger:
      - platform: sun
        event: sunset
        offset: '00:05:00'
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
      - condition: template
        value_template: "{{ states('binary_sensor.huskers_lighting_hold') != 'on' }}"
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.lighting_evening_sunset_interior
        data:
          transition: 2

  - id: exterior_front_garage_on_sunset
    alias: 'Lighting: Evening Sunset (Exterior)'
    description: >
      Turns on front porch and garage fixtures shortly after sunset unless Husker lighting hold is active.
    mode: single
    trigger:
      - platform: sun
        event: sunset
        offset: '00:05:00'
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
      - condition: template
        value_template: "{{ states('binary_sensor.huskers_lighting_hold') != 'on' }}"
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.lighting_evening_sunset_exterior
        data:
          transition: 2

  - id: night_mode_at_midnight
    alias: 'Lighting: Night Mode'
    description: >
      Turns off most interior/accent lights and dims exterior LED to 20%.
    mode: single
    trigger:
      - platform: time
        at: '00:00:00'
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.lighting_night_mode
        data:
          transition: 5

  - id: early_morning_lights_0330
    alias: 'Lighting: Early Morning Gentle Wake'
    description: >
      Soft ambient lighting for early risers.
    mode: single
    trigger:
      - platform: time
        at: '03:30:00'
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.lighting_early_morning_gentle_wake
        data:
          transition: 3

  - id: interior_lights_sunrise_off
    alias: 'Lighting: Morning Interior Off'
    description: >
      Turns off ambient interior lighting after sunrise unless the Husker light show is running.
    mode: single
    trigger:
      - platform: sun
        event: sunrise
        offset: '00:15:00'
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
      - condition: state
        entity_id: binary_sensor.huskers_light_show_active
        state: 'off'
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.lighting_morning_interior_off
        data:
          transition: 10

  - id: exterior_lights_sunrise_off
    alias: 'Lighting: Morning Exterior Off'
    description: >
      Turns off the front porch and garage lights a few minutes after sunrise unless the Husker light show is running.
    mode: single
    trigger:
      - platform: sun
        event: sunrise
        offset: '00:05:00'
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
      - condition: state
        entity_id: binary_sensor.huskers_light_show_active
        state: 'off'
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.lighting_morning_exterior_off
        data:
          transition: 10

  - id: exterior_lights_cloudy_daytime
    alias: 'Lighting: Daytime Cloudy Exterior'
    description: >
      Brings exterior lights to a gentle daytime level when heavy clouds roll in and turns them back off as skies clear.
    mode: single
    trigger:
      - platform: numeric_state
        id: cloudy
        entity_id: sensor.openweathermap_cloud_coverage
        above: 80
      - platform: numeric_state
        id: clearing
        entity_id: sensor.openweathermap_cloud_coverage
        below: 80
      - platform: time_pattern
        id: periodic
        minutes: '/5'
      - platform: homeassistant
        event: start
        id: startup
      - platform: event
        event_type: automation_reloaded
        id: reload
    condition:
      - condition: sun
        after: sunrise
        before: sunset
      - condition: template
        value_template: "{{ cloud_coverage_available }}"
    variables:
      cloud_coverage_raw: "{{ states('sensor.openweathermap_cloud_coverage') }}"
      cloud_coverage_available: >-
        {{ cloud_coverage_raw not in ['unknown', 'unavailable', 'none', None, ''] }}
      cloud_coverage: >-
        {{ cloud_coverage_raw | float(0) if cloud_coverage_available else 0 }}
      should_be_on: >-
        {{ (cloud_coverage_available and cloud_coverage >= 80) | bool }}
      target_brightness_pct: 30
      target_brightness: "{{ (255 * target_brightness_pct / 100) | round(0) | int }}"
      brightness_tolerance: 26
      target_brightness_low: "{{ [target_brightness - brightness_tolerance, 1] | max | int }}"
      target_brightness_high: "{{ [target_brightness + brightness_tolerance, 255] | min | int }}"
      validation_timeout: '00:00:15'
      tracked_lights:
        - name: Front porch
          entity_id: light.front_porch_lights
        - name: Garage
          entity_id: light.garage_lights
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ should_be_on | bool }}"
            sequence:
              - repeat:
                  for_each: "{{ tracked_lights }}"
                  sequence:
                    - variables:
                        light_entity: "{{ repeat.item.entity_id }}"
                        light_name: "{{ repeat.item.name }}"
                        current_state: "{{ states(light_entity) }}"
                        current_brightness: "{{ state_attr(light_entity, 'brightness') | int(0) }}"
                        needs_adjustment: >-
                          {{
                            current_state != 'on'
                            or current_brightness == 0
                            or current_brightness < (target_brightness_low | int)
                            or current_brightness > (target_brightness_high | int)
                          }}
                    - if:
                        - condition: template
                          value_template: "{{ needs_adjustment }}"
                      then:
                        - service: light.turn_on
                          target:
                            entity_id: "{{ light_entity }}"
                          data:
                            brightness_pct: "{{ target_brightness_pct }}"
                            transition: 2
                        - wait_template: >-
                            {{
                              is_state(light_entity, 'on')
                              and (state_attr(light_entity, 'brightness') | int(0)) >= (target_brightness_low | int)
                              and (state_attr(light_entity, 'brightness') | int(0)) <= (target_brightness_high | int)
                            }}
                          timeout: "{{ validation_timeout }}"
                          continue_on_timeout: true
                        - variables:
                            corrected_state: "{{ states(light_entity) }}"
                            corrected_brightness: "{{ state_attr(light_entity, 'brightness') | int(0) }}"
                            correction_passed: >-
                              {{
                                corrected_state == 'on'
                                and corrected_brightness != 0
                                and corrected_brightness >= (target_brightness_low | int)
                                and corrected_brightness <= (target_brightness_high | int)
                              }}
                        - choose:
                            - conditions:
                                - condition: template
                                  value_template: "{{ correction_passed }}"
                              sequence:
                                - service: logbook.log
                                  data:
                                    name: Cloudy Daytime Exterior
                                    message: >-
                                      Brought {{ light_name | lower }} lights to cloudy daytime level
                                      ({{ cloud_coverage | round(0) }}% coverage).
                            - default:
                                - service: logbook.log
                                  data:
                                    name: Cloudy Daytime Exterior
                                    message: >-
                                      Failed to bring {{ light_name | lower }} lights to cloudy daytime level
                                      ({{ cloud_coverage | round(0) }}% coverage).
                                - service: persistent_notification.create
                                  data:
                                    title: Cloudy Daytime Exterior validation failed
                                    message: >-
                                      {{ light_name }} lights did not reach the expected cloudy
                                      brightness ({{ cloud_coverage | round(0) }}% coverage).
                                    notification_id: cloudy_daytime_exterior_validation
          - conditions:
              - condition: template
                value_template: "{{ (not should_be_on) | bool }}"
            sequence:
              - repeat:
                  for_each: "{{ tracked_lights }}"
                  sequence:
                    - variables:
                        light_entity: "{{ repeat.item.entity_id }}"
                        light_name: "{{ repeat.item.name }}"
                        current_state: "{{ states(light_entity) }}"
                        needs_off: "{{ current_state != 'off' }}"
                    - if:
                        - condition: template
                          value_template: "{{ needs_off }}"
                      then:
                        - service: light.turn_off
                          target:
                            entity_id: "{{ light_entity }}"
                          data:
                            transition: 2
                        - wait_template: "{{ is_state(light_entity, 'off') }}"
                          timeout: "{{ validation_timeout }}"
                          continue_on_timeout: true
                        - variables:
                            cleared: "{{ is_state(light_entity, 'off') }}"
                        - choose:
                            - conditions:
                                - condition: template
                                  value_template: "{{ cleared }}"
                              sequence:
                                - service: logbook.log
                                  data:
                                    name: Cloudy Daytime Exterior
                                    message: >-
                                      Turned off {{ light_name | lower }} lights as skies cleared
                                      ({{ cloud_coverage | round(0) }}% coverage).
                            - default:
                                - service: logbook.log
                                  data:
                                    name: Cloudy Daytime Exterior
                                    message: >-
                                      Failed to turn off {{ light_name | lower }} lights as skies cleared
                                      ({{ cloud_coverage | round(0) }}% coverage).
                                - service: persistent_notification.create
                                  data:
                                    title: Cloudy Daytime Exterior validation failed
                                    message: >-
                                      {{ light_name }} lights did not turn off after skies cleared
                                      ({{ cloud_coverage | round(0) }}% coverage).
                                    notification_id: cloudy_daytime_exterior_validation
      - choose:
          - conditions:
              - condition: template
                value_template: >-
                  {{
                    should_be_on
                    and is_state('light.front_porch_lights', 'on')
                    and (state_attr('light.front_porch_lights', 'brightness') | int(0)) >= (target_brightness_low | int)
                    and (state_attr('light.front_porch_lights', 'brightness') | int(0)) <= (target_brightness_high | int)
                    and is_state('light.garage_lights', 'on')
                    and (state_attr('light.garage_lights', 'brightness') | int(0)) >= (target_brightness_low | int)
                    and (state_attr('light.garage_lights', 'brightness') | int(0)) <= (target_brightness_high | int)
                  }}
            sequence:
              - if:
                  - condition: template
                    value_template: >-
                      {{
                        states('persistent_notification.cloudy_daytime_exterior_validation')
                        not in ['unknown', 'unavailable', None]
                      }}
                then:
                  - service: persistent_notification.dismiss
                    data:
                      notification_id: cloudy_daytime_exterior_validation
          - conditions:
              - condition: template
                value_template: >-
                  {{
                    (not should_be_on)
                    and is_state('light.front_porch_lights', 'off')
                    and is_state('light.garage_lights', 'off')
                  }}
            sequence:
              - if:
                  - condition: template
                    value_template: >-
                      {{
                        states('persistent_notification.cloudy_daytime_exterior_validation')
                        not in ['unknown', 'unavailable', None]
                      }}
                then:
                  - service: persistent_notification.dismiss
                    data:
                      notification_id: cloudy_daytime_exterior_validation

  - id: exterior_led_monthly_effect
    alias: 'LED: Monthly Effect Scheduler'
    description: >
      Sets seasonal/holiday effects on exterior LED strip.
    mode: single
    trigger:
      - platform: time
        at: '00:00:01'
      - platform: homeassistant
        event: start
    variables:
      current_month: '{{ now().month }}'
      monthly_configs:
        1:
          scene: scene.lighting_led_effect_january
          effect: LED-January
        2:
          scene: scene.lighting_led_effect_february
          effect: LED-February
        3:
          scene: scene.lighting_led_effect_march
          effect: LED-March
        4:
          scene: scene.lighting_led_effect_april
          effect: LED-April
        5:
          scene: scene.lighting_led_effect_patriotic
          effect: BSMT-Patriotic
        6:
          scene: scene.lighting_led_effect_patriotic
          effect: BSMT-Patriotic
        7:
          scene: scene.lighting_led_effect_patriotic
          effect: BSMT-Patriotic
        8:
          scene: scene.lighting_led_effect_august
          effect: LED-August
        9:
          scene: scene.lighting_led_effect_august
          effect: LED-August
        10:
          scene: scene.lighting_led_effect_halloween
          effect: Halloween
        11:
          scene: scene.lighting_led_effect_thanksgiving
          effect: LED-Thanksgiving
        12:
          scene: scene.lighting_led_effect_christmas
          effect: Christmas
      target_config: '{{ monthly_configs.get(current_month, {}) }}'
      target_scene: '{{ target_config.get("scene") }}'
      target_effect: '{{ target_config.get("effect") }}'
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
    action:
      - alias: 'Wait for permanent outdoor lights to advertise effects after startup'
        wait_template: >-
          {% set available_effects = state_attr('light.permanent_outdoor_lights','effect_list') or [] %}
          {{ target_effect in available_effects }}
        timeout: '00:02:00'
        continue_on_timeout: true
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ target_scene is not none and target_scene != '' }}"
              - condition: template
                value_template: >-
                  {% set available_effects = state_attr('light.permanent_outdoor_lights','effect_list') or [] %}
                  {{ target_effect in available_effects }}
            sequence:
              - if:
                  - condition: template
                    value_template: "{{ has_value('light.permanent_outdoor_lights') }}"
                then:
                  - service: scene.turn_on
                    target:
                      entity_id: '{{ target_scene }}'
                    continue_on_error: true
              - service: logbook.log
                data:
                  name: LED Monthly Effect
                  message: 'Applied {{ target_effect or "unknown effect" }} for month {{ current_month }} via {{ target_scene or "unknown scene" }}'
        default:
          - service: logbook.log
            data:
              name: LED Monthly Effect
              message: >-
                Skipped {{ target_effect or 'unknown effect' }} for month {{ current_month }} -- effect missing after startup wait or scene unavailable

  - id: humidor_plug_temp_control
    alias: 'Climate: Humidor Temperature Control'
    description: >
      Hysteresis control for humidor: ON >74°F, OFF <70°F.
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: sensor.hygrometer_humidor_temperature
        above: 74
        for: {minutes: 2}
      - platform: numeric_state
        entity_id: sensor.hygrometer_humidor_temperature
        below: 70
        for: {minutes: 1}
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
      - condition: template
        value_template: >-
          {% set temp = trigger.to_state.state | float(-999) %}
          {% set on = is_state('switch.plug_humidor','on') %}
          {{ (temp > 74 and not on) or (temp < 70 and on) }}
    action:
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: sensor.hygrometer_humidor_temperature
                above: 74
            sequence:
              - service: scene.turn_on
                target:
                  entity_id: scene.climate_humidor_cooling_on
              - service: logbook.log
                data:
                  name: Humidor Control
                  message: 'Cooling ON - Temperature: {{ states("sensor.hygrometer_humidor_temperature") }}°F - Humidity: {{ states("sensor.hygrometer_humidor_humidity") }}%'
          - conditions:
              - condition: numeric_state
                entity_id: sensor.hygrometer_humidor_temperature
                below: 70
            sequence:
              - service: scene.turn_on
                target:
                  entity_id: scene.climate_humidor_cooling_off
              - service: logbook.log
                data:
                  name: Humidor Control
                  message: 'Cooling OFF - Temperature: {{ states("sensor.hygrometer_humidor_temperature") }}°F - Humidity: {{ states("sensor.hygrometer_humidor_humidity") }}%'

  - id: burner_plugs_off_2300
    alias: 'Safety: Nightly Burner Plug Shutoff'
    description: >
      Safety shutoff for burner plugs at 11 PM daily.
    mode: single
    trigger:
      - platform: time
        at: '23:00:00'
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.safety_burner_plugs_off
        continue_on_error: true
      - service: persistent_notification.create
        data:
          title: 'Safety: Burner Plugs'
          message: 'All burner plugs turned off at 11 PM.'
          notification_id: nightly_burner_shutoff
      - service: logbook.log
        data:
          name: Safety Automation
          message: Nightly burner plug shutoff completed
