# === AUTOMATIONS (Base / generic) ===

  - id: evening_lights_at_sunset
    alias: 'Lighting: Evening Sunset (Interior)'
    description: >
      Activates evening lighting at sunset. Skips while Husker lighting hold is active.
    mode: single
    trigger:
      - platform: sun
        event: sunset
        offset: '00:05:00'
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
      - condition: template
        value_template: "{{ states('binary_sensor.huskers_lighting_hold') != 'on' }}"
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.lighting_evening_sunset_interior
        data:
          transition: 2

  - id: exterior_front_garage_on_sunset
    alias: 'Lighting: Evening Sunset (Exterior)'
    description: >
      Turns on front porch and garage fixtures shortly after sunset unless Husker lighting hold is active.
    mode: single
    trigger:
      - platform: sun
        event: sunset
        offset: '00:05:00'
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
      - condition: template
        value_template: "{{ states('binary_sensor.huskers_lighting_hold') != 'on' }}"
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.lighting_evening_sunset_exterior
        data:
          transition: 2

  - id: night_mode_at_midnight
    alias: 'Lighting: Night Mode'
    description: >
      Turns off most interior/accent lights and dims exterior LED to 20% unless the Husker lighting hold is active.
    mode: single
    trigger:
      - platform: time
        at: '00:00:00'
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
      - condition: template
        value_template: "{{ states('binary_sensor.huskers_lighting_hold') != 'on' }}"
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.lighting_night_mode
        data:
          transition: 5

  - id: early_morning_lights_0330
    alias: 'Lighting: Early Morning Gentle Wake'
    description: >
      Soft ambient lighting for early risers unless the Husker lighting hold is active.
    mode: single
    trigger:
      - platform: time
        at: '03:30:00'
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
      - condition: template
        value_template: "{{ states('binary_sensor.huskers_lighting_hold') != 'on' }}"
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.lighting_early_morning_gentle_wake
        data:
          transition: 3

  - id: interior_lights_sunrise_off
    alias: 'Lighting: Morning Interior Off'
    description: >
      Turns off ambient interior lighting after sunrise unless the Husker light show or lighting hold is active.
    mode: single
    trigger:
      - platform: sun
        event: sunrise
        offset: '00:15:00'
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
      - condition: state
        entity_id: binary_sensor.huskers_light_show_active
        state: 'off'
      - condition: template
        value_template: "{{ states('binary_sensor.huskers_lighting_hold') != 'on' }}"
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.lighting_morning_interior_off
        data:
          transition: 10

  - id: exterior_lights_sunrise_off
    alias: 'Lighting: Morning Exterior Off'
    description: >
      Turns off the front porch and garage lights a few minutes after sunrise unless the Husker light show or lighting hold is active.
    mode: single
    trigger:
      - platform: sun
        event: sunrise
        offset: '00:05:00'
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
      - condition: state
        entity_id: binary_sensor.huskers_light_show_active
        state: 'off'
      - condition: template
        value_template: "{{ states('binary_sensor.huskers_lighting_hold') != 'on' }}"
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.lighting_morning_exterior_off
        data:
          transition: 10

  - id: exterior_lights_cloudy_daytime
    alias: 'Lighting: Daytime Cloudy Exterior'
    description: >
      Brings exterior lights to a gentle daytime level when heavy clouds roll in and turns them back off as skies clear.
    mode: single
    trigger:
      - platform: numeric_state
        id: cloudy
        entity_id: sensor.openweathermap_cloud_coverage
        above: 80
      - platform: numeric_state
        id: clearing
        entity_id: sensor.openweathermap_cloud_coverage
        below: 80
      - platform: time_pattern
        id: periodic
        minutes: '/5'
      - platform: homeassistant
        event: start
        id: startup
      - platform: event
        event_type: automation_reloaded
        id: reload
    condition:
      - condition: sun
        after: sunrise
        before: sunset
      - condition: template
        value_template: "{{ cloud_coverage_available }}"
      - condition: template
        value_template: "{{ states('binary_sensor.huskers_lighting_hold') != 'on' }}"
    variables:
      cloud_coverage_raw: "{{ states('sensor.openweathermap_cloud_coverage') }}"
      cloud_coverage_available: >-
        {{ cloud_coverage_raw not in ['unknown', 'unavailable', 'none', None, ''] }}
      cloud_coverage: >-
        {{ cloud_coverage_raw | float(0) if cloud_coverage_available else 0 }}
      should_be_on: >-
        {{ (cloud_coverage_available and cloud_coverage >= 80) | bool }}
      target_brightness_pct: 30
      target_brightness: "{{ (255 * target_brightness_pct / 100) | round(0) | int }}"
      brightness_tolerance: 26
      target_brightness_low: "{{ [target_brightness - brightness_tolerance, 1] | max | int }}"
      target_brightness_high: "{{ [target_brightness + brightness_tolerance, 255] | min | int }}"
      validation_timeout: '00:00:15'
      tracked_lights:
        - name: Front porch
          entity_id: light.front_porch_lights
        - name: Garage
          entity_id: light.garage_lights
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ should_be_on | bool }}"
            sequence:
              - repeat:
                  for_each: "{{ tracked_lights }}"
                  sequence:
                    - variables:
                        light_entity: "{{ repeat.item.entity_id }}"
                        light_name: "{{ repeat.item.name }}"
                        current_state: "{{ states(light_entity) }}"
                        current_brightness: "{{ state_attr(light_entity, 'brightness') | int(0) }}"
                        needs_adjustment: >-
                          {{
                            current_state != 'on'
                            or current_brightness == 0
                            or current_brightness < (target_brightness_low | int)
                            or current_brightness > (target_brightness_high | int)
                          }}
                    - if:
                        - condition: template
                          value_template: "{{ needs_adjustment }}"
                      then:
                        - service: light.turn_on
                          target:
                            entity_id: "{{ light_entity }}"
                          data:
                            brightness_pct: "{{ target_brightness_pct }}"
                            transition: 2
                        - wait_template: >-
                            {{
                              is_state(light_entity, 'on')
                              and (state_attr(light_entity, 'brightness') | int(0)) >= (target_brightness_low | int)
                              and (state_attr(light_entity, 'brightness') | int(0)) <= (target_brightness_high | int)
                            }}
                          timeout: "{{ validation_timeout }}"
                          continue_on_timeout: true
                        - variables:
                            corrected_state: "{{ states(light_entity) }}"
                            corrected_brightness: "{{ state_attr(light_entity, 'brightness') | int(0) }}"
                            correction_passed: >-
                              {{
                                corrected_state == 'on'
                                and corrected_brightness != 0
                                and corrected_brightness >= (target_brightness_low | int)
                                and corrected_brightness <= (target_brightness_high | int)
                              }}
                        - if:
                            - condition: template
                              value_template: "{{ correction_passed }}"
                          then:
                            - service: logbook.log
                              data:
                                name: Cloudy Daytime Exterior
                                message: >-
                                  Brought {{ light_name | lower }} lights to cloudy daytime level
                                  ({{ cloud_coverage | round(0) }}% coverage).
                          else:
                            - service: logbook.log
                              data:
                                name: Cloudy Daytime Exterior
                                message: >-
                                  Failed to bring {{ light_name | lower }} lights to cloudy daytime level
                                  ({{ cloud_coverage | round(0) }}% coverage).
                            - service: persistent_notification.create
                              data:
                                title: Cloudy Daytime Exterior validation failed
                                message: >-
                                  {{ light_name }} lights did not reach the expected cloudy
                                  brightness ({{ cloud_coverage | round(0) }}% coverage).
                                notification_id: cloudy_daytime_exterior_validation
          - conditions:
              - condition: template
                value_template: "{{ (not should_be_on) | bool }}"
            sequence:
              - repeat:
                  for_each: "{{ tracked_lights }}"
                  sequence:
                    - variables:
                        light_entity: "{{ repeat.item.entity_id }}"
                        light_name: "{{ repeat.item.name }}"
                        current_state: "{{ states(light_entity) }}"
                        needs_off: "{{ current_state != 'off' }}"
                    - if:
                        - condition: template
                          value_template: "{{ needs_off }}"
                      then:
                        - service: light.turn_off
                          target:
                            entity_id: "{{ light_entity }}"
                          data:
                            transition: 2
                        - wait_template: "{{ is_state(light_entity, 'off') }}"
                          timeout: "{{ validation_timeout }}"
                          continue_on_timeout: true
                        - variables:
                            cleared: "{{ is_state(light_entity, 'off') }}"
                        - if:
                            - condition: template
                              value_template: "{{ cleared }}"
                          then:
                            - service: logbook.log
                              data:
                                name: Cloudy Daytime Exterior
                                message: >-
                                  Turned off {{ light_name | lower }} lights as skies cleared
                                  ({{ cloud_coverage | round(0) }}% coverage).
                          else:
                            - service: logbook.log
                              data:
                                name: Cloudy Daytime Exterior
                                message: >-
                                  Failed to turn off {{ light_name | lower }} lights as skies cleared
                                  ({{ cloud_coverage | round(0) }}% coverage).
                            - service: persistent_notification.create
                              data:
                                title: Cloudy Daytime Exterior validation failed
                                message: >-
                                  {{ light_name }} lights did not turn off after skies cleared
                                  ({{ cloud_coverage | round(0) }}% coverage).
                                notification_id: cloudy_daytime_exterior_validation
      - choose:
          - conditions:
              - condition: template
                value_template: >-
                  {{
                    should_be_on
                    and is_state('light.front_porch_lights', 'on')
                    and (state_attr('light.front_porch_lights', 'brightness') | int(0)) >= (target_brightness_low | int)
                    and (state_attr('light.front_porch_lights', 'brightness') | int(0)) <= (target_brightness_high | int)
                    and is_state('light.garage_lights', 'on')
                    and (state_attr('light.garage_lights', 'brightness') | int(0)) >= (target_brightness_low | int)
                    and (state_attr('light.garage_lights', 'brightness') | int(0)) <= (target_brightness_high | int)
                  }}
            sequence:
              - if:
                  - condition: template
                    value_template: >-
                      {{
                        states('persistent_notification.cloudy_daytime_exterior_validation')
                        not in ['unknown', 'unavailable', None]
                      }}
                then:
                  - service: persistent_notification.dismiss
                    data:
                      notification_id: cloudy_daytime_exterior_validation
          - conditions:
              - condition: template
                value_template: >-
                  {{
                    (not should_be_on)
                    and is_state('light.front_porch_lights', 'off')
                    and is_state('light.garage_lights', 'off')
                  }}
            sequence:
              - if:
                  - condition: template
                    value_template: >-
                      {{
                        states('persistent_notification.cloudy_daytime_exterior_validation')
                        not in ['unknown', 'unavailable', None]
                      }}
                then:
                  - service: persistent_notification.dismiss
                    data:
                      notification_id: cloudy_daytime_exterior_validation

  - id: exterior_lights_fail_safe_validator
    alias: 'Lighting: Exterior Fail-safe Validator'
    description: >
      Every five minutes ensure key exterior lighting automations have executed and
      that the front porch, garage, and exterior LED lights align with the most
      recent automation outcome.
    mode: single
    trigger:
      - platform: time_pattern
        minutes: '/5'
      - platform: homeassistant
        event: start
      - platform: event
        event_type: automation_reloaded
    condition:
      - condition: template
        value_template: "{{ states('binary_sensor.holiday_mode_active') != 'on' }}"
      - condition: template
        value_template: "{{ states('binary_sensor.huskers_lighting_hold') != 'on' }}"
    variables:
      now_ts: "{{ as_timestamp(now()) }}"
      midnight_expected_ts: "{{ as_timestamp(today_at('00:00:00')) }}"
      early_morning_expected_ts: "{{ as_timestamp(today_at('03:30:00')) }}"
      next_rising_ts: "{{ as_timestamp(state_attr('sun.sun', 'next_rising')) | default(0, true) }}"
      next_setting_ts: "{{ as_timestamp(state_attr('sun.sun', 'next_setting')) | default(0, true) }}"
      sunrise_last_ts: "{{ (next_rising_ts - 86400) if next_rising_ts else 0 }}"
      sunset_last_ts: "{{ (next_setting_ts - 86400) if next_setting_ts else 0 }}"
      sunrise_expected_ts: "{{ (sunrise_last_ts + 300) if sunrise_last_ts else 0 }}"
      sunset_expected_ts: "{{ (sunset_last_ts + 300) if sunset_last_ts else 0 }}"
      husker_show_active: "{{ is_state('binary_sensor.huskers_light_show_active', 'on') }}"
      automations_to_check:
        - name: Evening Sunset Exterior
          entity_id: automation.exterior_front_garage_on_sunset
          expected_ts: "{{ sunset_expected_ts }}"
          skip: "{{ sunset_expected_ts == 0 }}"
        - name: Night Mode
          entity_id: automation.night_mode_at_midnight
          expected_ts: "{{ midnight_expected_ts }}"
          skip: 'false'
        - name: Early Morning Gentle Wake
          entity_id: automation.early_morning_lights_0330
          expected_ts: "{{ early_morning_expected_ts }}"
          skip: 'false'
        - name: Morning Exterior Off
          entity_id: automation.exterior_lights_sunrise_off
          expected_ts: "{{ sunrise_expected_ts }}"
          skip: "{{ sunrise_expected_ts == 0 or husker_show_active }}"
      front_entity: light.front_porch_lights
      garage_entity: light.garage_lights
      led_entity: light.permanent_outdoor_lights
      last_evening_ts: "{{ as_timestamp(state_attr('automation.exterior_front_garage_on_sunset', 'last_triggered')) | default(0, true) }}"
      last_night_ts: "{{ as_timestamp(state_attr('automation.night_mode_at_midnight', 'last_triggered')) | default(0, true) }}"
      last_early_ts: "{{ as_timestamp(state_attr('automation.early_morning_lights_0330', 'last_triggered')) | default(0, true) }}"
      last_morning_off_ts: "{{ as_timestamp(state_attr('automation.exterior_lights_sunrise_off', 'last_triggered')) | default(0, true) }}"
      active_profile: >-
        {% set triggers = {
          'evening': last_evening_ts,
          'night': last_night_ts,
          'early_morning': last_early_ts,
          'morning_off': last_morning_off_ts
        } %}
        {% set ordered = triggers | dictsort(by='value') %}
        {% if ordered %}
          {% set latest = ordered[-1] %}
          {% if latest[1] and (now_ts - latest[1]) < 90000 %}
            {{ latest[0] }}
          {% else %}
            unknown
          {% endif %}
        {% else %}
          unknown
        {% endif %}
    action:
      - repeat:
          for_each: "{{ automations_to_check }}"
          sequence:
            - variables:
                automation_entity: "{{ repeat.item.entity_id }}"
                expected_ts: "{{ repeat.item.expected_ts | float(0) }}"
                skip_check: "{{ repeat.item.skip | default(false) | string | lower == 'true' }}"
                last_triggered_ts: "{{ as_timestamp(state_attr(automation_entity, 'last_triggered')) | default(0, true) }}"
            - if:
                - condition: template
                  value_template: >-
                    {{
                      skip_check
                      or expected_ts == 0
                      or now_ts < expected_ts
                      or not is_state(automation_entity, 'on')
                    }}
              then: []
              else:
                - if:
                    - condition: template
                      value_template: "{{ last_triggered_ts < expected_ts }}"
                  then:
                    - service: automation.trigger
                      target:
                        entity_id: "{{ automation_entity }}"
                    - service: logbook.log
                      data:
                        name: Exterior Lighting Fail-safe
                        message: >-
                          Re-triggered {{ repeat.item.name }} automation
                          ({{ automation_entity }}) to catch up on missed run.
      - variables:
          front_expected_state: null
          front_min_brightness: 0
          front_max_brightness: 0
          garage_expected_state: null
          garage_min_brightness: 0
          garage_max_brightness: 0
          led_expected_state: null
          led_min_brightness: 0
          led_max_brightness: 0
          corrective_automation: ''
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ active_profile == 'evening' }}"
            sequence:
              - variables:
                  front_expected_state: 'on'
                  front_min_brightness: 1
                  front_max_brightness: 90
                  garage_expected_state: 'on'
                  garage_min_brightness: 1
                  garage_max_brightness: 90
                  led_expected_state: 'on'
                  led_min_brightness: 90
                  led_max_brightness: 200
                  corrective_automation: automation.exterior_front_garage_on_sunset
          - conditions:
              - condition: template
                value_template: "{{ active_profile == 'early_morning' }}"
            sequence:
              - variables:
                  front_expected_state: 'on'
                  front_min_brightness: 1
                  front_max_brightness: 90
                  garage_expected_state: 'on'
                  garage_min_brightness: 1
                  garage_max_brightness: 90
                  led_expected_state: 'on'
                  led_min_brightness: 90
                  led_max_brightness: 200
                  corrective_automation: automation.early_morning_lights_0330
          - conditions:
              - condition: template
                value_template: "{{ active_profile == 'night' }}"
            sequence:
              - variables:
                  front_expected_state: 'off'
                  garage_expected_state: 'off'
                  led_expected_state: 'on'
                  led_min_brightness: 1
                  led_max_brightness: 110
                  corrective_automation: automation.night_mode_at_midnight
          - conditions:
              - condition: template
                value_template: "{{ active_profile == 'morning_off' and not husker_show_active }}"
            sequence:
              - variables:
                  front_expected_state: 'off'
                  garage_expected_state: 'off'
                  led_expected_state: 'off'
                  corrective_automation: automation.exterior_lights_sunrise_off
          - conditions:
              - condition: template
                value_template: "{{ active_profile == 'morning_off' and husker_show_active }}"
            sequence:
              - variables:
                  corrective_automation: ''
      - if:
          - condition: template
            value_template: "{{ corrective_automation != '' }}"
        then:
          - variables:
              front_state: "{{ states(front_entity) }}"
              front_brightness: "{{ state_attr(front_entity, 'brightness') | int(0) }}"
              garage_state: "{{ states(garage_entity) }}"
              garage_brightness: "{{ state_attr(garage_entity, 'brightness') | int(0) }}"
              led_state: "{{ states(led_entity) }}"
              led_brightness: "{{ state_attr(led_entity, 'brightness') | int(0) }}"
          - if:
              - condition: template
                value_template: >-
                  {% set needs_front =
                    front_expected_state == 'on'
                    and not (
                      front_state == 'on'
                      and front_brightness >= front_min_brightness
                      and front_brightness <= front_max_brightness
                    )
                  %}
                  {% set needs_front =
                    needs_front
                    or (
                      front_expected_state == 'off'
                      and front_state != 'off'
                    )
                  %}
                  {% set needs_garage =
                    garage_expected_state == 'on'
                    and not (
                      garage_state == 'on'
                      and garage_brightness >= garage_min_brightness
                      and garage_brightness <= garage_max_brightness
                    )
                  %}
                  {% set needs_garage =
                    needs_garage
                    or (
                      garage_expected_state == 'off'
                      and garage_state != 'off'
                    )
                  %}
                  {% set needs_led =
                    led_expected_state == 'on'
                    and not (
                      led_state == 'on'
                      and led_brightness >= led_min_brightness
                      and led_brightness <= led_max_brightness
                    )
                  %}
                  {% set needs_led =
                    needs_led
                    or (
                      led_expected_state == 'off'
                      and led_state != 'off'
                    )
                  %}
                  {{ needs_front or needs_garage or needs_led }}
            then:
              - service: automation.trigger
                target:
                  entity_id: "{{ corrective_automation }}"
              - service: logbook.log
                data:
                  name: Exterior Lighting Fail-safe
                  message: >-
                    Realigned exterior lights for profile {{ active_profile }}
                    by re-triggering {{ corrective_automation }}.
  - id: exterior_led_monthly_effect
    alias: 'LED: Monthly Effect Scheduler'
    description: >
      Sets seasonal/holiday effects on exterior LED strip.
    mode: single
    trigger:
      - platform: time
        at: '00:00:01'
      - platform: homeassistant
        event: start
      - platform: state
        entity_id: light.permanent_outdoor_lights
        from: 'unavailable'
      - platform: state
        entity_id: light.permanent_outdoor_lights
        from: 'unknown'
    variables:
      current_month: '{{ now().month }}'
      monthly_configs:
        1:
          scene: scene.lighting_led_effect_january
          effect: LED-January
        2:
          scene: scene.lighting_led_effect_february
          effect: LED-February
        3:
          scene: scene.lighting_led_effect_march
          effect: LED-March
        4:
          scene: scene.lighting_led_effect_april
          effect: LED-April
        5:
          scene: scene.lighting_led_effect_patriotic
          effect: BSMT-Patriotic
        6:
          scene: scene.lighting_led_effect_patriotic
          effect: BSMT-Patriotic
        7:
          scene: scene.lighting_led_effect_patriotic
          effect: BSMT-Patriotic
        8:
          scene: scene.lighting_led_effect_august
          effect: LED-August
        9:
          scene: scene.lighting_led_effect_august
          effect: LED-August
        10:
          scene: scene.lighting_led_effect_halloween
          effect: Halloween
        11:
          scene: scene.lighting_led_effect_thanksgiving
          effect: LED-Thanksgiving
        12:
          scene: scene.lighting_led_effect_christmas
          effect: Christmas
      target_config: '{{ monthly_configs.get(current_month, {}) }}'
      target_scene: '{{ target_config.get("scene") }}'
      target_effect: '{{ target_config.get("effect") }}'
      permanent_light: light.permanent_outdoor_lights
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
    action:
      - alias: 'Wait for permanent outdoor lights to come online with effect list'
        wait_for_trigger:
          - platform: template
            value_template: >-
              {% set state = states(permanent_light) %}
              {% set available_effects = state_attr(permanent_light, 'effect_list') or [] %}
              {{ state not in ['unknown', 'unavailable', None] and target_effect in available_effects }}
        timeout: '00:05:00'
        continue_on_timeout: true
      - alias: 'Apply monthly effect with retries'
        repeat:
          count: 6
          sequence:
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ target_effect not in [None, ''] }}"
                    - condition: template
                      value_template: >-
                        {% set state = states(permanent_light) %}
                        {% set available_effects = state_attr(permanent_light,'effect_list') or [] %}
                        {{ state not in ['unknown', 'unavailable', None] and target_effect in available_effects }}
                  sequence:
                    - if:
                        - condition: template
                          value_template: "{{ has_value(permanent_light) }}"
                      then:
                        - choose:
                            - conditions:
                                - condition: template
                                  value_template: "{{ target_scene is not none and target_scene != '' }}"
                              sequence:
                                - service: scene.turn_on
                                  target:
                                    entity_id: '{{ target_scene }}'
                                  continue_on_error: true
                        - service: light.turn_on
                          target:
                            entity_id: '{{ permanent_light }}'
                          data:
                            effect: '{{ target_effect }}'
                          continue_on_error: true
                        - wait_template: >-
                            {{ state_attr(permanent_light, 'effect') == target_effect }}
                          timeout: '00:00:20'
                          continue_on_timeout: true
                        - choose:
                            - conditions:
                                - condition: template
                                  value_template: >-
                                    {{ state_attr(permanent_light, 'effect') == target_effect }}
                              sequence:
                                - service: logbook.log
                                  data:
                                    name: LED Monthly Effect
                                    message: >-
                                      Applied {{ target_effect or "unknown effect" }} for month {{ current_month }}
                                      (scene {{ target_scene or "not used" }})
                                - stop: 'LED monthly effect applied'
                          default:
                            - service: logbook.log
                              data:
                                name: LED Monthly Effect
                                message: >-
                                  Retrying {{ target_effect or 'unknown effect' }} for month {{ current_month }} -- light online but effect not confirmed after command (attempt {{ repeat.index }})
                            - service: homeassistant.update_entity
                              target:
                                entity_id: '{{ permanent_light }}'
                              continue_on_error: true
                      else:
                        - service: logbook.log
                          data:
                            name: LED Monthly Effect
                            message: >-
                              Waiting for {{ target_effect or 'unknown effect' }} for month {{ current_month }} -- light unavailable (attempt {{ repeat.index }})
              default:
                - service: logbook.log
                  data:
                    name: LED Monthly Effect
                    message: >-
                      Waiting for {{ target_effect or 'unknown effect' }} for month {{ current_month }} -- effect missing from list (attempt {{ repeat.index }})
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ has_value(permanent_light) }}"
                      sequence:
                        - service: homeassistant.update_entity
                          target:
                            entity_id: '{{ permanent_light }}'
                          continue_on_error: true
            - delay: '00:00:10'
      - if:
          - condition: template
            value_template: >-
              {{ state_attr(permanent_light, 'effect') != target_effect }}
        then:
          - service: logbook.log
            data:
              name: LED Monthly Effect
              message: >-
                Skipped {{ target_effect or 'unknown effect' }} for month {{ current_month }} -- effect never confirmed after retries

  - id: humidor_plug_temp_control
    alias: 'Climate: Humidor Temperature Control'
    description: >
      Hysteresis control for humidor: ON >74°F, OFF <70°F.
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: sensor.hygrometer_humidor_temperature
        above: 74
        for: {minutes: 2}
      - platform: numeric_state
        entity_id: sensor.hygrometer_humidor_temperature
        below: 70
        for: {minutes: 1}
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
      - condition: template
        value_template: >-
          {% set temp = trigger.to_state.state | float(-999) %}
          {% set on = is_state('switch.plug_humidor','on') %}
          {{ (temp > 74 and not on) or (temp < 70 and on) }}
    action:
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: sensor.hygrometer_humidor_temperature
                above: 74
            sequence:
              - service: scene.turn_on
                target:
                  entity_id: scene.climate_humidor_cooling_on
              - service: logbook.log
                data:
                  name: Humidor Control
                  message: 'Cooling ON - Temperature: {{ states("sensor.hygrometer_humidor_temperature") }}°F - Humidity: {{ states("sensor.hygrometer_humidor_humidity") }}%'
          - conditions:
              - condition: numeric_state
                entity_id: sensor.hygrometer_humidor_temperature
                below: 70
            sequence:
              - service: scene.turn_on
                target:
                  entity_id: scene.climate_humidor_cooling_off
              - service: logbook.log
                data:
                  name: Humidor Control
                  message: 'Cooling OFF - Temperature: {{ states("sensor.hygrometer_humidor_temperature") }}°F - Humidity: {{ states("sensor.hygrometer_humidor_humidity") }}%'

  - id: burner_plugs_off_2300
    alias: 'Safety: Nightly Burner Plug Shutoff'
    description: >
      Safety shutoff for burner plugs at 11 PM daily.
    mode: single
    trigger:
      - platform: time
        at: '23:00:00'
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: binary_sensor.holiday_mode_active
            state: 'on'
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.safety_burner_plugs_off
        continue_on_error: true
      - service: persistent_notification.create
        data:
          title: 'Safety: Burner Plugs'
          message: 'All burner plugs turned off at 11 PM.'
          notification_id: nightly_burner_shutoff
      - service: logbook.log
        data:
          name: Safety Automation
          message: Nightly burner plug shutoff completed

  - id: reolink_warmup_on_start
    alias: 'Reolink: Warm Camera Streams at Startup'
    description: >
      Sequentially primes Reolink camera streams after Home Assistant restarts to avoid heavy simultaneous loads.
    mode: single
    trigger:
      - platform: homeassistant
        event: start
    variables:
      reolink_cameras:
        - camera.backyard_camera_fluent
        - camera.argus_pt_ultra_fluent
        - camera.garage_cam_fluent
      warmup_delay: '00:00:05'
    action:
      - repeat:
          for_each: "{{ reolink_cameras }}"
          sequence:
            - variables:
                camera_slug: "{{ repeat.item.split('.')[-1] }}"
            - service: camera.snapshot
              target:
                entity_id: "{{ repeat.item }}"
              data:
                filename: "/config/www/reolink_warmup/{{ camera_slug }}.jpg"
            - delay: "{{ warmup_delay }}"
      - service: homeassistant.update_entity
        target:
          entity_id:
            - binary_sensor.backyard_camera_motion
            - binary_sensor.argus_pt_ultra_motion
            - binary_sensor.garage_cam_motion
