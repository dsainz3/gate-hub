name: Seed HA Optimization Issues

on:
  workflow_dispatch:
    inputs:
      plan_path:
        description: Path to the Markdown plan
        required: true
        default: .github/seed/ha-issues.md
      project_id:
        description: Optional Project v2 ID (e.g., PVT_kwHOBOLd8c4BBFBV)
        required: false
        default: ''
      create_branches:
        description: Create branches listed in the plan
        required: false
        default: 'false'
      base_branch:
        description: Base branch for new branches
        required: false
        default: main
      dry_run:
        description: Only parse; no writes
        required: false
        default: 'false'

# GITHUB_TOKEN permissions only (your PAT is not used)
permissions:
  contents: write
  issues: write
  repository-projects: write

jobs:
  seed:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Seed issues from plan
        uses: actions/github-script@v7
        env:
          PLAN_PATH: ${{ github.event.inputs.plan_path }}
          PROJECT_ID: ${{ github.event.inputs.project_id }}
          CREATE_BRANCHES: ${{ github.event.inputs.create_branches }}
          BASE_BRANCH: ${{ github.event.inputs.base_branch }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            // NOTE: core, github, context are injected by actions/github-script

            const planPath        = process.env.PLAN_PATH || '.github/seed/ha-issues.md';
            const PROJECT_ID      = process.env.PROJECT_ID || '';
            const CREATE_BRANCHES = (process.env.CREATE_BRANCHES || 'false').toLowerCase() === 'true';
            const BASE_BRANCH     = process.env.BASE_BRANCH || 'main';
            const DRY_RUN         = (process.env.DRY_RUN || 'false').toLowerCase() === 'true';
            const { owner, repo } = context.repo;

            core.info(`Repo: ${owner}/${repo}`);
            core.info(`Plan: ${planPath}`);
            core.info(`Project ID: ${PROJECT_ID || '(none)'}`);
            core.info(`Create branches: ${CREATE_BRANCHES} (base: ${BASE_BRANCH})`);
            core.info(`Dry run: ${DRY_RUN}`);

            if (!fs.existsSync(planPath)) {
              core.setFailed(`Plan not found: ${planPath}`);
              process.exit(1);
            }
            const md = fs.readFileSync(planPath, 'utf8');

            // --- Parse the markdown into issue objects ---
            const blocks = md.split(/\n##\s+Issue:\s+/).slice(1);
            if (!blocks.length) {
              core.setFailed('No "## Issue:" blocks found in the plan.');
              process.exit(1);
            }

            const issues = blocks.map(block => {
              const [titleLine, ...restLines] = block.split('\n');
              const title = titleLine.trim();
              const rest = restLines.join('\n');

              const field = (name) => {
                const m = rest.match(new RegExp(`\\*\\*${name}:\\*\\*\\s*(.+)`));
                return m ? m[1].trim() : '';
              };

              let branch = field('Branch');
              branch = branch ? branch.replace(/`/g,'').trim() : '';

              const labelsLine = field('Labels');
              let labels = [];
              if (labelsLine) {
                const bt = [...labelsLine.mat]()
