name: Home Assistant - Config Check

'on':
  pull_request:
    branches:
      - main
    paths:
      - '**/*.yaml'
      - '**/*.yml'
      - '**/*.json'
      - 'dashboards/**'
      - 'packages/**'
      - 'custom_components/**'
      - 'configuration.yaml'
      - 'themes.yaml'
      - '.github/workflows/ha-config-check.yml'
  push:
    branches:
      - main
    paths:
      - '**/*.yaml'
      - '**/*.yml'
      - '**/*.json'
      - 'dashboards/**'
      - 'packages/**'
      - 'custom_components/**'
      - 'configuration.yaml'
      - 'themes.yaml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-config:
    name: Validate HA configuration
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare CI environment (use .ci/fakesecrets.yaml if available)
        shell: bash
        run: |
          set -euo pipefail
          cd "${{ github.workspace }}"

          # Ensure we start with a clean secrets file
          rm -f secrets.yaml

          if [ -f .ci/fakesecrets.yaml ]; then
            # Copy and ensure Unix line endings
            cat .ci/fakesecrets.yaml | tr -d '\r' > secrets.yaml
            echo "Using .ci/fakesecrets.yaml for CI (with Unix line endings)"
          elif [ -f fakesecrets.yaml ]; then
            cat fakesecrets.yaml | tr -d '\r' > secrets.yaml
            echo "Using fakesecrets.yaml for CI (with Unix line endings)"
          else
            echo "{}" > secrets.yaml
            echo "No fakesecrets.yaml found; using empty secrets.yaml"
          fi

          # Verify the file exists and is readable
          if [ ! -f secrets.yaml ] || [ ! -r secrets.yaml ]; then
            echo "Error: secrets.yaml is missing or not readable"
            exit 1
          fi

          # Create common include files if referenced but missing
          for f in automations.yaml scripts.yaml customize.yaml; do
            if grep -Rql "$f" configuration.yaml 2>/dev/null || grep -Rql "$f" . 2>/dev/null; then
              if [[ ! -f "$f" ]]; then
                echo '{}' > "$f"
              fi
            fi
          done

          # Ensure common secrets exist (add safe placeholders when missing)
          for key in recorder_include_entities; do
            # More robust check for existing secrets (handles different line endings and whitespace)
            if ! grep -P "^\s*${key}:" secrets.yaml >/dev/null 2>&1; then
              case "$key" in
                recorder_include_entities)
                  echo "recorder_include_entities: []" >> secrets.yaml
                  ;;
              esac
              echo "Added placeholder for $key to secrets.yaml"
            fi
          done

          echo "---- secrets.yaml (first 40 lines) ----"
          sed -n '1,40p' secrets.yaml || true

      - name: Pull Home Assistant container
        run: docker pull ghcr.io/home-assistant/home-assistant:stable

      - name: Run hass --script check_config (with full output)
        env:
          TZ: America/Chicago
        run: |
          set -o pipefail
          docker run --rm \
            -e TZ \
            -v "${{ github.workspace }}":/config \
            ghcr.io/home-assistant/home-assistant:stable \
            python -m homeassistant --config /config --script check_config | tee check_config.out

      - name: Upload diagnostics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ha-check-config-output
          path: check_config.out
