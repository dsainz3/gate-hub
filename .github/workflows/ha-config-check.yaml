name: Home Assistant - Config Check

on:
  pull_request:
    branches: [main]
    paths:
      - '**/*.yaml'
      - '**/*.yml'
      - '**/*.json'
      - 'dashboards/**'
      - 'packages/**'
      - 'custom_components/**'
      - 'configuration.yaml'
      - 'themes.yaml'
      - '.github/workflows/ha-config-check.yaml'
  push:
    branches: [main]
    paths:
      - '**/*.yaml'
      - '**/*.yml'
      - '**/*.json'
      - 'dashboards/**'
      - 'packages/**'
      - 'custom_components/**'
      - 'configuration.yaml'
      - 'themes.yaml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate HA Configuration
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper change detection

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install homeassistant pytest

      - name: Prepare Configuration Environment
        id: prepare-config
        shell: bash
        run: |
          set -euo pipefail
          cd "${{ github.workspace }}"

          # Verify .ci/fakesecrets.yaml exists and is readable
          if [ ! -f .ci/fakesecrets.yaml ] || [ ! -r .ci/fakesecrets.yaml ]; then
            echo "::error::.ci/fakesecrets.yaml is required but missing or not readable"
            echo "Please ensure .ci/fakesecrets.yaml exists and contains required secrets"
            exit 1
          fi

          # Clear any existing secrets file
          rm -f secrets.yaml

          # Copy fakesecrets with Unix line endings
          cat .ci/fakesecrets.yaml | tr -d '\r' > secrets.yaml
          echo "Using .ci/fakesecrets.yaml for CI testing"

          # Verify successful file creation
          if [ ! -f secrets.yaml ] || [ ! -r secrets.yaml ]; then
            echo "::error::Failed to create secrets.yaml"
            exit 1
          fi

          # Required secret keys
          REQUIRED_SECRETS=(
            "home_latitude"
            "home_longitude"
            "home_elevation"
            "home_timezone"
            "recorder_include_entities"
          )

          echo "Validating required secrets..."
          for key in "${REQUIRED_SECRETS[@]}"; do
            if ! grep -P "^\s*${key}:" secrets.yaml >/dev/null 2>&1; then
              echo "::error::Required secret '${key}' is missing from .ci/fakesecrets.yaml"
              exit 1
            fi
          done
          echo "All required secrets validated successfully"

          # Create empty files for optional includes
          for f in automations.yaml scripts.yaml customize.yaml; do
            if grep -Rql "$f" configuration.yaml 2>/dev/null || grep -Rql "$f" . 2>/dev/null; then
              if [[ ! -f "$f" ]]; then
                echo "{}" > "$f"
                echo "Created empty $f"
              fi
            fi
          done

          # List all YAML files for context
          echo "Configuration files:"
          find . -name "*.yaml" -not -path "*/\.*" -not -path "./node_modules/*" | sort

      - name: Run Config Check
        run: |
          echo "Running configuration check..."
          cp secrets.yaml /home/runner/work/gate-hub/gate-hub/secrets.yaml
          cd /home/runner/work/gate-hub/gate-hub
          hass --script check_config \
            --config . \
            --info all \
            --files \
            --secrets secrets.yaml

      - name: Run Integration Tests
        if: success()
        run: |
          echo "Running basic integration tests..."
          python -m pytest custom_components/*/test 2>/dev/null || echo "No integration tests found"

      - name: Cleanup
        if: always()
        run: |
          rm -f secrets.yaml
          echo "Cleanup completed"

      - name: Upload Config Check Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: config-check-results
          path: |
            home-assistant.log
            home-assistant_debug.log
          retention-days: 5
