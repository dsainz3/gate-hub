name: CI

'on':
  push:
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect relevant changes
    runs-on: ubuntu-latest
    outputs:
      run-ruff: ${{ steps.filter.outputs.lint }}
      run-precommit: ${{ steps.filter.outputs.precommit }}
      run-tests: ${{ steps.filter.outputs.tests }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Filter paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            lint:
              - '**/*.py'
              - '.pre-commit-config.yaml'
              - '.ruff.toml'
              - 'ruff.toml'
              - 'pyproject.toml'
              - 'poetry.lock'
            precommit:
              - '@lint'
              - '**/*.yaml'
              - '**/*.yml'
              - '**/*.json'
              - '.prettierrc*'
            tests:
              - '@lint'
              - 'tests/**'
              - 'custom_components/**'

  ruff:
    name: Ruff (lint + format check)
    needs: changes
    if: ${{ github.event_name == 'push' || needs.changes.outputs.run-ruff == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ruff check
        uses: astral-sh/ruff-action@v2
        with:
          version: '0.6.9'
          args: check . --output-format=github --force-exclude

      - name: Ruff format --check
        run: ruff format --check .

  precommit:
    name: pre-commit (YAML & HA tools)
    needs: changes
    if: ${{ github.event_name == 'push' || needs.changes.outputs.run-precommit == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            .pre-commit-config.yaml

      - name: Determine pre-commit scope
        id: precommit-args
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "args=--from-ref ${{ github.event.pull_request.base.sha }} --to-ref ${{ github.sha }}" >> "$GITHUB_OUTPUT"
          else
            echo "args=--all-files" >> "$GITHUB_OUTPUT"
          fi

      - name: Run pre-commit (non-Python hooks)
        uses: pre-commit/action@v3.0.1
        env:
          SKIP: ruff,ruff-format
        with:
          python-version: '3.12'
          extra_args: ${{ steps.precommit-args.outputs.args }}

  tests:
    name: Unit & smoke tests
    needs: changes
    if: ${{ github.event_name == 'push' || needs.changes.outputs.run-tests == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: pyproject.toml

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Cache Poetry downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Cache virtualenv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          poetry install --with dev --no-interaction --sync --no-root

      - name: Run pytest
        run: poetry run pytest
