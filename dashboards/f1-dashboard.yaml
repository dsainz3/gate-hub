title: F1 Race Center
views:
  - title: Race Weekend
    path: f1-race-weekend
    icon: mdi:flag-outline
    badges: []
    cards:
      - type: entities
        title: Quick Controls
        show_header_toggle: false
        entities:
          - entity: input_boolean.f1_automations_enabled
            name: Automations Enabled
          - entity: input_boolean.f1_race_mode
            name: Race Mode
          - entity: input_boolean.f1_test_mode
            name: Test Mode
          - type: call-service
            name: Lights Out Show
            icon: mdi:play-speed
            action_name: Run
            service: script.turn_on
            target:
              entity_id: script.f1_lights_out_sequence
          - type: call-service
            name: Chequered Flag Show
            icon: mdi:flag-checkered
            action_name: Run
            service: script.turn_on
            target:
              entity_id: script.f1_chequered_flag_show
          - type: call-service
            name: Reset Lights
            icon: mdi:restart
            action_name: Run
            service: script.turn_on
            target:
              entity_id: script.f1_stop_all_shows
          - type: call-service
            name: Refresh F1 Data
            icon: mdi:refresh-circle
            action_name: Update
            service: homeassistant.update_entity
            target:
              entity_id:
                - sensor.f1_next_race
                - sensor.f1_driver_standings
                - sensor.f1_constructor_standings
                - sensor.f1_weather

      - type: markdown
        title: Race Countdown
        content: |-
          {% set invalid = ['unknown', 'unavailable', '', None] %}
          {% set minutes = states('sensor.f1_lights_out_minutes_effective') | int(9999) %}
          {% set phase = states('sensor.f1_race_phase_label') %}
          {% set race = states('sensor.f1_next_race_name') %}
          {% set location = states('sensor.f1_next_race_location') %}
          {% set local_ts = states('sensor.f1_lights_out_local') %}
          {% set track_status = states('sensor.f1_track_status_label') %}
          {% if local_ts not in invalid %}
            {% set formatted = as_datetime(local_ts) | as_local | strftime('%A, %B %-d · %-I:%M %p %Z') %}
          {% else %}
            {% set formatted = 'TBD' %}
          {% endif %}
          <div style="padding:16px;border-radius:18px;background:var(--card-background-color);box-shadow:var(--ha-card-box-shadow);">
            <h2 style="margin:0 0 8px 0;font-size:1.6rem;">{{ race }} ({{ location }})</h2>
            <p style="margin:4px 0;color:var(--secondary-text-color);">Lights out: {{ formatted }}</p>
            <p style="margin:16px 0 0 0;font-size:3rem;font-weight:700;">T-{{ minutes }} min</p>
            <p style="margin:4px 0 0 0;font-weight:600;color:var(--primary-text-color);">Phase: {{ phase }}</p>
            <p style="margin:4px 0 0 0;color:var(--secondary-text-color);">Track status: {{ track_status }}</p>
          </div>

      - type: horizontal-stack
        cards:
          - type: tile
            entity: sensor.f1_lights_out_minutes_effective
            name: Lights Out (min)
            state_content: state
          - type: tile
            entity: sensor.f1_session_status
            name: Session Status
          - type: tile
            entity: binary_sensor.f1_is_race_live
            name: Live
          - type: tile
            entity: binary_sensor.f1_is_race_wrap
            name: Post Race

      - type: markdown
        title: Weekend Schedule
        content: |-
          {% set invalid = ['unknown', 'unavailable', '', None] %}
          {% set sessions = [
            ('Practice 1', state_attr('sensor.f1_next_race', 'first_practice_start_local')),
            ('Practice 2', state_attr('sensor.f1_next_race', 'second_practice_start_local')),
            ('Practice 3', state_attr('sensor.f1_next_race', 'third_practice_start_local')),
            ('Sprint Qualifying', state_attr('sensor.f1_next_race', 'sprint_qualifying_start_local')),
            ('Sprint', state_attr('sensor.f1_next_race', 'sprint_start_local')),
            ('Qualifying', state_attr('sensor.f1_next_race', 'qualifying_start_local')),
            ('Race', state_attr('sensor.f1_next_race', 'race_start_local'))
          ] %}
          <table style="width:100%;border-collapse:collapse;">
            <thead>
              <tr>
                <th style="text-align:left;padding:8px;border-bottom:1px solid var(--divider-color);">Session</th>
                <th style="text-align:left;padding:8px;border-bottom:1px solid var(--divider-color);">Local Time</th>
              </tr>
            </thead>
            <tbody>
              {% for label, ts in sessions %}
                {% if ts not in invalid %}
                  <tr>
                    <td style="padding:8px;border-bottom:1px solid var(--divider-color);">{{ label }}</td>
                    <td style="padding:8px;border-bottom:1px solid var(--divider-color);">{{ as_datetime(ts) | as_local | strftime('%a %b %-d · %-I:%M %p %Z') }}</td>
                  </tr>
                {% endif %}
              {% endfor %}
            </tbody>
          </table>

      - type: vertical-stack
        cards:
          - type: markdown
            title: Standings Snapshot
            content: |-
              {% set drivers = state_attr('sensor.f1_driver_standings', 'driver_standings') or [] %}
              {% set constructors = state_attr('sensor.f1_constructor_standings', 'constructor_standings') or [] %}
              <h3>Drivers</h3>
              {% if drivers %}
                <ol>
                  {% for entry in drivers[:5] %}
                    <li>{{ entry.Driver.code }} – {{ entry.points }} pts</li>
                  {% endfor %}
                </ol>
              {% else %}
                <p style="color:var(--secondary-text-color);">Driver standings unavailable.</p>
              {% endif %}
              <h3>Constructors</h3>
              {% if constructors %}
                <ol>
                  {% for entry in constructors[:5] %}
                    <li>{{ entry.Constructor.name }} – {{ entry.points }} pts</li>
                  {% endfor %}
                </ol>
              {% else %}
                <p style="color:var(--secondary-text-color);">Constructor standings unavailable.</p>
              {% endif %}
          - type: entities
            title: Race Telemetry
            entities:
              - entity: sensor.f1_track_weather
                name: Track Weather (Live)
              - entity: sensor.f1_weather
                name: Weekend Weather
              - entity: sensor.f1_race_lap_count
                name: Race Lap Count
              - entity: binary_sensor.f1_safety_car
                name: Safety Car Active
              - entity: input_text.f1_last_flag_message
                name: Last Flag Message

      - type: markdown
        title: Automation States
        content: |-
          | Flag | Value |
          | --- | --- |
          | Automations enabled | {{ states('input_boolean.f1_automations_enabled') }} |
          | Race mode | {{ states('input_boolean.f1_race_mode') }} |
          | Test mode | {{ states('input_boolean.f1_test_mode') }} |
          | Pre-race window | {{ states('binary_sensor.f1_is_pre_race_window') }} |
          | Race live | {{ states('binary_sensor.f1_is_race_live') }} |
          | Race wrap | {{ states('binary_sensor.f1_is_race_wrap') }} |
