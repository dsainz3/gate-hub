title: Huskers Dashboard
theme: Huskers Cream
views:
  - title: Game Day
    path: huskers
    icon: mdi:football-helmet
    badges: []
    cards:
      - type: custom:teamtracker-card
        entity: sensor.husker_team
        name: Huskers Snapshot

      - type: entities
        title: 'ðŸ”„ Quick Actions'
        show_header_toggle: false
        entities:
          - type: call-service
            name: Refresh Game Data
            icon: mdi:refresh-circle
            action_name: Update
            service: homeassistant.update_entity
            target:
              entity_id:
                - sensor.husker_team
                - sensor.espn_cfb_scoreboard
                - sensor.espn_nebraska_schedule

      - type: horizontal-stack
        cards:
          - type: button
            name: Start 30s Chase
            icon: mdi:play-speed
            tap_action:
              action: call-service
              service: script.turn_on
              target:
                entity_id: script.huskers_chase30_start
          - type: button
            name: Hail Burst
            icon: mdi:music-note
            tap_action:
              action: call-service
              service: script.turn_on
              target:
                entity_id: script.huskers_hail_burst_8s
          - type: button
            name: All Scarlet
            icon: mdi:palette
            tap_action:
              action: call-service
              service: scene.turn_on
              target:
                entity_id: scene.huskers_seven_all_scarlet
      - type: vertical-stack
        cards:
          - type: markdown
            title: Game Essentials
            content: |-
              {% set event = state_attr('sensor.husker_team', 'event_name') %}
              {% set kickoff_iso = state_attr('sensor.husker_team', 'date') %}
              {% set kickoff_local = '' %}
              {% if kickoff_iso not in [None, '', 'unknown', 'unavailable'] %}
                {% set ts = as_timestamp(kickoff_iso, default=None) %}
                {% if ts is not none %}
                  {% set kickoff_local = ts | timestamp_custom('%A, %B %-d Â· %-I:%M %p %Z', True) %}
                {% endif %}
              {% endif %}
              {% set kickoff_in = state_attr('sensor.husker_team', 'kickoff_in') %}
              {% set venue = state_attr('sensor.husker_team', 'venue') %}
              {% set location = state_attr('sensor.husker_team', 'location') %}
              {% set tv = state_attr('sensor.husker_team', 'tv_network') %}
              {% set odds = state_attr('sensor.husker_team', 'odds') %}
              {% set overunder = state_attr('sensor.husker_team', 'overunder') %}
              ### Kickoff & Broadcast
              - **Event:** {{ event or 'Nebraska Football' }}
              - **Kickoff:** {{ kickoff_local or 'TBA' }} ({{ kickoff_in or '-' }})
              - **Venue:** {{ venue or 'TBA' }} â€” {{ location or 'Location TBA' }}
              - **Watch:** {{ tv or 'Network TBA' }}
              - **Line:** {{ odds or 'Line TBA' }} | O/U {{ overunder or 'TBA' }}
          - type: conditional
            conditions:
              - entity: binary_sensor.huskers_tailgate_window
                state: 'on'
            card:
              type: markdown
              title: Tailgate Countdown
              content: |-
                {% set invalid = ['unknown', 'unavailable', '', 'None', None] %}
                {% set message = states('sensor.huskers_tailgate_countdown') %}
                {% set kickoff = states('sensor.huskers_kickoff_time_ct') %}
                {% if message in invalid %}
                  Countdown unavailable
                {% else %}
                  ### {{ message }}
                  Kickoff: {{ kickoff if kickoff not in invalid else 'TBA' }}
                {% endif %}
      - type: conditional
        conditions:
          - entity: binary_sensor.huskers_is_live_espn
            state: 'on'
        card:
          type: markdown
          title: In-Game Situation
          content: |-
            {% set invalid = ['unknown', 'unavailable', '', 'None', None, 'N/A'] %}
            {% set down_distance = states('sensor.huskers_down_distance') %}
            {% set last_play = states('sensor.huskers_last_play') %}
            {% set possession = states('sensor.huskers_possession') %}
            {% set team_timeouts = states('sensor.huskers_team_timeouts') %}
            {% set opp_timeouts = states('sensor.huskers_opponent_timeouts') %}
            {% set win_prob = states('sensor.huskers_win_probability') %}
            {% set opp_win_prob = states('sensor.huskers_opponent_win_probability') %}
            {% set win_prob_val = (win_prob | float(0)) if win_prob not in invalid else none %}
            {% set opp_win_prob_val = (opp_win_prob | float(0)) if opp_win_prob not in invalid else none %}
            {% set clock = state_attr('sensor.husker_team', 'clock') %}
            {% set quarter = state_attr('sensor.husker_team', 'quarter') %}
            {% set drive = state_attr('sensor.husker_team', 'drive_description') or state_attr('sensor.husker_team', 'drive_text') %}
            {% set ball_spot = state_attr('sensor.husker_team', 'yard_line_text') or state_attr('sensor.husker_team', 'yard_line') %}
            ### Situation Snapshot
            - **Clock:** {{ clock if clock not in invalid else '--:--' }} | Q{{ quarter if quarter not in invalid else '-' }}
            - **Down & Distance:** {{ down_distance if down_distance not in invalid else 'TBD' }}
            - **Ball Spot:** {{ ball_spot if ball_spot not in invalid else 'TBD' }}
            - **Possession:** {{ possession if possession not in invalid else 'Unknown' }}
            - **Last Play:** {{ last_play if last_play not in invalid else 'Waiting for the next play...' }}
            {% if drive not in invalid %}
            - **Current Drive:** {{ drive }}
            {% endif %}
            - **Timeouts:** NU {{ team_timeouts if team_timeouts not in invalid else '-' }} | Opp {{ opp_timeouts if opp_timeouts not in invalid else '-' }}
            {% if win_prob_val is not none and opp_win_prob_val is not none %}
            - **Win Prob:** NU {{ '{:.1f}'.format(win_prob_val) }}% | Opp {{ '{:.1f}'.format(opp_win_prob_val) }}%
            {% endif %}
      - type: markdown
        title: Hype Message
        content: |-
          ### GO BIG RED!
          {{ states('sensor.huskers_hype_message') }}
  - title: Team & Data
    path: huskers-team-data
    icon: mdi:chart-box
    badges: []
    cards:
      - type: grid
        columns: 2
        square: false
        cards:
          - type: markdown
            title: Huskers Profile
            content: |-
              {% set rows = [
                ('Name', state_attr('sensor.husker_team', 'team_long_name') or 'Nebraska Cornhuskers'),
                ('Abbreviation', state_attr('sensor.husker_team', 'team_abbr') or 'NEB'),
                ('Team ID', state_attr('sensor.husker_team', 'team_id') or '158'),
                ('Conference', state_attr('sensor.husker_team', 'team_conference_id') or 'Big Ten'),
                ('Record', state_attr('sensor.husker_team', 'team_record') or 'TBA'),
                ('Rank', state_attr('sensor.husker_team', 'team_rank') or 'Unranked'),
                ('Timeouts', state_attr('sensor.husker_team', 'team_timeouts') if state_attr('sensor.husker_team', 'team_timeouts') is not none else 'TBA'),
                ('Winner Flag', state_attr('sensor.husker_team', 'team_winner') or 'â€”'),
                ('Website', state_attr('sensor.husker_team', 'team_url') or 'https://huskers.com')
              ] %}
              {% set raw_colors = state_attr('sensor.husker_team', 'team_colors') %}
              {% set primary = state_attr('sensor.husker_team', 'team_color_primary') %}
              {% set secondary = state_attr('sensor.husker_team', 'team_color_secondary') %}
              {% set ns = namespace(colors=[]) %}
              {% for candidate in [primary, secondary] %}
                {% if candidate %}
                  {% set normalized = candidate if candidate.startswith('#') else '#' ~ candidate %}
                  {% if normalized not in ns.colors %}
                    {% set ns.colors = ns.colors + [normalized] %}
                  {% endif %}
                {% endif %}
              {% endfor %}
              {% if raw_colors %}
                {% if raw_colors is string %}
                  {% set color_list = raw_colors.split(',') %}
                {% else %}
                  {% set color_list = raw_colors %}
                {% endif %}
                {% for candidate in color_list %}
                  {% set cleaned = candidate | trim %}
                  {% if cleaned %}
                    {% set normalized = cleaned if cleaned.startswith('#') else '#' ~ cleaned %}
                    {% if normalized not in ns.colors %}
                      {% set ns.colors = ns.colors + [normalized] %}
                    {% endif %}
                  {% endif %}
                {% endfor %}
              {% endif %}
              {% if ns.colors | length == 0 %}
                {% set ns.colors = ['#E41C38', '#FDF3E7'] %}
              {% endif %}
              <table style="width:100%;border-collapse:collapse;">
              {% for label, value in rows %}
                <tr>
                  <th style="text-align:left;padding:4px 0;font-weight:600;color:var(--secondary-text-color);">{{ label }}</th>
                  <td style="text-align:right;padding:4px 0;color:var(--primary-text-color);">{{ value }}</td>
                </tr>
              {% endfor %}
              </table>
              {% if ns.colors %}
              {% set chips = [] %}
              {% for swatch in ns.colors %}
                {% set chips = chips + ['<div style="display:flex;align-items:center;gap:6px;">'
                  ~ '<span style="display:inline-block;width:20px;height:20px;border-radius:4px;border:1px solid rgba(0,0,0,0.2);background:'
                  ~ swatch ~ ';"></span><span>' ~ swatch ~ '</span></div>'] %}
              {% endfor %}
              {{ '<div style="margin-top:12px;">'
                 ~ '<p style="margin:0 0 6px 0;font-weight:600;color:var(--secondary-text-color);">Team Colors</p>'
                 ~ '<div style="display:flex;flex-direction:column;gap:6px;">'
                 ~ (chips | join(''))
                 ~ '</div></div>' }}
              {% endif %}
          - type: markdown
            title: Opponent Profile
            content: |-
              {% set rows = [
                ('Name', state_attr('sensor.husker_team', 'opponent_long_name') or 'Opponent'),
                ('Abbreviation', state_attr('sensor.husker_team', 'opponent_abbr') or '-'),
                ('Team ID', state_attr('sensor.husker_team', 'opponent_id') or '-'),
                ('Conference', state_attr('sensor.husker_team', 'opponent_conference_id') or '-'),
                ('Record', state_attr('sensor.husker_team', 'opponent_record') or 'TBA'),
                ('Rank', state_attr('sensor.husker_team', 'opponent_rank') or 'Unranked'),
                ('Timeouts', state_attr('sensor.husker_team', 'opponent_timeouts') if state_attr('sensor.husker_team', 'opponent_timeouts') is not none else 'TBA'),
                ('Winner Flag', state_attr('sensor.husker_team', 'opponent_winner') or 'â€”'),
                ('Website', state_attr('sensor.husker_team', 'opponent_url') or '#')
              ] %}
              {% set raw_colors = state_attr('sensor.husker_team', 'opponent_colors') %}
              {% set primary = state_attr('sensor.husker_team', 'opponent_color_primary') %}
              {% set secondary = state_attr('sensor.husker_team', 'opponent_color_secondary') %}
              {% set ns = namespace(colors=[]) %}
              {% for candidate in [primary, secondary] %}
                {% if candidate %}
                  {% set normalized = candidate if candidate.startswith('#') else '#' ~ candidate %}
                  {% if normalized not in ns.colors %}
                    {% set ns.colors = ns.colors + [normalized] %}
                  {% endif %}
                {% endif %}
              {% endfor %}
              {% if raw_colors %}
                {% if raw_colors is string %}
                  {% set color_list = raw_colors.split(',') %}
                {% else %}
                  {% set color_list = raw_colors %}
                {% endif %}
                {% for candidate in color_list %}
                  {% set cleaned = candidate | trim %}
                  {% if cleaned %}
                    {% set normalized = cleaned if cleaned.startswith('#') else '#' ~ cleaned %}
                    {% if normalized not in ns.colors %}
                      {% set ns.colors = ns.colors + [normalized] %}
                    {% endif %}
                  {% endif %}
                {% endfor %}
              {% endif %}
              <table style="width:100%;border-collapse:collapse;">
              {% for label, value in rows %}
                <tr>
                  <th style="text-align:left;padding:4px 0;font-weight:600;color:var(--secondary-text-color);">{{ label }}</th>
                  <td style="text-align:right;padding:4px 0;color:var(--primary-text-color);">{{ value }}</td>
                </tr>
              {% endfor %}
              </table>
              {% if ns.colors %}
              {% set chips = [] %}
              {% for swatch in ns.colors %}
                {% set chips = chips + ['<div style="display:flex;align-items:center;gap:6px;">'
                  ~ '<span style="display:inline-block;width:20px;height:20px;border-radius:4px;border:1px solid rgba(0,0,0,0.2);background:'
                  ~ swatch ~ ';"></span><span>' ~ swatch ~ '</span></div>'] %}
              {% endfor %}
              {{ '<div style="margin-top:12px;">'
                 ~ '<p style="margin:0 0 6px 0;font-weight:600;color:var(--secondary-text-color);">Team Colors</p>'
                 ~ '<div style="display:flex;flex-direction:column;gap:6px;">'
                 ~ (chips | join(''))
                 ~ '</div></div>' }}
              {% endif %}
          - type: markdown
            title: League & API
            content: |-
              {% set rows = [
                ('Sport', (state_attr('sensor.husker_team', 'sport') or 'Football') ~ ' (' ~ (state_attr('sensor.husker_team', 'sport_path') or 'college-football') ~ ')'),
                ('League', (state_attr('sensor.husker_team', 'league') or 'NCAAF') ~ ' (' ~ (state_attr('sensor.husker_team', 'league_path') or 'college-football') ~ ')'),
                ('Season', state_attr('sensor.husker_team', 'season') or 'Current'),
                ('API Status', state_attr('sensor.husker_team', 'api_message') or 'OK'),
                ('Last Update', state_attr('sensor.husker_team', 'last_update') or '-'),
                ('Rapid Refresh', 'Yes' if state_attr('sensor.husker_team', 'private_fast_refresh') else 'No'),
                ('API URL', state_attr('sensor.husker_team', 'api_url') or 'n/a')
              ] %}
              <table style="width:100%;border-collapse:collapse;">
              {% for label, value in rows %}
                <tr>
                  <th style="text-align:left;padding:4px 0;font-weight:600;color:var(--secondary-text-color);">{{ label }}</th>
                  <td style="text-align:right;padding:4px 0;color:var(--primary-text-color);">{{ value }}</td>
                </tr>
              {% endfor %}
              </table>
      - type: markdown
        title: Series Summary
        content: |-
          {{ state_attr('sensor.husker_team', 'series_summary') or 'Series history will appear here.' }}
      - type: entities
        title: Raw Sensor Reference
        show_header_toggle: false
        entities:
          - entity: sensor.husker_team
            name: TeamTracker Raw Sensor
            secondary_info: last-changed
          - type: attribute
            entity: sensor.husker_team
            attribute: team_score
          - type: attribute
            entity: sensor.husker_team
            attribute: opponent_score
          - type: attribute
            entity: sensor.husker_team
            attribute: team_win_probability
          - type: attribute
            entity: sensor.husker_team
            attribute: opponent_win_probability
          - type: attribute
            entity: sensor.husker_team
            attribute: team_timeouts
          - type: attribute
            entity: sensor.husker_team
            attribute: opponent_timeouts
          - type: attribute
            entity: sensor.husker_team
            attribute: team_winner
          - type: attribute
            entity: sensor.husker_team
            attribute: opponent_winner
          - type: attribute
            entity: sensor.husker_team
            attribute: api_message
          - type: attribute
            entity: sensor.husker_team
            attribute: api_url
          - type: attribute
            entity: sensor.husker_team
            attribute: last_update
          - type: attribute
            entity: sensor.husker_team
            attribute: private_fast_refresh
  - title: Lighting & Scenes
    path: huskers-lighting
    icon: mdi:lightbulb-group
    badges: []
    cards:
      - type: markdown
        title: Huskers Lighting Controls
        content: |-
          ### Husker Lighting Control Center
          Use these automations and scenes to set the mood around the house for every Huskers moment.
          - **Automations** handle the daily schedule so lighting always matches the time of day.
          - **Scenes** instantly trigger game day looks like Scarlet, Chase, or Burst.
          Tap any item below to enable or activate it.
      - type: entities
        title: Lighting Automations
        show_header_toggle: false
        entities:
          - entity: automation.evening_lights_at_sunset
            secondary_info: last-triggered
          - entity: automation.lighting_exterior_front_garage_on_sunset
            secondary_info: last-triggered
          - entity: automation.lighting_night_mode_at_midnight
            secondary_info: last-triggered
          - entity: automation.early_morning_lights_03_30
            secondary_info: last-triggered
          - entity: automation.interior_lights_off_15_minutes_after_sunrise
            secondary_info: last-triggered
          - entity: automation.lighting_morning_lights_off_sunrise
            secondary_info: last-triggered
          - entity: automation.exterior_led_monthly_effect
            secondary_info: last-triggered
      - type: entities
        title: Huskers Scenes
        show_header_toggle: false
        entities:
          - scene.huskers_seven_all_scarlet
          - scene.huskers_before_chase
          - scene.huskers_before_burst
          - scene.lighting_evening_sunset_interior
          - scene.lighting_evening_sunset_exterior
          - scene.lighting_night_mode
          - scene.lighting_early_morning_gentle_wake
          - scene.lighting_morning_interior_off
          - scene.lighting_morning_exterior_off
          - scene.lighting_led_effect_january
          - scene.lighting_led_effect_february
          - scene.lighting_led_effect_march
          - scene.lighting_led_effect_april
          - scene.lighting_led_effect_patriotic
          - scene.lighting_led_effect_august
          - scene.lighting_led_effect_halloween
          - scene.lighting_led_effect_thanksgiving
          - scene.lighting_led_effect_christmas
      - type: grid
        title: Lighting Controls
        columns: 3
        square: false
        cards:
          - type: light
            entity: light.sunroom_light
            name: Sunroom
          - type: light
            entity: light.diningroom_light
            name: Dining Room
          - type: light
            entity: light.livingroom_light
            name: Living Room
          - type: light
            entity: light.theater_lights
            name: Theater
          - type: light
            entity: light.front_porch_lights
            name: Front Porch
          - type: light
            entity: light.light_garage_left
            name: Garage Left
          - type: light
            entity: light.light_garage_center
            name: Garage Center
          - type: light
            entity: light.light_garage_right
            name: Garage Right
          - type: light
            entity: light.permanent_outdoor_lights
            name: Permanent Outdoor
  - title: Ops Console
    path: huskers-ops
    icon: mdi:clipboard-text-clock
    badges: []
    cards:
      - type: glance
        title: Game Snapshot
        columns: 3
        entities:
          - entity: sensor.huskers_game_status_espn
            name: Status
          - entity: sensor.huskers_our_score_effective
            name: NU Score
          - entity: input_number.huskers_opponent_score_manual
            name: Opp Score
          - entity: input_text.huskers_last_score
            name: Last Score
          - entity: sensor.huskers_kickoff_in_effective
            name: Kickoff (min)
          - entity: binary_sensor.huskers_is_live_espn
            name: Live
          - entity: binary_sensor.huskers_is_postgame_espn
            name: Postgame
      - type: entities
        title: Game Mode & Automations
        show_header_toggle: false
        entities:
          - input_boolean.huskers_automations_enabled
          - input_boolean.huskers_game_mode
          - input_boolean.huskers_test_mode
          - type: section
            label: Huskers Automations
          - automation.huskers_enable_game_mode_window
          - automation.huskers_disable_game_mode_window
          - automation.huskers_showtime_at_t_20
          - automation.huskers_td_burst_on_score
          - automation.huskers_postgame_cleanup
      - type: entities
        title: Lighting & Shows
        show_header_toggle: false
        entities:
          - group.huskers_eight_lights
          - entity: light.permanent_outdoor_lights
            name: Permanent Outdoor LEDs
            secondary_info: last-changed
          - type: attribute
            entity: light.permanent_outdoor_lights
            attribute: effect
            name: Permanent LED Effect
          - light.light_theater_left
          - light.light_theater_right
          - light.light_front_left
          - light.light_front_right
          - light.light_garage_left
          - light.light_garage_center
          - light.light_garage_right
          - light.light_office
          - type: section
            label: Huskers Show Scripts
          - script.huskers_chase30_start
          - script.huskers_chase30_stop
          - script.huskers_chase_speed_start
          - script.huskers_chase_speed_stop
          - script.huskers_hail_burst_8s
      - type: entities
        title: Score & State Inputs
        show_header_toggle: false
        entities:
          - input_number.huskers_our_score
          - input_number.huskers_our_score_manual
          - input_number.huskers_opponent_score_manual
          - input_text.huskers_last_score
          - sensor.huskers_kickoff_in_2
          - sensor.huskers_kickoff_in_effective
          - sensor.huskers_game_status_espn
      - type: logbook
        title: Huskers Activity Log
        entities:
          - automation.huskers_enable_game_mode_window
          - automation.huskers_disable_game_mode_window
          - automation.huskers_showtime_at_t_20
          - automation.huskers_td_burst_on_score
          - automation.huskers_postgame_cleanup
          - script.huskers_chase30_start
          - script.huskers_chase_speed_start
          - script.huskers_hail_burst_8s
          - group.huskers_eight_lights
        hours_to_show: 12
