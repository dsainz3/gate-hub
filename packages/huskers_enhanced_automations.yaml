# packages/huskers_enhanced_automations.yaml
# Enhanced automations using comprehensive CFBD data

input_boolean:
  huskers_effects_enabled:
    name: Huskers Effects Enabled
    icon: mdi:lightbulb-group
    initial: true

  huskers_reverse_direction:
    name: Reverse Light Direction
    icon: mdi:swap-horizontal
    initial: false

  huskers_game_mode:
    name: Game Mode Active
    icon: mdi:football
    initial: true

  huskers_test_mode:
    name: Test Mode (Override Time Checks)
    icon: mdi:test-tube
    initial: false

  huskers_victory_mode:
    name: Victory Celebration Mode
    icon: mdi:trophy
    initial: false

input_number:
  huskers_global_brightness:
    name: Global Light Brightness
    icon: mdi:brightness-6
    min: 10
    max: 255
    step: 5
    mode: slider
    initial: 255
    unit_of_measurement: brightness

  huskers_celebration_intensity:
    name: Celebration Intensity (1-10)
    icon: mdi:emoticon-excited
    min: 1
    max: 10
    step: 1
    mode: slider
    initial: 7

automation:
  # ===============================
  # PREGAME AUTOMATIONS
  # ===============================

  - id: huskers_pregame_atmosphere_30min
    alias: 'Huskers: Pregame Atmosphere (30 min before)'
    description: 'Creates pregame atmosphere 30 minutes before kickoff'
    initial_state: true
    mode: single
    trigger:
      - platform: template
        value_template: >-
          {% set next_game = states('sensor.huskers_next_game') %}
          {% if next_game != 'No upcoming games' and next_game != 'unknown' %}
            {% set kickoff = state_attr('sensor.huskers_next_game', 'kickoff_time') %}
            {% if kickoff and kickoff != 'TBD' and kickoff != 'None' %}
              {% set ko_ts = as_timestamp(kickoff) %}
              {% set now_ts = now().timestamp() %}
              {% set diff_min = ((ko_ts - now_ts) / 60) | round(0) %}
              {{ diff_min <= 30 and diff_min > 25 }}
            {% else %}false{% endif %}
          {% else %}false{% endif %}
        for: { seconds: 10 }
    condition:
      - condition: state
        entity_id: input_boolean.huskers_automations_enabled
        state: 'on'
      - condition: state
        entity_id: input_boolean.huskers_game_mode
        state: 'on'
      - condition: state
        entity_id: input_boolean.huskers_effects_enabled
        state: 'on'
      - condition: or
        conditions:
          - condition: state
            entity_id: binary_sensor.huskers_is_pregame
            state: 'on'
          - condition: state
            entity_id: input_boolean.huskers_test_mode
            state: 'on'
    action:
      - service: script.turn_on
        target: { entity_id: script.huskers_chase_speed_start }
      - service: notify.persistent_notification
        data:
          title: '🏈 Huskers Pregame!'
          message: >-
            Pregame atmosphere activated!
            {{ state_attr('sensor.huskers_next_game', 'opponent') }} in 30 minutes!
            Go Big Red!
      - service: logbook.log
        data:
          name: Huskers Automation
          message: 'Pregame atmosphere started (T-30 min)'

  - id: huskers_pregame_hype_10min
    alias: 'Huskers: Pregame Hype (10 min before)'
    description: 'Intensifies atmosphere 10 minutes before kickoff'
    initial_state: true
    mode: single
    trigger:
      - platform: template
        value_template: >-
          {% set next_game = states('sensor.huskers_next_game') %}
          {% if next_game != 'No upcoming games' and next_game != 'unknown' %}
            {% set kickoff = state_attr('sensor.huskers_next_game', 'kickoff_time') %}
            {% if kickoff and kickoff != 'TBD' and kickoff != 'None' %}
              {% set ko_ts = as_timestamp(kickoff) %}
              {% set now_ts = now().timestamp() %}
              {% set diff_min = ((ko_ts - now_ts) / 60) | round(0) %}
              {{ diff_min <= 10 and diff_min > 8 }}
            {% else %}false{% endif %}
          {% else %}false{% endif %}
        for: { seconds: 10 }
    condition:
      - condition: state
        entity_id: input_boolean.huskers_automations_enabled
        state: 'on'
      - condition: state
        entity_id: input_boolean.huskers_game_mode
        state: 'on'
      - condition: state
        entity_id: input_boolean.huskers_effects_enabled
        state: 'on'
    action:
      - service: script.turn_on
        target: { entity_id: script.huskers_chase30_start }
      - delay: { seconds: 5 }
      - service: script.turn_on
        target: { entity_id: script.huskers_hail_burst_8s }
      - service: notify.persistent_notification
        data:
          title: '🔥 T-10 Minutes!'
          message: 'Game time approaching! Hype level: MAXIMUM!'
      - service: logbook.log
        data:
          name: Huskers Automation
          message: 'Pregame hype sequence activated (T-10 min)'

  - id: huskers_kickoff_showtime
    alias: 'Huskers: Kickoff Showtime'
    description: 'Special light sequence at kickoff time'
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.huskers_is_live
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.huskers_automations_enabled
        state: 'on'
      - condition: state
        entity_id: input_boolean.huskers_game_mode
        state: 'on'
      - condition: state
        entity_id: input_boolean.huskers_effects_enabled
        state: 'on'
    action:
      - service: script.turn_on
        target: { entity_id: script.huskers_hail_burst_8s }
      - delay: { seconds: 8 }
      - service: scene.turn_on
        target: { entity_id: scene.huskers_seven_all_scarlet }
      - delay: { seconds: 3 }
      - service: script.turn_on
        target: { entity_id: script.huskers_chase_speed_start }
      - service: notify.persistent_notification
        data:
          title: '🏈 GAME TIME!'
          message: "Kickoff! Let's go Huskers!"

  # ===============================
  # LIVE GAME AUTOMATIONS
  # ===============================

  - id: huskers_touchdown_celebration_enhanced
    alias: 'Huskers: Enhanced Touchdown Celebration'
    description: 'Multi-stage touchdown celebration with intensity scaling'
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.huskers_live_game_status
        attribute: home_score
      - platform: state
        entity_id: sensor.huskers_live_game_status
        attribute: away_score
    condition:
      - condition: state
        entity_id: input_boolean.huskers_automations_enabled
        state: 'on'
      - condition: state
        entity_id: input_boolean.huskers_game_mode
        state: 'on'
      - condition: state
        entity_id: input_boolean.huskers_effects_enabled
        state: 'on'
      - condition: state
        entity_id: binary_sensor.huskers_is_live
        state: 'on'
      - condition: template
        value_template: >-
          {% set home_team = state_attr('sensor.huskers_live_game_status', 'home_team') %}
          {% set away_team = state_attr('sensor.huskers_live_game_status', 'away_team') %}
          {% set nebraska_is_home = (home_team == 'Nebraska') %}
          {% if nebraska_is_home %}
            {% set old_score = trigger.from_state.state | int(0) if trigger.from_state else 0 %}
            {% set new_score = trigger.to_state.state | int(0) if trigger.to_state else 0 %}
            {{ new_score > old_score and trigger.entity_id.endswith('home_score') }}
          {% else %}
            {% set old_score = trigger.from_state.state | int(0) if trigger.from_state else 0 %}
            {% set new_score = trigger.to_state.state | int(0) if trigger.to_state else 0 %}
            {{ new_score > old_score and trigger.entity_id.endswith('away_score') }}
          {% endif %}
    action:
      - variables:
          score_diff: >-
            {% set old_score = trigger.from_state.state | int(0) %}
            {% set new_score = trigger.to_state.state | int(0) %}
            {{ new_score - old_score }}
          celebration_level: >-
            {% set intensity = states('input_number.huskers_celebration_intensity') | int(7) %}
            {% set old_score = trigger.from_state.state | int(0) %}
            {% set new_score = trigger.to_state.state | int(0) %}
            {% set diff = new_score - old_score %}
            {% if diff >= 6 %}{{ intensity }}{% elif diff == 3 %}{{ (intensity * 0.6) | round(0) }}{% else %}{{ (intensity * 0.3) | round(0) }}{% endif %}

      # Phase 1: Immediate celebration
      - service: script.turn_on
        target: { entity_id: script.huskers_hail_burst_8s }

      # Phase 2: Extended celebration for touchdowns
      - choose:
          - conditions:
              - condition: template
                value_template: '{{ score_diff | int >= 6 }}'
            sequence:
              - delay: { seconds: 8 }
              - service: script.turn_on
                target: { entity_id: script.huskers_chase30_start }
              - delay: { seconds: 15 }
              - service: script.turn_on
                target: { entity_id: script.huskers_hail_burst_8s }
              - delay: { seconds: 8 }
              - service: scene.turn_on
                target: { entity_id: scene.huskers_seven_all_scarlet }
              - service: notify.persistent_notification
                data:
                  title: '🔥 TOUCHDOWN NEBRASKA! 🔥'
                  message: >-
                    🏈 HUSKERS SCORE {{ score_diff }} POINTS! 🏈
                    Current celebration level: {{ celebration_level }}/10
        default:
          - service: notify.persistent_notification
            data:
              title: '⚡ HUSKERS SCORE!'
              message: '{{ score_diff }} points! Keep it rolling!'

      - service: logbook.log
        data:
          name: Huskers Celebration
          message: >-
            SCORE! +{{ score_diff }} points - Celebration level {{ celebration_level }}
          entity_id: automation.huskers_touchdown_celebration_enhanced

  - id: huskers_big_defensive_play
    alias: 'Huskers: Big Defensive Play Detection'
    description: 'Celebrates when opponent score stays same for extended period during key moments'
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.huskers_live_game_status
        attribute: home_score
        for: { minutes: 10 }
      - platform: state
        entity_id: sensor.huskers_live_game_status
        attribute: away_score
        for: { minutes: 10 }
    condition:
      - condition: state
        entity_id: input_boolean.huskers_automations_enabled
        state: 'on'
      - condition: state
        entity_id: binary_sensor.huskers_is_live
        state: 'on'
      - condition: template
        value_template: >-
          {% set home_team = state_attr('sensor.huskers_live_game_status', 'home_team') %}
          {% set nebraska_is_home = (home_team == 'Nebraska') %}
          {% if nebraska_is_home %}
            {{ trigger.entity_id.endswith('away_score') }}
          {% else %}
            {{ trigger.entity_id.endswith('home_score') }}
          {% endif %}
    action:
      - service: script.turn_on
        target: { entity_id: script.huskers_chase_step_once }
      - service: logbook.log
        data:
          name: Huskers Defense
          message: 'Defensive stand detected - opponent held scoreless'

  # ===============================
  # RANKING & ACHIEVEMENT AUTOMATIONS
  # ===============================

  - id: huskers_ranking_improvement
    alias: 'Huskers: Ranking Improvement Celebration'
    description: 'Celebrates when Nebraska moves up in rankings'
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.huskers_current_rankings
        attribute: ap_rank
      - platform: state
        entity_id: sensor.huskers_current_rankings
        attribute: coaches_rank
    condition:
      - condition: state
        entity_id: input_boolean.huskers_automations_enabled
        state: 'on'
      - condition: template
        value_template: >-
          {% set attr_name = trigger.entity_id.split('.')[-1] %}
          {% set old_rank = trigger.from_state.attributes.get(attr_name, 999) | int(999) %}
          {% set new_rank = trigger.to_state.attributes.get(attr_name, 999) | int(999) %}
          {{ new_rank < old_rank and new_rank <= 25 and old_rank != 999 }}
    action:
      - service: script.turn_on
        target: { entity_id: script.huskers_hail_burst_8s }
      - delay: { seconds: 10 }
      - service: scene.turn_on
        target: { entity_id: scene.huskers_seven_all_scarlet }
      - service: notify.persistent_notification
        data:
          title: '📈 HUSKERS RANKED!'
          message: >-
            🏆 Nebraska moves up to #{{ trigger.to_state.attributes.get(trigger.entity_id.split('.')[-1]) }}!
            (Previously #{{ trigger.from_state.attributes.get(trigger.entity_id.split('.')[-1], 'Unranked') }})
      - service: logbook.log
        data:
          name: Huskers Achievement
          message: >-
            Ranking improvement detected in {{ trigger.entity_id.split('.')[-1] }}

  - id: huskers_first_ranking
    alias: 'Huskers: First Time Ranked Celebration'
    description: 'Special celebration when Nebraska gets ranked for first time'
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.huskers_current_rankings
        attribute: ap_rank
      - platform: state
        entity_id: sensor.huskers_current_rankings
        attribute: coaches_rank
    condition:
      - condition: state
        entity_id: input_boolean.huskers_automations_enabled
        state: 'on'
      - condition: template
        value_template: >-
          {% set attr_name = trigger.entity_id.split('.')[-1] %}
          {% set old_rank = trigger.from_state.attributes.get(attr_name, 999) | int(999) %}
          {% set new_rank = trigger.to_state.attributes.get(attr_name, 999) | int(999) %}
          {{ old_rank == 999 and new_rank <= 25 }}
    action:
      - service: script.turn_on
        target: { entity_id: script.huskers_hail_burst_8s }
      - delay: { seconds: 8 }
      - service: script.turn_on
        target: { entity_id: script.huskers_chase30_start }
      - delay: { seconds: 30 }
      - service: script.turn_on
        target: { entity_id: script.huskers_hail_burst_8s }
      - service: notify.persistent_notification
        data:
          title: '🎊 HUSKERS ARE RANKED! 🎊'
          message: >-
            🏆 FIRST TIME RANKED THIS SEASON! 🏆
            Nebraska debuts at #{{ trigger.to_state.attributes.get(trigger.entity_id.split('.')[-1]) }}!

  # ===============================
  # POSTGAME AUTOMATIONS
  # ===============================

  - id: huskers_victory_celebration
    alias: 'Huskers: Victory Celebration'
    description: 'Extended celebration sequence for wins'
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.huskers_is_postgame
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.huskers_automations_enabled
        state: 'on'
      - condition: state
        entity_id: input_boolean.huskers_effects_enabled
        state: 'on'
      - condition: template
        value_template: >-
          {% set home_team = state_attr('sensor.huskers_live_game_status', 'home_team') %}
          {% set away_team = state_attr('sensor.huskers_live_game_status', 'away_team') %}
          {% set home_score = state_attr('sensor.huskers_live_game_status', 'home_score') | int(0) %}
          {% set away_score = state_attr('sensor.huskers_live_game_status', 'away_score') | int(0) %}
          {% if home_team == 'Nebraska' %}
            {{ home_score > away_score }}
          {% elif away_team == 'Nebraska' %}
            {{ away_score > home_score }}
          {% else %}false{% endif %}
    action:
      - service: input_boolean.turn_on
        target: { entity_id: input_boolean.huskers_victory_mode }

      # Victory celebration sequence
      - service: script.turn_on
        target: { entity_id: script.huskers_hail_burst_8s }
      - delay: { seconds: 10 }
      - service: script.turn_on
        target: { entity_id: script.huskers_chase30_start }
      - delay: { seconds: 30 }
      - service: script.turn_on
        target: { entity_id: script.huskers_hail_burst_8s }
      - delay: { seconds: 10 }
      - service: scene.turn_on
        target: { entity_id: scene.huskers_seven_all_scarlet }
      - delay: { seconds: 15 }
      - service: script.turn_on
        target: { entity_id: script.huskers_hail_burst_8s }

      - service: notify.persistent_notification
        data:
          title: '🎉 HUSKERS WIN! 🎉'
          message: >-
            🏆 VICTORY! 🏆
            Another W for the Big Red!
            Check dashboard for final score.
      - service: logbook.log
        data:
          name: Huskers Victory
          message: 'Victory celebration sequence completed!'

  - id: huskers_big_win_celebration
    alias: 'Huskers: Big Win Celebration (14+ point margin)'
    description: 'Extra celebration for dominant victories'
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.huskers_is_postgame
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.huskers_automations_enabled
        state: 'on'
      - condition: template
        value_template: >-
          {% set home_team = state_attr('sensor.huskers_live_game_status', 'home_team') %}
          {% set away_team = state_attr('sensor.huskers_live_game_status', 'away_team') %}
          {% set home_score = state_attr('sensor.huskers_live_game_status', 'home_score') | int(0) %}
          {% set away_score = state_attr('sensor.huskers_live_game_status', 'away_score') | int(0) %}
          {% if home_team == 'Nebraska' %}
            {{ home_score > away_score and (home_score - away_score) >= 14 }}
          {% elif away_team == 'Nebraska' %}
            {{ away_score > home_score and (away_score - home_score) >= 14 }}
          {% else %}false{% endif %}
    action:
      - delay: { seconds: 60 } # Wait for main victory celebration
      - service: script.turn_on
        target: { entity_id: script.huskers_chase_speed_start }
      - delay: { seconds: 45 }
      - service: script.turn_on
        target: { entity_id: script.huskers_hail_burst_8s }
      - service: notify.persistent_notification
        data:
          title: '💥 DOMINANT VICTORY! 💥'
          message: "Huskers win big! That's how we do it in Lincoln!"

  - id: huskers_postgame_cleanup_enhanced
    alias: 'Huskers: Enhanced Postgame Cleanup'
    description: 'Comprehensive cleanup after games end'
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.huskers_is_postgame
        from: 'on'
        to: 'off'
        for: { minutes: 30 }
    condition:
      - condition: state
        entity_id: input_boolean.huskers_automations_enabled
        state: 'on'
    action:
      # Stop all light sequences
      - parallel:
          - service: script.turn_off
            target: { entity_id: script.huskers_chase30_loop }
          - service: script.turn_off
            target: { entity_id: script.huskers_chase_speed_loop }
          - service: script.turn_on
            target: { entity_id: script.huskers_chase30_stop }
          - service: script.turn_on
            target: { entity_id: script.huskers_chase_speed_stop }

      # Reset all settings to defaults
      - delay: { seconds: 2 }
      - service: input_number.set_value
        target: { entity_id: input_number.huskers_hail_bpm }
        data: { value: 132 }
      - service: input_number.set_value
        target: { entity_id: input_number.huskers_chase_cycle_seconds }
        data: { value: 30 }
      - service: input_number.set_value
        target: { entity_id: input_number.huskers_celebration_intensity }
        data: { value: 7 }
      - service: input_boolean.turn_off
        target: { entity_id: input_boolean.huskers_victory_mode }

      - service: logbook.log
        data:
          name: Huskers Automation
          message: 'Enhanced postgame cleanup completed (all settings reset)'

  # ===============================
  # WEEKLY/SEASONAL AUTOMATIONS
  # ===============================

  - id: huskers_weekly_data_refresh
    alias: 'Huskers: Weekly Data Refresh'
    description: 'Refreshes all data sources weekly during season'
    initial_state: true
    mode: single
    trigger:
      - platform: time
        at: '06:00:00'
    condition:
      - condition: time
        weekday:
          - mon
      - condition: template
        value_template: >-
          {# Only during football season (August through January) #}
          {% set month = now().month %}
          {{ month >= 8 or month <= 1 }}
    action:
      - service: homeassistant.update_entity
        target:
          entity_id:
            - sensor.huskers_records_raw
            - sensor.b1g_standings_raw
            - sensor.huskers_schedule_raw
            - sensor.huskers_season_stats_raw
            - sensor.huskers_recruiting_raw
            - sensor.cfb_rankings_raw
            - sensor.cfb_sp_ratings_raw
            - sensor.cfb_elo_ratings_raw
            - sensor.cfb_fpi_ratings_raw
            - sensor.cfb_talent_raw
      - service: logbook.log
        data:
          name: Huskers Data
          message: 'Weekly data refresh completed'

  - id: huskers_gameday_data_refresh
    alias: 'Huskers: Game Day Data Refresh'
    description: 'More frequent data refresh on game days'
    initial_state: true
    mode: single
    trigger:
      - platform: time_pattern
        minutes: '/15' # Every 15 minutes
    condition:
      - condition: or
        conditions:
          - condition: state
            entity_id: binary_sensor.huskers_is_pregame
            state: 'on'
          - condition: state
            entity_id: binary_sensor.huskers_is_live
            state: 'on'
          - condition: state
            entity_id: binary_sensor.huskers_is_postgame
            state: 'on'
    action:
      - service: homeassistant.update_entity
        target:
          entity_id:
            - sensor.cfb_scoreboard_raw
            - sensor.huskers_schedule_raw
            - sensor.huskers_betting_lines_raw
            - sensor.huskers_media_raw

  - id: huskers_season_milestone_tracker
    alias: 'Huskers: Season Milestone Tracker'
    description: 'Celebrates season milestones like bowl eligibility'
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.huskers_record_overall
        attribute: wins
    condition:
      - condition: state
        entity_id: input_boolean.huskers_automations_enabled
        state: 'on'
      - condition: template
        value_template: >-
          {% set wins = trigger.to_state.state | int(0) %}
          {% set old_wins = trigger.from_state.state | int(0) if trigger.from_state else 0 %}
          {{ wins > old_wins and wins in [6, 8, 10] }}
    action:
      - choose:
          # Bowl Eligible (6 wins)
          - conditions:
              - condition: template
                value_template: '{{ trigger.to_state.state | int == 6 }}'
            sequence:
              - service: script.turn_on
                target: { entity_id: script.huskers_hail_burst_8s }
              - delay: { seconds: 10 }
              - service: script.turn_on
                target: { entity_id: script.huskers_chase30_start }
              - service: notify.persistent_notification
                data:
                  title: '🏈 BOWL ELIGIBLE! 🏈'
                  message: '6 wins! Huskers are going bowling!'
          # Great Season (8 wins)
          - conditions:
              - condition: template
                value_template: '{{ trigger.to_state.state | int == 8 }}'
            sequence:
              - service: notify.persistent_notification
                data:
                  title: '🔥 8 WINS! 🔥'
                  message: 'Great season for the Huskers!'
          # Outstanding Season (10 wins)
          - conditions:
              - condition: template
                value_template: '{{ trigger.to_state.state | int == 10 }}'
            sequence:
              - service: notify.persistent_notification
                data:
                  title: '🏆 10 WINS! 🏆'
                  message: 'Outstanding season! Big Ten title hopes alive!'

  # ===============================
  # SYSTEM MAINTENANCE
  # ===============================

  - id: huskers_system_health_check
    alias: 'Huskers: System Health Check'
    description: 'Daily check of all sensors and API connections'
    initial_state: true
    mode: single
    trigger:
      - platform: time
        at: '05:00:00'
    condition:
      - condition: template
        value_template: >-
          {# Only during football season #}
          {% set month = now().month %}
          {{ month >= 8 or month <= 1 }}
    action:
      - service: logbook.log
        data:
          name: Huskers System
          message: >-
            Daily health check:
            Records: {{ 'OK' if states('sensor.huskers_records_raw') not in ['unknown', 'unavailable'] else 'FAIL' }}
            Scoreboard: {{ 'OK' if states('sensor.cfb_scoreboard_raw') not in ['unknown', 'unavailable'] else 'FAIL' }}
            Stats: {{ 'OK' if states('sensor.huskers_season_stats_raw') not in ['unknown', 'unavailable'] else 'FAIL' }}
            Rankings: {{ 'OK' if states('sensor.cfb_rankings_raw') not in ['unknown', 'unavailable'] else 'FAIL' }}
