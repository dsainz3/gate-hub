###############################################################################
# KIOSK — clean groups + simple one-tap scripts (no segment lights)
###############################################################################

group:
  # Core, non-segment lights you actually have
  kiosk_all_lights_core:
    name: Kiosk — All Lights (Core)
    entities:
      - light.all_lights
      - light.office_lights
      - light.theater_lights
      - light.front_porch_lights
      - light.all_exterior_lights
      - light.permanent_outdoor_lights
      - light.light_theater_left
      - light.light_theater_right
      - light.light_front_left
      - light.light_front_right
      - light.light_garage_center
      - light.light_garage_left
      - light.light_garage_right
      - light.light_parents_2
      - light.light_guest_room_2
      - light.light_attic_2
      - light.sunroom_light
      - light.livingroom_light
      - light.diningroom_light
      - light.light_office
      # - light.spare_light  # Commented out - entity doesn't exist

  kiosk_theater_lights:
    name: Kiosk — Theater Lights
    entities:
      - light.theater_lights
      - light.light_theater_left
      - light.light_theater_right

  kiosk_front_lights:
    name: Kiosk — Front Lights
    entities:
      - light.front_porch_lights
      - light.light_front_left
      - light.light_front_right

  kiosk_garage_lights:
    name: Kiosk — Garage Lights
    entities:
      - light.light_garage_center
      - light.light_garage_left
      - light.light_garage_right

  kiosk_all_automations:
    name: Kiosk — Core Automations
    entities:
      - automation.evening_lights_at_sunset
      - automation.lighting_exterior_front_garage_on_sunset
      - automation.lighting_night_mode_at_midnight
      - automation.early_morning_lights_03_30
      - automation.interior_lights_off_15_minutes_after_sunrise
      - automation.lighting_morning_lights_off_sunrise
      - automation.exterior_led_monthly_effect

  # Exterior-only (no segments)
  kiosk_exterior_lights:
    name: Kiosk — Exterior Lights
    entities:
      - light.all_exterior_lights
      - light.permanent_outdoor_lights
      - light.front_porch_lights

  # Purifier power switches
  kiosk_purifiers:
    name: Kiosk — Purifiers
    entities:
      - switch.bedroom_purifier_power_switch
      - switch.guest_room_purifier_power_switch
      - switch.garage_air_purifier_power_switch

  # Smart plugs / safety shutoffs
  kiosk_plugs:
    name: Kiosk — Plugs
    entities:
      - switch.plug_basement_burner
      - switch.plug_mainfloor_burner
      - switch.plug_bedroom_burner
      - switch.plug_humidor
      - switch.tree_power_switch

  # Light "power switch" relays (for Govee/relays/etc) — no segments
  kiosk_light_power_switches:
    name: Kiosk — Light Power Switches
    entities:
      - switch.diningroom_light_power_switch
      - switch.livingroom_light_power_switch
      - switch.light_parents_power_switch
      - switch.light_guest_room_power_switch
      - switch.sunroom_light_power_switch
      - switch.light_attic_power_switch
      - switch.permanent_outdoor_lights_power_switch
      - switch.outside_power_switch
      - switch.main_power_switch
      - switch.mainfloor_power_switch
      - switch.main_floor_power_switch
      - switch.light_ari_power_switch
      - switch.christmas_tree_lights_power_switch

  # Snapshot quick reference bundles
  kiosk_snapshot_weather:
    name: Kiosk - Snapshot Weather
    entities:
      - !secret weather_primary_entity
      - sensor.outdoor_temperature_wx
      - sensor.outdoor_humidity_wx
      - sensor.outdoor_wind_speed_wx
      - sensor.outdoor_pressure_wx

  kiosk_snapshot_huskers:
    name: Kiosk - Snapshot Huskers
    entities:
      - sensor.huskers_next_game
      - sensor.huskers_record_dashboard
      - sensor.huskers_game_status_espn
      - sensor.huskers_kickoff_in_effective
      - binary_sensor.huskers_is_pregame_espn
      - binary_sensor.huskers_is_live_espn
      - binary_sensor.huskers_is_postgame_espn

  kiosk_snapshot_lights:
    name: Kiosk - Snapshot Lights
    entities:
      - light.all_lights
      - light.all_exterior_lights
      - group.kiosk_theater_lights
      - group.kiosk_front_lights
      - group.kiosk_garage_lights

  kiosk_snapshot_auxiliary:
    name: Kiosk - Snapshot Auxiliary
    entities:
      - switch.plug_humidor
      - sensor.hygrometer_humidor_temperature
      - sensor.hygrometer_humidor_humidity
      - switch.plug_basement_burner
      - switch.plug_mainfloor_burner
      - switch.plug_bedroom_burner
      - switch.tree_power_switch

  kiosk_snapshot_automations:
    name: Kiosk - Snapshot Automations
    entities:
      - automation.evening_lights_at_sunset
      - automation.lighting_exterior_front_garage_on_sunset
      - automation.lighting_night_mode_at_midnight
      - automation.early_morning_lights_03_30
      - automation.interior_lights_off_15_minutes_after_sunrise
      - automation.lighting_morning_lights_off_sunrise
      - automation.exterior_led_monthly_effect

###############################################################################
# Scripts (mapping style; aliases quoted)
###############################################################################
script:
  kiosk_all_lights_on:
    alias: 'Kiosk: All Lights — ON'
    mode: single
    sequence:
      - service: light.turn_on
        target:
          entity_id: group.kiosk_all_lights_core

  kiosk_all_lights_off:
    alias: 'Kiosk: All Lights — OFF'
    mode: single
    sequence:
      - service: light.turn_off
        target:
          entity_id: group.kiosk_all_lights_core

  kiosk_exterior_on:
    alias: 'Kiosk: Exterior — ON'
    mode: single
    sequence:
      - service: light.turn_on
        target:
          entity_id: group.kiosk_exterior_lights

  kiosk_exterior_off:
    alias: 'Kiosk: Exterior — OFF'
    mode: single
    sequence:
      - service: light.turn_off
        target:
          entity_id: group.kiosk_exterior_lights

  kiosk_theater_on:
    alias: 'Kiosk: Theater — ON'
    mode: single
    sequence:
      - service: light.turn_on
        target:
          entity_id:
            - group.kiosk_theater_lights
            - light.theater_lights

  kiosk_theater_off:
    alias: 'Kiosk: Theater — OFF'
    mode: single
    sequence:
      - service: light.turn_off
        target:
          entity_id:
            - light.theater_lights

  kiosk_front_on:
    alias: 'Kiosk: Front — ON'
    mode: single
    sequence:
      - service: light.turn_on
        target:
          entity_id:
            - group.kiosk_front_lights

  kiosk_front_off:
    alias: 'Kiosk: Front — OFF'
    mode: single
    sequence:
      - service: light.turn_off
        target:
          entity_id:
            - group.kiosk_front_lights

  kiosk_garage_on:
    alias: 'Kiosk: Garage — ON'
    mode: single
    sequence:
      - service: light.turn_on
        target:
          entity_id:
            - light.garage_lights

  kiosk_garage_off:
    alias: 'Kiosk: Garage — OFF'
    mode: single
    sequence:
      - service: light.turn_off
        target:
          entity_id:
            - light.garage_lights

  kiosk_purifiers_on:
    alias: 'Kiosk: Purifiers — ON'
    mode: single
    sequence:
      - service: switch.turn_on
        target:
          entity_id: group.kiosk_purifiers

  kiosk_purifiers_off:
    alias: 'Kiosk: Purifiers — OFF'
    mode: single
    sequence:
      - service: switch.turn_off
        target:
          entity_id: group.kiosk_purifiers

  kiosk_plugs_on:
    alias: 'Kiosk: Plugs — ON'
    mode: single
    sequence:
      - service: switch.turn_on
        target:
          entity_id: group.kiosk_plugs

  kiosk_plugs_off:
    alias: 'Kiosk: Plugs — OFF'
    mode: single
    sequence:
      - service: switch.turn_off
        target:
          entity_id: group.kiosk_plugs

  kiosk_light_relays_on:
    alias: 'Kiosk: Light Power Switches — ON'
    mode: single
    sequence:
      - service: switch.turn_on
        target:
          entity_id: group.kiosk_light_power_switches

  kiosk_light_relays_off:
    alias: 'Kiosk: Light Power Switches — OFF'
    mode: single
    sequence:
      - service: switch.turn_off
        target:
          entity_id: group.kiosk_light_power_switches

###############################################################################
# Template sensors - snapshot metrics & humidor monitoring (SINGLE SECTION)
###############################################################################
template:
  - sensor:
      - name: kiosk_snapshot_lights_on
        unique_id: kiosk_snapshot_lights_on
        unit_of_measurement: lights
        icon: mdi:lightbulb-on
        state: >-
          {{ expand('group.kiosk_all_lights_core') | selectattr('state','eq','on') | list | length }}

      - name: kiosk_snapshot_plugs_on
        unique_id: kiosk_snapshot_plugs_on
        unit_of_measurement: plugs
        icon: mdi:power-plug
        state: >-
          {{ expand('group.kiosk_plugs') | selectattr('state','eq','on') | list | length }}

      - name: kiosk_snapshot_aux_readout
        unique_id: kiosk_snapshot_aux_readout
        icon: mdi:thermometer-water
        state: >-
          {% set temp = states('sensor.hygrometer_humidor_temperature') %}
          {% set humidity = states('sensor.hygrometer_humidor_humidity') %}
          {% if temp in ['unknown', 'unavailable'] or humidity in ['unknown', 'unavailable'] %}
            Data unavailable
          {% else %}
            {{ temp }} degF / {{ humidity }} %
          {% endif %}
        attributes:
          humidor_plug: "{{ states('switch.plug_humidor') }}"

      - name: kiosk_automations_problem_count
        unique_id: kiosk_automations_problem_count
        icon: mdi:alert-circle
        unit_of_measurement: automations
        state: >-
          {% set bad = expand('group.kiosk_all_automations')
                        | selectattr('state','in',['unavailable','unknown'])
                        | list %}
          {{ bad | length }}
        attributes:
          problem_automations: >-
            {{ expand('group.kiosk_all_automations')
               | selectattr('state','in',['unavailable','unknown'])
               | map(attribute='entity_id') | list }}
          ok_automations: >-
            {{ expand('group.kiosk_all_automations')
               | rejectattr('state','in',['unavailable','unknown'])
               | map(attribute='entity_id') | list }}

      - name: kiosk_humidor_temp_delta_1h
        unique_id: kiosk_humidor_temp_delta_1h
        unit_of_measurement: "°F"
        icon: mdi:thermometer-chevron-up
        state: >-
          {{ (state_attr('sensor.kiosk_humidor_temp_stats_1h','change') | float(0)) | round(2) }}

      - name: kiosk_humidor_humidity_delta_1h
        unique_id: kiosk_humidor_humidity_delta_1h
        unit_of_measurement: "%"
        icon: mdi:water-percent
        state: >-
          {{ (state_attr('sensor.kiosk_humidor_humidity_stats_1h','change') | float(0)) | round(1) }}

      - name: kiosk_humidor_in_band_pct_24h
        unique_id: kiosk_humidor_in_band_pct_24h
        unit_of_measurement: "%"
        icon: mdi:target-variant
        state: >-
          {% set t = states('sensor.hygrometer_humidor_temperature') | float(0) %}
          {% set h = states('sensor.hygrometer_humidor_humidity') | float(0) %}
          {{ 100 if (68 <= t <= 72 and 62 <= h <= 68) else 0 }}

      - name: kiosk_trash_pickup
        unique_id: kiosk_trash_pickup
        icon: mdi:trash-can
        state: >-
          {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'trash') or {}) %}
          {% set next_pickup = data.get('next_pickup') %}
          {{ next_pickup if next_pickup else 'unknown' }}
        attributes:
          pickup_weekday: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'trash') or {}) %}
            {{ data.get('next_pickup_weekday', 'unknown') }}
          pickup_scheduled: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'trash') or {}) %}
            {{ data.get('next_pickup_scheduled', 'unknown') }}
          days_until: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'trash') or {}) %}
            {% if data.get('days_until') is not none %}{{ data.get('days_until') }}{% else %}unknown{% endif %}
          holiday_delay: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'trash') or {}) %}
            {{ data.get('holiday_delay', False) }}
          holiday_reason: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'trash') or {}) %}
            {{ data.get('holiday_reason') or 'none' }}

      - name: kiosk_recycling_pickup
        unique_id: kiosk_recycling_pickup
        icon: mdi:recycle
        state: >-
          {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'recycling') or {}) %}
          {% set next_pickup = data.get('next_pickup') %}
          {{ next_pickup if next_pickup else 'unknown' }}
        attributes:
          pickup_weekday: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'recycling') or {}) %}
            {{ data.get('next_pickup_weekday', 'unknown') }}
          pickup_scheduled: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'recycling') or {}) %}
            {{ data.get('next_pickup_scheduled', 'unknown') }}
          days_until: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'recycling') or {}) %}
            {% if data.get('days_until') is not none %}{{ data.get('days_until') }}{% else %}unknown{% endif %}
          holiday_delay: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'recycling') or {}) %}
            {{ data.get('holiday_delay', False) }}
          holiday_reason: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'recycling') or {}) %}
            {{ data.get('holiday_reason') or 'none' }}

      - name: kiosk_yard_waste_pickup
        unique_id: kiosk_yard_waste_pickup
        icon: mdi:tree
        state: >-
          {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'yard_waste') or {}) %}
          {% set next_pickup = data.get('next_pickup') %}
          {{ next_pickup if next_pickup else 'offseason' }}
        attributes:
          season_active: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'yard_waste') or {}) %}
            {{ data.get('season_active', False) }}
          season_window: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'yard_waste') or {}) %}
            {{ data.get('season_start') }} -> {{ data.get('season_end') }}
          next_season: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'yard_waste') or {}) %}
            {{ data.get('next_season_start') }} -> {{ data.get('next_season_end') }}
          days_until: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'yard_waste') or {}) %}
            {% if data.get('days_until') is not none %}{{ data.get('days_until') }}{% else %}unknown{% endif %}
          holiday_delay: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'yard_waste') or {}) %}
            {{ data.get('holiday_delay', False) }}
          holiday_reason: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'yard_waste') or {}) %}
            {{ data.get('holiday_reason') or 'none' }}

  - binary_sensor:
      - name: kiosk_snapshot_automation_issue
        unique_id: kiosk_snapshot_automation_issue
        device_class: problem
        state: >-
          {{ expand('group.kiosk_all_automations') | selectattr('state','ne','on') | list | length > 0 }}
        attributes:
          disabled_automations: >-
            {{ expand('group.kiosk_all_automations') | selectattr('state','ne','on') | map(attribute='entity_id') | list }}

      - name: kiosk_automations_have_issues
        unique_id: kiosk_automations_have_issues
        device_class: problem
        state: >-
          {{ expand('group.kiosk_all_automations')
             | selectattr('state','in',['unavailable','unknown'])
             | list | length > 0 }}

      - name: kiosk_humidor_out_of_band
        unique_id: kiosk_humidor_out_of_band
        device_class: problem
        state: >-
          {% set t = states('sensor.hygrometer_humidor_temperature')|float(0) %}
          {% set h = states('sensor.hygrometer_humidor_humidity')|float(0) %}
          {{ not (68 <= t <= 72 and 62 <= h <= 68) }}

      - name: kiosk_sanitation_feed_ok
        unique_id: kiosk_sanitation_feed_ok
        device_class: connectivity
        state: >-
          {% set status = states('sensor.gretna_sanitation_schedule') %}
          {% set generated = state_attr('sensor.gretna_sanitation_schedule', 'generated_at') %}
          {% if status == 'ok' and generated %}
            {% set gen_dt = as_datetime(generated) %}
            {% if gen_dt %}
              {{ (now() - gen_dt).total_seconds() < 43200 }}
            {% else %}
              false
            {% endif %}
          {% else %}
            false
          {% endif %}
        attributes:
          last_success: >-
            {{ state_attr('sensor.gretna_sanitation_schedule', 'generated_at') or 'unknown' }}
          reference_date: >-
            {{ state_attr('sensor.gretna_sanitation_schedule', 'reference_date') or 'unknown' }}
          age_hours: >-
            {% set generated = state_attr('sensor.gretna_sanitation_schedule', 'generated_at') %}
            {% if generated %}
              {% set gen_dt = as_datetime(generated) %}
              {% if gen_dt %}
                {{ ((now() - gen_dt).total_seconds() / 3600) | round(1) }}
              {% else %}
                unknown
              {% endif %}
            {% else %}
              unknown
            {% endif %}

      - name: kiosk_yard_waste_in_season
        unique_id: kiosk_yard_waste_in_season
        state: >-
          {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'yard_waste') or {}) %}
          {{ data.get('season_active', False) }}
        attributes:
          season_window: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'yard_waste') or {}) %}
            {{ data.get('season_start') }} -> {{ data.get('season_end') }}
          next_season: >-
            {% set data = (state_attr('sensor.gretna_sanitation_schedule', 'yard_waste') or {}) %}
            {{ data.get('next_season_start') }} -> {{ data.get('next_season_end') }}

###############################################################################
# KIOSK MEASUREMENTS & TRENDS
# - Daily ON-time runtime (history_stats)
# - Statistics windows for humidor deltas
###############################################################################
sensor:
  # --- Daily runtime: LIGHT GROUPS (minutes) ---
  - platform: history_stats
    name: kiosk_all_lights_runtime_today
    entity_id: light.all_lights
    state: 'on'
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: kiosk_exterior_lights_runtime_today
    entity_id: light.all_exterior_lights
    state: 'on'
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: kiosk_theater_lights_runtime_today
    entity_id: light.theater_lights
    state: 'on'
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  # --- Daily runtime: PLUGS (minutes) ---
  - platform: history_stats
    name: kiosk_plug_basement_burner_on_today
    entity_id: switch.plug_basement_burner
    state: 'on'
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: kiosk_plug_mainfloor_burner_on_today
    entity_id: switch.plug_mainfloor_burner
    state: 'on'
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: kiosk_plug_bedroom_burner_on_today
    entity_id: switch.plug_bedroom_burner
    state: 'on'
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: kiosk_plug_humidor_on_today
    entity_id: switch.plug_humidor
    state: 'on'
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  # --- Daily runtime: SPRINKLERS (minutes per zone) ---
  - platform: history_stats
    name: kiosk_sprinklers_south_side_runtime_today
    entity_id: switch.sprinkler_south_side_zone
    state: 'on'
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: kiosk_sprinklers_back_south_runtime_today
    entity_id: switch.sprinkler_back_south_zone
    state: 'on'
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: kiosk_sprinklers_back_north_runtime_today
    entity_id: switch.sprinkler_back_north_zone
    state: 'on'
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: kiosk_sprinklers_front_runtime_today
    entity_id: switch.sprinkler_front_zone
    state: 'on'
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: kiosk_sprinklers_zone5_runtime_today
    entity_id: switch.sprinkler_zone_5_zone
    state: 'on'
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

# --- Statistics windows for HUMIDOR (1h rolling) ---
  - platform: statistics
    name: kiosk_humidor_temp_stats_1h
    entity_id: sensor.hygrometer_humidor_temperature
    state_characteristic: mean
    max_age:
      hours: 1
    sampling_size: 500

  - platform: statistics
    name: kiosk_humidor_humidity_stats_1h
    entity_id: sensor.hygrometer_humidor_humidity
    state_characteristic: mean
    max_age:
      hours: 1
    sampling_size: 500
