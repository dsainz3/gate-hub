# Monitors every automation for expected state alignment and exposes audit metadata.

group:
  automation_watchdog_expected_off:
    name: Automation Watchdog · Expected Off
    icon: mdi:power-off
    entities: []
  automation_watchdog_ignored:
    name: Automation Watchdog · Ignored
    icon: mdi:eye-off
    entities: []

template:
  - trigger:
      - platform: homeassistant
        event: start
      - platform: event
        event_type: automation_reloaded
      - platform: time_pattern
        minutes: '/5'
      - platform: state
        entity_id:
          - group.automation_watchdog_expected_off
          - group.automation_watchdog_ignored
    sensor:
      - name: Automation Status Audit
        unique_id: automation_status_audit
        icon: mdi:playlist-check
        variables:
          automation_metadata: !include ../shared/automation_descriptions.yaml
          automation_audit_snapshot: >-
            {% set expected_off = state_attr('group.automation_watchdog_expected_off', 'entity_id') or [] %}
            {% set ignored = state_attr('group.automation_watchdog_ignored', 'entity_id') or [] %}
            {% set metadata = automation_metadata or {} %}
            {% set descriptions = metadata.automation_descriptions or {} %}
            {% set ns = namespace(snapshots=[], mismatches=[], disabled=[]) %}
            {% for automation in states.automation | sort(attribute='name') %}
              {% set entity_id = automation.entity_id %}
              {% set expected_state = 'off' if entity_id in expected_off else 'on' %}
              {% set actual_state = automation.state %}
              {% set automation_mode = state_attr(entity_id, 'mode') or 'single' %}
              {% set current_runs = state_attr(entity_id, 'current') %}
              {% set max_runs = state_attr(entity_id, 'max') %}
              {% set last_triggered = state_attr(entity_id, 'last_triggered') %}
              {% set next_trigger = state_attr(entity_id, 'next_triggered') or state_attr(entity_id, 'next_trigger') %}
              {% set next_trigger = None if next_trigger in [None, '', 'unknown', 'unavailable'] else next_trigger %}
              {% set next_trigger_ts = as_timestamp(next_trigger) if next_trigger is not none else None %}
              {% set last_triggered_ts = as_timestamp(last_triggered) if last_triggered not in [None, '', 'unknown', 'unavailable'] else None %}
              {% set last_run_minutes = ((now().timestamp() - last_triggered_ts) / 60) if last_triggered_ts is not none else None %}
              {% set next_run_minutes = ((next_trigger_ts - now().timestamp()) / 60) if next_trigger_ts is not none else None %}
              {% set description = descriptions.get(entity_id) %}
              {% if not description %}
                {% set description = state_attr(entity_id, 'description') %}
              {% endif %}
              {% set description = description or '' %}
              {% if actual_state == expected_state %}
                {% set result_status = 'match' %}
                {% set status_detail = '✅ Matches expected state' %}
              {% else %}
                {% set result_status = 'mismatch' %}
                {% set status_detail = '⚠️ Expected ' ~ expected_state ~ ' but is ' ~ actual_state %}
              {% endif %}
              {% set snapshot = {
                'entity_id': entity_id,
                'name': automation.name,
                'state': actual_state,
                'expected_state': expected_state,
                'ignored': entity_id in ignored,
                'mode': automation_mode,
                'current_runs': current_runs,
                'max_runs': max_runs,
                'last_triggered': last_triggered,
                'last_run_minutes': last_run_minutes,
                'next_trigger': next_trigger,
                'next_run_minutes': next_run_minutes,
                'description': description,
                'result_status': result_status,
                'status_detail': status_detail
              } %}
              {% set ns.snapshots = ns.snapshots + [snapshot] %}
              {% if entity_id in ignored %}
                {% continue %}
              {% endif %}
              {% if actual_state != expected_state %}
                {% set mismatch = {
                  'entity_id': entity_id,
                  'name': automation.name,
                  'expected_state': expected_state,
                  'actual_state': actual_state,
                  'description': description
                } %}
                {% set ns.mismatches = ns.mismatches + [mismatch] %}
                {% if expected_state == 'on' %}
                  {% set ns.disabled = ns.disabled + [entity_id] %}
                {% endif %}
              {% endif %}
            {% endfor %}
            {{ {
              'snapshots': ns.snapshots,
              'mismatches': ns.mismatches,
              'disabled': ns.disabled,
              'expected_off': expected_off,
              'ignored': ignored
            } | to_json }}
        state: >-
          {% set audit = automation_audit_snapshot | from_json %}
          {% if audit.mismatches %}
            issues
          {% else %}
            ok
          {% endif %}
        attributes:
          checked_at: '{{ now().isoformat() }}'
          total_automations: >-
            {% set audit = automation_audit_snapshot | from_json %}
            {{ audit.snapshots | length }}
          total_checked: >-
            {% set audit = automation_audit_snapshot | from_json %}
            {{ (audit.snapshots | selectattr('ignored', 'equalto', false) | list) | length }}
          total_ignored: >-
            {% set audit = automation_audit_snapshot | from_json %}
            {{ audit.ignored | length }}
          disabled: >-
            {% set audit = automation_audit_snapshot | from_json %}
            {{ audit.disabled | to_json }}
          unexpected_states: >-
            {% set audit = automation_audit_snapshot | from_json %}
            {{ audit.mismatches | to_json }}
          expected_off: >-
            {% set audit = automation_audit_snapshot | from_json %}
            {{ audit.expected_off | to_json }}
          ignored: >-
            {% set audit = automation_audit_snapshot | from_json %}
            {{ audit.ignored | to_json }}
          issues_summary: >-
            {% set audit = automation_audit_snapshot | from_json %}
            {% if audit.mismatches %}
              {% set summaries = [] %}
              {% for mismatch in audit.mismatches %}
                {% set label = mismatch.name if mismatch.name else mismatch.entity_id %}
                {% set summaries = summaries + [label ~ ': expected ' ~ mismatch.expected_state ~ ', actual ' ~ mismatch.actual_state] %}
              {% endfor %}
              {{ summaries | join(' — ') }}
            {% else %}
              All automations match their expected states
            {% endif %}
          automations: >-
            {% set audit = automation_audit_snapshot | from_json %}
            {{ audit.snapshots | to_json }}
  - trigger:
      - platform: homeassistant
        event: start
      - platform: time_pattern
        minutes: '/5'
      - platform: state
        entity_id:
          - input_boolean.holiday_mode_manual
          - input_boolean.huskers_game_mode
          - input_boolean.huskers_test_mode
          - input_boolean.huskers_automations_enabled
          - input_boolean.huskers_use_manual_kickoff
          - binary_sensor.huskers_is_pregame_espn
          - binary_sensor.huskers_is_live_espn
          - binary_sensor.huskers_is_postgame_espn
          - binary_sensor.huskers_light_show_active
          - sensor.huskers_kickoff_in_effective
          - sensor.huskers_kickoff_in_2
          - input_boolean.f1_race_mode
          - input_boolean.f1_test_mode
          - input_boolean.f1_automations_enabled
          - binary_sensor.f1_is_pre_race_window
          - binary_sensor.f1_is_race_live
          - binary_sensor.f1_is_race_wrap
          - input_number.f1_chequered_hold_minutes
    sensor:
      - name: Specialized Mode Audit
        unique_id: specialized_mode_audit
        icon: mdi:alert-decagram
        variables:
          mode_matrix: >-
            {% set entries = [] %}
            {% set now_ts = as_timestamp(now()) %}

            {% set holiday_state = states('input_boolean.holiday_mode_manual') %}
            {% set entries = entries + [{
              'entity_id': 'input_boolean.holiday_mode_manual',
              'name': 'Holiday Mode Override',
              'state': holiday_state,
              'expected_state': 'off',
              'reason_on': 'Manual holiday override engaged; confirm it is still required.',
              'reason_off': 'Override idle; calendar drives holiday mode.'
            }] %}

            {% set huskers_auto = is_state('input_boolean.huskers_automations_enabled', 'on') %}
            {% set huskers_manual = is_state('input_boolean.huskers_use_manual_kickoff', 'on') %}
            {% set huskers_has_next = state_attr('sensor.huskers_kickoff_in_2', 'has_next_game') | default(false) %}
            {% set huskers_minutes = states('sensor.huskers_kickoff_in_effective') | float(999) %}
            {% set huskers_pre = (huskers_manual or huskers_has_next) and huskers_minutes >= 0 and huskers_minutes <= 20 %}
            {% set huskers_live = is_state('binary_sensor.huskers_is_live_espn', 'on') %}
            {% set huskers_show = is_state('binary_sensor.huskers_light_show_active', 'on') %}
            {% set huskers_post = is_state('binary_sensor.huskers_is_postgame_espn', 'on') %}
            {% set huskers_post_recent = huskers_post and (now_ts - as_timestamp(states.binary_sensor.huskers_is_postgame_espn.last_changed, 0)) <= 1200 %}
            {% set huskers_expected_on = huskers_auto and (huskers_pre or huskers_live or huskers_post_recent or huskers_show) %}
            {% set entries = entries + [{
              'entity_id': 'input_boolean.huskers_game_mode',
              'name': 'Huskers Game Mode',
              'state': states('input_boolean.huskers_game_mode'),
              'expected_state': 'on' if huskers_expected_on else 'off',
              'reason_on': 'Pregame, live, postgame grace, or Husker show active.',
              'reason_off': 'No active Huskers window detected; mode should idle.'
            }] %}

            {% set entries = entries + [{
              'entity_id': 'input_boolean.huskers_test_mode',
              'name': 'Huskers Test Mode',
              'state': states('input_boolean.huskers_test_mode'),
              'expected_state': 'off',
              'reason_on': 'Manual testing should be temporary; disable after use.',
              'reason_off': 'Testing mode idle.'
            }] %}

            {% set f1_auto = is_state('input_boolean.f1_automations_enabled', 'on') %}
            {% set f1_pre = is_state('binary_sensor.f1_is_pre_race_window', 'on') %}
            {% set f1_live = is_state('binary_sensor.f1_is_race_live', 'on') %}
            {% set f1_wrap = is_state('binary_sensor.f1_is_race_wrap', 'on') %}
            {% set f1_hold_minutes = states('input_number.f1_chequered_hold_minutes') | int(10) %}
            {% set f1_hold_seconds = (f1_hold_minutes if f1_hold_minutes > 0 else 10) * 60 %}
            {% set f1_wrap_recent = f1_wrap and (now_ts - as_timestamp(states.binary_sensor.f1_is_race_wrap.last_changed, 0)) <= f1_hold_seconds %}
            {% set f1_expected_on = f1_auto and (f1_pre or f1_live or f1_wrap_recent) %}
            {% set entries = entries + [{
              'entity_id': 'input_boolean.f1_race_mode',
              'name': 'F1 Race Mode',
              'state': states('input_boolean.f1_race_mode'),
              'expected_state': 'on' if f1_expected_on else 'off',
              'reason_on': 'Race window active or chequered flag hold underway.',
              'reason_off': 'No race activity detected; race mode should be idle.'
            }] %}

            {% set entries = entries + [{
              'entity_id': 'input_boolean.f1_test_mode',
              'name': 'F1 Test Mode',
              'state': states('input_boolean.f1_test_mode'),
              'expected_state': 'off',
              'reason_on': 'Manual testing should be temporary; disable after use.',
              'reason_off': 'Testing mode idle.'
            }] %}

            {{ entries | to_json }}
        state: >-
          {% set modes = mode_matrix | from_json %}
          {% set issues = [] %}
          {% for mode in modes %}
            {% set actual = mode['state'] %}
            {% set expected = mode['expected_state'] %}
            {% if actual not in ['on', 'off'] %}
              {% set issues = issues + [mode['name']] %}
            {% elif expected in ['on', 'off'] and actual != expected %}
              {% set issues = issues + [mode['name']] %}
            {% endif %}
          {% endfor %}
          {{ 'issues' if issues else 'ok' }}
        attributes:
          checked_at: '{{ now().isoformat() }}'
          total_modes: >-
            {% set modes = mode_matrix | from_json %}
            {{ modes | length }}
          mismatches: >-
            {% set modes = mode_matrix | from_json %}
            {% set issues = [] %}
            {% for mode in modes %}
              {% set actual = mode['state'] %}
              {% set expected = mode['expected_state'] %}
              {% set entity_id = mode['entity_id'] %}
              {% set name = mode['name'] %}
              {% if actual not in ['on', 'off'] %}
                {% set message = 'State is ' ~ (actual | default('unknown', true)) %}
                {% set issues = issues + [{
                  'entity_id': entity_id,
                  'name': name,
                  'state': actual,
                  'expected_state': expected,
                  'issue': message
                }] %}
              {% elif expected in ['on', 'off'] and actual != expected %}
                {% set reason_key = 'reason_' ~ expected %}
                {% set details = mode[reason_key] if reason_key in mode else '' %}
                {% set message = details if details else 'Expected ' ~ expected ~ ', actual ' ~ actual %}
                {% set issues = issues + [{
                  'entity_id': entity_id,
                  'name': name,
                  'state': actual,
                  'expected_state': expected,
                  'issue': message
                }] %}
              {% endif %}
            {% endfor %}
            {{ issues | to_json }}
          issues_summary: >-
            {% set modes = mode_matrix | from_json %}
            {% set summaries = [] %}
            {% for mode in modes %}
              {% set actual = mode['state'] %}
              {% set expected = mode['expected_state'] %}
              {% set name = mode['name'] %}
              {% if actual not in ['on', 'off'] %}
                {% set summaries = summaries + [name ~ ': state is ' ~ (actual | default('unknown', true))] %}
              {% elif expected in ['on', 'off'] and actual != expected %}
                {% set reason_key = 'reason_' ~ expected %}
                {% set details = mode[reason_key] if reason_key in mode else '' %}
                {% if details %}
                  {% set summaries = summaries + [name ~ ': ' ~ details] %}
                {% else %}
                  {% set summaries = summaries + [name ~ ': expected ' ~ expected ~ ', actual ' ~ actual] %}
                {% endif %}
              {% endif %}
            {% endfor %}
            {{ summaries | join(' — ') if summaries else 'All specialized modes match expected states' }}
          modes: >-
            {{ mode_matrix }}
automation:
  - id: automation_watchdog_alert
    alias: 'System: Automation Watchdog Alert'
    description: 'Logs when the automation audit finds state mismatches.'
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.automation_status_audit
        to: 'issues'
    action:
      - service: logbook.log
        data:
          name: Automation Watchdog
          message: >-
            {{ state_attr('sensor.automation_status_audit', 'issues_summary') }}
          entity_id: sensor.automation_status_audit
  - id: specialized_mode_alert
    alias: 'System: Specialized Mode Alert'
    description: 'Logs when the specialized mode audit finds unexpected states.'
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.specialized_mode_audit
        to: 'issues'
    action:
      - service: logbook.log
        data:
          name: Specialized Mode Watchdog
          message: >-
            {{ state_attr('sensor.specialized_mode_audit', 'issues_summary') }}
          entity_id: sensor.specialized_mode_audit
