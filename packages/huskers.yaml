# ===============================
# HUSKERS — PACKAGE
# Eight-light Scarlet↔Cream chase (30s + variable) + Hail burst + Automations
# ===============================

# -------------------------------
# Helpers (existing + UI controls used by dashboard)
# -------------------------------
input_number:
  huskers_chase_cycle_seconds:
    name: 'Chase Cycle Length'
    icon: mdi:speedometer
    min: 8
    max: 120
    step: 1
    mode: slider
    unit_of_measurement: s
    initial: 30

  huskers_hail_bpm:
    name: 'Hail Varsity BPM'
    icon: mdi:metronome
    min: 80
    max: 180
    step: 1
    mode: slider
    unit_of_measurement: bpm
    initial: 132

  # dashboard control (referenced in UI)
  huskers_global_brightness:
    name: 'Global Brightness'
    icon: mdi:lightbulb-on-50
    min: 10
    max: 255
    step: 5
    mode: slider
    unit_of_measurement: level
    initial: 255

input_boolean:
  huskers_automations_enabled:
    name: Huskers Automations Enabled
    icon: mdi:flag-checkered
    initial: true

  # dashboard controls (referenced in UI)
  huskers_effects_enabled:
    name: Huskers Effects Enabled
    icon: mdi:lightbulb-multiple
    initial: true

  huskers_reverse_direction:
    name: Reverse Direction
    icon: mdi:swap-horizontal-circle
    initial: false

  # optional gating/toggles used by automations (safe defaults)
  huskers_game_mode:
    name: Huskers Game Mode
    icon: mdi:stadium
    initial: false

  huskers_test_mode:
    name: Huskers Test Mode
    icon: mdi:test-tube
    initial: false

# -------------------------------
# Group (all 8 lights)
# -------------------------------
group:
  huskers_eight_lights:
    name: Huskers – All Eight Lights
    entities:
      - light.light_theater_left
      - light.light_theater_right
      - light.light_front_left
      - light.light_front_right
      - light.light_garage_left
      - light.lights_garage_center
      - light.light_garage_right
      - light.spare_light

# -------------------------------
# Scenes
# -------------------------------
scene:
  - id: huskers_seven_all_scarlet
    name: Huskers – All Scarlet (8)
    entities:
      light.light_theater_left:
        state: 'on'
        hs_color: [355, 90]
        brightness: 255
      light.light_theater_right:
        state: 'on'
        hs_color: [355, 90]
        brightness: 255
      light.light_front_left:
        state: 'on'
        hs_color: [355, 90]
        brightness: 255
      light.light_front_right:
        state: 'on'
        hs_color: [355, 90]
        brightness: 255
      light.light_garage_left:
        state: 'on'
        hs_color: [355, 90]
        brightness: 255
      light.lights_garage_center:
        state: 'on'
        hs_color: [355, 90]
        brightness: 255
      light.light_garage_right:
        state: 'on'
        hs_color: [355, 90]
        brightness: 255
      light.spare_light:
        state: 'on'
        hs_color: [355, 90]
        brightness: 255

# -------------------------------
# Scripts — 30s chase / variable chase / hail burst (+ step-once)
# -------------------------------
script:
  huskers_chase30_start:
    alias: 'Huskers: Start 30s Cream Chase'
    mode: restart
    sequence:
      - service: script.turn_off
        target: { entity_id: script.huskers_chase_speed_loop }
        continue_on_error: true
      - service: scene.create
        data:
          scene_id: huskers_before_chase
          snapshot_entities: "{{ expand('group.huskers_eight_lights') | map(attribute='entity_id') | list }}"
      - service: light.turn_on
        target: { entity_id: group.huskers_eight_lights }
        data:
          hs_color: [355, 90]
          brightness: "{{ states('input_number.huskers_global_brightness') | int(255) }}"
          transition: 0.1
      - service: script.turn_on
        target: { entity_id: script.huskers_chase30_loop }

  huskers_chase30_loop:
    alias: 'Huskers: 30s Cream Chase LOOP'
    mode: restart
    sequence:
      - variables:
          lights:
            - light.light_theater_left
            - light.light_theater_right
            - light.light_front_left
            - light.light_front_right
            - light.light_garage_left
            - light.lights_garage_center
            - light.light_garage_right
            - light.spare_light
          step_ms: 3750
          xfade_ms: 300
          hold_ms: '{{ (step_ms - xfade_ms) | int }}'
      - repeat:
          while:
            - condition: template
              value_template: "{{ states('input_boolean.huskers_effects_enabled') == 'on' }}"
          sequence:
            - repeat:
                for_each: '{{ lights }}'
                sequence:
                  - variables:
                      current: '{{ repeat.item }}'
                      prev_index: '{{ (repeat.index - 2) % (lights | count) }}'
                      previous: '{{ lights[prev_index|int] }}'
                  - service: light.turn_on
                    target: { entity_id: '{{ previous }}' }
                    data:
                      hs_color: [355, 90]
                      brightness: "{{ states('input_number.huskers_global_brightness') | int(255) }}"
                      transition: 0.3
                  - service: light.turn_on
                    target: { entity_id: '{{ current }}' }
                    data:
                      hs_color: [45, 20]
                      brightness: "{{ states('input_number.huskers_global_brightness') | int(255) }}"
                      transition: 0.3
                  - delay:
                      milliseconds: '{{ hold_ms | int }}'

  huskers_chase30_stop:
    alias: 'Huskers: Stop 30s Chase (restore)'
    mode: single
    sequence:
      - service: script.turn_off
        target: { entity_id: script.huskers_chase30_loop }
      - delay:
          milliseconds: 500
      - service: scene.turn_on
        target: { entity_id: scene.huskers_before_chase }
        continue_on_error: true

  huskers_chase_speed_start:
    alias: 'Huskers: Start Cream Chase (Variable-Speed)'
    mode: restart
    sequence:
      - service: script.turn_off
        target: { entity_id: script.huskers_chase30_loop }
        continue_on_error: true
      - service: scene.create
        data:
          scene_id: huskers_before_chase
          snapshot_entities: "{{ expand('group.huskers_eight_lights') | map(attribute='entity_id') | list }}"
      - service: light.turn_on
        target: { entity_id: group.huskers_eight_lights }
        data:
          hs_color: [355, 90]
          brightness: "{{ states('input_number.huskers_global_brightness') | int(255) }}"
          transition: 0.1
      - service: script.turn_on
        target: { entity_id: script.huskers_chase_speed_loop }

  huskers_chase_speed_loop:
    alias: 'Huskers: Cream Chase LOOP (Variable-Speed)'
    mode: restart
    sequence:
      - variables:
          lights:
            - light.light_theater_left
            - light.light_theater_right
            - light.light_front_left
            - light.light_front_right
            - light.light_garage_left
            - light.lights_garage_center
            - light.light_garage_right
            - light.spare_light
      - repeat:
          while:
            - condition: template
              value_template: "{{ states('input_boolean.huskers_effects_enabled') == 'on' }}"
          sequence:
            - variables:
                cycle_secs: "{{ states('input_number.huskers_chase_cycle_seconds') | float(30) }}"
                step_ms: '{{ (cycle_secs * 1000 / (lights | count)) | int }}'
                xfade_ms: 300
                hold_ms: '{{ [ (step_ms - xfade_ms) | int, 250 ] | max }}'
                cream_hs: "{{ [45, 20] if states('input_boolean.huskers_reverse_direction') == 'off' else [45, 25] }}"
            - repeat:
                for_each: '{{ lights }}'
                sequence:
                  - variables:
                      current: '{{ repeat.item }}'
                      prev_index: '{{ (repeat.index - 2) % (lights | count) }}'
                      previous: '{{ lights[prev_index|int] }}'
                  - service: light.turn_on
                    target: { entity_id: '{{ previous }}' }
                    data:
                      hs_color: [355, 90]
                      brightness: "{{ states('input_number.huskers_global_brightness') | int(255) }}"
                      transition: 0.3
                  - service: light.turn_on
                    target: { entity_id: '{{ current }}' }
                    data:
                      hs_color: '{{ cream_hs }}'
                      brightness: "{{ states('input_number.huskers_global_brightness') | int(255) }}"
                      transition: 0.3
                  - delay:
                      milliseconds: '{{ hold_ms | int }}'

  huskers_chase_speed_stop:
    alias: 'Huskers: Stop Cream Chase (Variable-Speed, restore)'
    mode: single
    sequence:
      - service: script.turn_off
        target: { entity_id: script.huskers_chase_speed_loop }
      - delay:
          milliseconds: 500
      - service: scene.turn_on
        target: { entity_id: scene.huskers_before_chase }
        continue_on_error: true

  huskers_hail_burst_8s:
    alias: 'Huskers: Hail Varsity Burst (8s BPM)'
    mode: restart
    sequence:
      - variables:
          lights:
            - light.light_theater_left
            - light.light_theater_right
            - light.light_front_left
            - light.light_front_right
            - light.light_garage_left
            - light.lights_garage_center
            - light.light_garage_right
            - light.spare_light
          bpm: "{{ states('input_number.huskers_hail_bpm') | float(132) }}"
          beat_ms: '{{ (60000 / bpm) | int }}'
          total_ms: 8000
          beats: '{{ (total_ms / beat_ms) | round(0) | int }}'
          # Patterns as lists for yamllint-friendliness
          patterns:
            - [light.light_theater_left, light.light_front_right]
            - [light.light_theater_right, light.light_front_left]
            - [light.light_garage_left, light.spare_light]
            - [light.lights_garage_center, light.light_garage_right]
            - [light.light_theater_left, light.light_garage_left, light.spare_light]
            - [light.light_theater_right, light.light_garage_right, light.light_front_right]
      - service: scene.create
        data:
          scene_id: huskers_before_burst
          snapshot_entities: "{{ expand('group.huskers_eight_lights') | map(attribute='entity_id') | list }}"
      - service: light.turn_on
        target: { entity_id: group.huskers_eight_lights }
        data:
          hs_color: [355, 90]
          brightness: "{{ states('input_number.huskers_global_brightness') | int(255) }}"
          transition: 0.05
      - repeat:
          count: '{{ [beats, 1] | max }}'
          sequence:
            - variables:
                cream_set: '{{ patterns | random }}'
            - service: light.turn_on
              target: { entity_id: group.huskers_eight_lights }
              data:
                hs_color: [355, 90]
                brightness: "{{ states('input_number.huskers_global_brightness') | int(255) }}"
                transition: 0
            - service: light.turn_on
              target:
                entity_id: '{{ cream_set }}'
              data:
                hs_color: [45, 20]
                brightness: "{{ states('input_number.huskers_global_brightness') | int(255) }}"
                transition: 0.05
            - delay:
                milliseconds: '{{ (beat_ms * 0.80) | int }}'
      - service: scene.turn_on
        target: { entity_id: scene.huskers_before_burst }
        continue_on_error: true

  huskers_chase_step_once:
    alias: 'Huskers: Chase Step Once'
    mode: single
    sequence:
      - variables:
          lights:
            - light.light_theater_left
            - light.light_theater_right
            - light.light_front_left
            - light.light_front_right
            - light.light_garage_left
            - light.lights_garage_center
            - light.light_garage_right
            - light.spare_light
          xfade_ms: 300
      - variables:
          i: 0
      - repeat:
          count: '{{ lights | count }}'
          sequence:
            - variables:
                current: '{{ lights[i] }}'
                prev_index: '{{ (i - 1) % (lights | count) }}'
                previous: '{{ lights[prev_index|int] }}'
            - service: light.turn_on
              target: { entity_id: '{{ previous }}' }
              data:
                hs_color: [355, 90]
                brightness: "{{ states('input_number.huskers_global_brightness') | int(255) }}"
                transition: 0.3
            - service: light.turn_on
              target: { entity_id: '{{ current }}' }
              data:
                hs_color: [45, 20]
                brightness: "{{ states('input_number.huskers_global_brightness') | int(255) }}"
                transition: 0.3
            - variables:
                i: '{{ (i + 1) % (lights | count) }}'

# -------------------------------
# Game info + phase (templates)
# -------------------------------
template:
  - sensor:
      # Raw kickoff timestamp (ISO/epoch -> timestamp) for logic
      - name: Huskers Kickoff TS
        unique_id: huskers_kickoff_ts
        device_class: timestamp
        state: >-
          {% set cands = [
            'sensor.team_tracker_huskers_kickoff',
            'sensor.team_tracker_nebraska_kickoff',
            'sensor.nebraska_kickoff'
          ] %}
          {% set raw = namespace(v='') %}
          {% for e in cands %}
            {% set s = states(e) %}
            {% if s not in ['unknown','unavailable',''] and raw.v == '' %}
              {% set raw.v = s %}
            {% endif %}
          {% endfor %}
          {% if raw.v == '' %}
            unknown
          {% else %}
            {{ as_datetime(raw.v).isoformat() }}
          {% endif %}

      # Human-friendly local kickoff (for display)
      - name: Huskers Kickoff (America/Chicago)
        unique_id: huskers_kickoff_local
        state: >-
          {% set ts = states('sensor.huskers_kickoff_ts') %}
          {% if ts in ['unknown','unavailable',''] %}
            unknown
          {% else %}
            {{ as_local(as_datetime(ts)).strftime('%a %b %-d, %-I:%M %p %Z') }}
          {% endif %}

      # Minutes to kickoff (used by pregame automation)
      - name: Huskers Kickoff In (min)
        unique_id: huskers_kickoff_in_effective
        unit_of_measurement: min
        state: >-
          {% set ts = states('sensor.huskers_kickoff_ts') %}
          {% if ts in ['unknown','unavailable',''] %}
            unknown
          {% else %}
            {% set diff = (as_datetime(ts).timestamp() - now().timestamp()) / 60 %}
            {{ (diff | round(0)) | int }}
          {% endif %}

      # Opponent
      - name: Huskers Opponent
        unique_id: huskers_opponent
        state: >-
          {% set cands = [
            'sensor.team_tracker_huskers_opponent',
            'sensor.team_tracker_nebraska_opponent',
            'sensor.nebraska_opponent'
          ] %}
          {% set v = namespace(val='unknown') %}
          {% for e in cands %}
            {% set s = states(e) %}
            {% if s not in ['unknown','unavailable',''] and v.val == 'unknown' %}
              {% set v.val = s %}
            {% endif %}
          {% endfor %}
          {{ v.val }}

      - name: Huskers Venue
        unique_id: huskers_venue
        state: >-
          {% set cands = [
            'sensor.team_tracker_huskers_venue',
            'sensor.team_tracker_nebraska_venue',
            'sensor.nebraska_venue'
          ] %}
          {% set v = namespace(val='unknown') %}
          {% for e in cands %}
            {% set s = states(e) %}
            {% if s not in ['unknown','unavailable',''] and v.val == 'unknown' %}
              {% set v.val = s %}
            {% endif %}
          {% endfor %}
          {{ v.val }}

      - name: Huskers TV/Radio
        unique_id: huskers_tv_radio
        state: >-
          {% set cands = [
            'sensor.team_tracker_huskers_tv',
            'sensor.team_tracker_nebraska_tv',
            'sensor.nebraska_tv'
          ] %}
          {% set v = namespace(val='unknown') %}
          {% for e in cands %}
            {% set s = states(e) %}
            {% if s not in ['unknown','unavailable',''] and v.val == 'unknown' %}
              {% set v.val = s %}
            {% endif %}
          {% endfor %}
          {{ v.val }}

      - name: Huskers Odds/Line
        unique_id: huskers_line
        state: >-
          {% set cands = [
            'sensor.team_tracker_huskers_line',
            'sensor.team_tracker_nebraska_line',
            'sensor.nebraska_line'
          ] %}
          {% set v = namespace(val='unknown') %}
          {% for e in cands %}
            {% set s = states(e) %}
            {% if s not in ['unknown','unavailable',''] and v.val == 'unknown' %}
              {% set v.val = s %}
            {% endif %}
          {% endfor %}
          {{ v.val }}

      # Live: scores + meta
      - name: Huskers Score (Home)
        unique_id: huskers_score_home
        state: >-
          {% set cands = [
            'sensor.team_tracker_huskers_score_home',
            'sensor.team_tracker_nebraska_score_home',
            'sensor.nebraska_score_home'
          ] %}
          {% for e in cands %}
            {% set s = states(e) %}
            {% if s not in ['unknown','unavailable',''] %}
              {{ s }}
              {% break %}
            {% endif %}
          {% endfor %}
      - name: Huskers Score (Away)
        unique_id: huskers_score_away
        state: >-
          {% set cands = [
            'sensor.team_tracker_huskers_score_away',
            'sensor.team_tracker_nebraska_score_away',
            'sensor.nebraska_score_away'
          ] %}
          {% for e in cands %}
            {% set s = states(e) %}
            {% if s not in ['unknown','unavailable',''] %}
              {{ s }}
              {% break %}
            {% endif %}
          {% endfor %}

      # Single "our score" sensor used by touchdown automation
      - name: Huskers Our Score (effective)
        unique_id: huskers_our_score_effective
        state: "{{ states('sensor.huskers_score_home') | int(0) }}"

      - name: Huskers Quarter
        unique_id: huskers_quarter
        state: >-
          {% set cands = [
            'sensor.team_tracker_huskers_quarter',
            'sensor.team_tracker_nebraska_quarter',
            'sensor.nebraska_quarter'
          ] %}
          {% for e in cands %}
            {% set s = states(e) %}
            {% if s not in ['unknown','unavailable',''] %}
              {{ s }}
              {% break %}
            {% endif %}
          {% endfor %}

      - name: Huskers Game Clock
        unique_id: huskers_clock
        state: >-
          {% set cands = [
            'sensor.team_tracker_huskers_clock',
            'sensor.team_tracker_nebraska_clock',
            'sensor.nebraska_clock'
          ] %}
          {% for e in cands %}
            {% set s = states(e) %}
            {% if s not in ['unknown','unavailable',''] %}
              {{ s }}
              {% break %}
            {% endif %}
          {% endfor %}

      - name: Huskers Possession
        unique_id: huskers_possession
        state: >-
          {% set cands = [
            'sensor.team_tracker_huskers_possession',
            'sensor.team_tracker_nebraska_possession',
            'sensor.nebraska_possession'
          ] %}
          {% for e in cands %}
            {% set s = states(e) %}
            {% if s not in ['unknown','unavailable',''] %}
              {{ s }}
              {% break %}
            {% endif %}
          {% endfor %}

      - name: Huskers Down & Distance
        unique_id: huskers_down_distance
        state: >-
          {% set cands = [
            'sensor.team_tracker_huskers_down_distance',
            'sensor.team_tracker_nebraska_down_distance',
            'sensor.nebraska_down_distance'
          ] %}
          {% for e in cands %}
            {% set s = states(e) %}
            {% if s not in ['unknown','unavailable',''] %}
              {{ s }}
              {% break %}
            {% endif %}
          {% endfor %}

      - name: Huskers Last Scoring Play
        unique_id: huskers_last_scoring_play
        state: >-
          {% set cands = [
            'sensor.team_tracker_huskers_last_score',
            'sensor.team_tracker_nebraska_last_score',
            'sensor.nebraska_last_score'
          ] %}
          {% for e in cands %}
            {% set s = states(e) %}
            {% if s not in ['unknown','unavailable',''] %}
              {{ s }}
              {% break %}
            {% endif %}
          {% endfor %}

      - name: Huskers Final Scoreline
        unique_id: huskers_final_scoreline
        state: >-
          {% set home = states('sensor.huskers_score_home') %}
          {% set away = states('sensor.huskers_score_away') %}
          {% set opp  = states('sensor.huskers_opponent') %}
          {% if home in ['unknown','unavailable',''] or away in ['unknown','unavailable',''] or opp in ['unknown','unavailable',''] %}
            unknown
          {% else %}
            Nebraska {{ home }} – {{ opp }} {{ away }}
          {% endif %}

      # Current record (overall)
      - name: Huskers Record (Overall)
        unique_id: huskers_record_overall
        state: >-
          {% set cands = [
            'sensor.team_tracker_huskers_record',
            'sensor.team_tracker_nebraska_record',
            'sensor.nebraska_record'
          ] %}
          {% for e in cands %}
            {% set s = states(e) %}
            {% if s not in ['unknown','unavailable',''] %}
              {{ s }}
              {% break %}
            {% endif %}
          {% endfor %}

      # Current record (conference)
      - name: Huskers Record (Conference)
        unique_id: huskers_record_conference
        state: >-
          {% set cands = [
            'sensor.team_tracker_huskers_record_conference',
            'sensor.team_tracker_nebraska_record_conference',
            'sensor.nebraska_record_conference',
            'sensor.team_tracker_huskers_conf_record',
            'sensor.team_tracker_nebraska_conf_record'
          ] %}
          {% set v = 'unknown' %}
          {% for e in cands %}
            {% set s = states(e) %}
            {% if s not in ['unknown','unavailable',''] %}
              {% set v = s %}
              {% break %}
            {% endif %}
          {% endfor %}
          {{ v }}

      # Conference standing (rank/position)
      - name: Huskers Conference Standing
        unique_id: huskers_conference_standing
        state: >-
          {% set cands = [
            'sensor.team_tracker_huskers_conference_standing',
            'sensor.team_tracker_nebraska_conference_standing',
            'sensor.nebraska_conference_standing',
            'sensor.team_tracker_huskers_standing',
            'sensor.team_tracker_nebraska_standing'
          ] %}
          {% set v = 'unknown' %}
          {% for e in cands %}
            {% set s = states(e) %}
            {% if s not in ['unknown','unavailable',''] %}
              {% set v = s %}
              {% break %}
            {% endif %}
          {% endfor %}
          {{ v }}

      # AP rank (if available)
      - name: Huskers AP Rank
        unique_id: huskers_ap_rank
        state: >-
          {% set cands = [
            'sensor.team_tracker_huskers_ap_rank',
            'sensor.team_tracker_nebraska_ap_rank',
            'sensor.nebraska_ap_rank',
            'sensor.team_tracker_huskers_rank',
            'sensor.team_tracker_nebraska_rank'
          ] %}
          {% set v = 'unknown' %}
          {% for e in cands %}
            {% set s = states(e) %}
            {% if s not in ['unknown','unavailable',''] %}
              {% set v = s %}
              {% break %}
            {% endif %}
          {% endfor %}
          {{ v }}

      # Odds / line (alias of earlier "line" but with friendlier slug)
      - name: Huskers Odds/Line
        unique_id: huskers_odds_line
        state: >-
          {% set cands = [
            'sensor.team_tracker_huskers_line',
            'sensor.team_tracker_nebraska_line',
            'sensor.nebraska_line',
            'sensor.huskers_line'
          ] %}
          {% set v = 'unknown' %}
          {% for e in cands %}
            {% set s = states(e) %}
            {% if s not in ['unknown','unavailable',''] %}
              {% set v = s %}
              {% break %}
            {% endif %}
          {% endfor %}
          {{ v }}

      # Upcoming schedule as Markdown (next ~5 games if exposed by your tracker)
      - name: Huskers Schedule (Markdown)
        unique_id: huskers_schedule_md
        state: >-
          {% set cand = [
            'sensor.team_tracker_huskers_schedule',
            'sensor.team_tracker_nebraska_schedule',
            'sensor.nebraska_schedule',
            'sensor.team_tracker_huskers',
            'sensor.team_tracker_nebraska'
          ] %}
          {% set items = none %}
          {% for e in cand %}
            {% set a = state_attr(e,'upcoming') or state_attr(e,'next_games') or state_attr(e,'schedule') %}
            {% if a %}
              {% set items = a %}
              {% break %}
            {% endif %}
          {% endfor %}
          {% if items %}
            {% set out = namespace(s='') %}
            {% for g in items[:5] %}
              {% set when = g.datetime or g.date or g.kickoff or g.start_time %}
              {% set opp  = g.opponent or g.opp or g.opponent_name %}
              {% set ha   = (g.home_away or g.site or g.venue_type|string).lower() %}
              {% set venue= g.venue or g.site_name %}
              {% set tv   = g.tv or g.television or g.broadcast %}
              {% if when %}
                {% set dt = as_datetime(when) %}
                {% if dt is not none %}
                  {% set when = as_local(dt).strftime('%a %b %-d, %-I:%M %p %Z') %}
                {% endif %}
              {% endif %}
              {% set tag = 'vs' if ha in ['home','h','vs','home game'] else 'at' %}
              {% set line = '- ' ~ (when or 'TBD') ~ ' ' ~ tag ~ ' ' ~ (opp or 'TBD') %}
              {% if venue %}{% set line = line ~ ' (' ~ venue ~ ')' %}{% endif %}
              {% if tv %}{% set line = line ~ ', ' ~ tv %}{% endif %}
              {% set out.s = out.s + line + '\n' %}
            {% endfor %}
            {{ out.s.strip() }}
          {% else %}
            _No upcoming games found._
          {% endif %}

  - binary_sensor:
      - name: Huskers Is Pregame
        unique_id: huskers_is_pregame
        state: >-
          {% set status_cands = [
            'sensor.team_tracker_huskers_status',
            'sensor.team_tracker_nebraska_status',
            'sensor.nebraska_status'
          ] %}
          {% set status = namespace(val='') %}
          {% for e in status_cands %}
            {% set s = states(e) | lower %}
            {% if s not in ['unknown','unavailable',''] and status.val == '' %}
              {% set status.val = s %}
            {% endif %}
          {% endfor %}
          {% if status.val in ['pre','pregame','scheduled'] %}
            true
          {% elif status.val in ['in','in progress','live','halftime','1st','2nd','3rd','4th','ot','overtime'] %}
            false
          {% elif status.val in ['final','post','postgame'] %}
            false
          {% else %}
            {% set ts = states('sensor.huskers_kickoff_ts') %}
            {% if ts in ['unknown','unavailable',''] %}
              false
            {% else %}
              {{ as_datetime(ts).timestamp() > now().timestamp() }}
            {% endif %}
          {% endif %}

      - name: Huskers Is Live
        unique_id: huskers_is_live
        state: >-
          {% set status_cands = [
            'sensor.team_tracker_huskers_status',
            'sensor.team_tracker_nebraska_status',
            'sensor.nebraska_status'
          ] %}
          {% set s = namespace(val='') %}
          {% for e in status_cands %}
            {% set v = states(e) | lower %}
            {% if v not in ['unknown','unavailable',''] and s.val == '' %}
              {% set s.val = v %}
            {% endif %}
          {% endfor %}
          {{ s.val in ['in','in progress','live','halftime','1st','2nd','3rd','4th','ot','overtime'] }}

      - name: Huskers Is Postgame
        unique_id: huskers_is_postgame
        state: >-
          {% set status_cands = [
            'sensor.team_tracker_huskers_status',
            'sensor.team_tracker_nebraska_status',
            'sensor.nebraska_status'
          ] %}
          {% set s = namespace(val='') %}
          {% for e in status_cands %}
            {% set v = states(e) | lower %}
            {% if v not in ['unknown','unavailable',''] and s.val == '' %}
              {% set s.val = v %}
            {% endif %}
          {% endfor %}
          {{ s.val in ['final','post','postgame'] }}

# -------------------------------
# Automations (IDs preserved)
# -------------------------------
automation:
  - id: huskers_pregame_tminus20_showtime
    alias: 'Huskers: Pregame Showtime (T-20 Minutes)'
    description: 'Starts the 30s cream chase ~20 minutes before kickoff.'
    initial_state: true
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: sensor.huskers_kickoff_in_effective
        above: 19
        below: 21
        for:
          seconds: 5
    condition:
      - condition: state
        entity_id: input_boolean.huskers_automations_enabled
        state: 'on'
      - condition: state
        entity_id: input_boolean.huskers_game_mode
        state: 'on'
      - condition: state
        entity_id: binary_sensor.huskers_is_pregame
        state: 'on'
      - condition: state
        entity_id: script.huskers_chase30_loop
        state: 'off'
      - condition: state
        entity_id: script.huskers_chase_speed_loop
        state: 'off'
    action:
      - service: script.turn_on
        target: { entity_id: script.huskers_chase30_start }
      - service: logbook.log
        data:
          name: Huskers Automation
          message: "Pregame show started (T-{{ states('sensor.huskers_kickoff_in_effective') }} min)"

  - id: huskers_td_burst_on_score
    alias: 'Huskers: Touchdown Celebration'
    description: 'Fires Hail Varsity BPM burst when Nebraska score increases.'
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.huskers_our_score_effective
    condition:
      - condition: state
        entity_id: input_boolean.huskers_automations_enabled
        state: 'on'
      - condition: state
        entity_id: input_boolean.huskers_game_mode
        state: 'on'
      - condition: template
        value_template: >-
          {{ trigger.from_state is not none and
             trigger.to_state is not none and
             (trigger.to_state.state | int(0)) > (trigger.from_state.state | int(0)) }}
    action:
      - service: script.turn_on
        target: { entity_id: script.huskers_hail_burst_8s }
      - service: logbook.log
        data:
          name: Huskers Celebration
          message: 'Score: {{ trigger.from_state.state }} → {{ trigger.to_state.state }} (Hail burst)'
          entity_id: automation.huskers_td_burst_on_score

  - id: huskers_postgame_cleanup
    alias: 'Huskers: Postgame Cleanup'
    description: 'Stops chase loops and restores lights at final.'
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.huskers_is_postgame
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.huskers_automations_enabled
        state: 'on'
      - condition: state
        entity_id: input_boolean.huskers_game_mode
        state: 'on'
    action:
      - parallel:
          - service: script.turn_on
            target: { entity_id: script.huskers_chase30_stop }
          - service: script.turn_on
            target: { entity_id: script.huskers_chase_speed_stop }
      - service: logbook.log
        data:
          name: Huskers Automation
          message: 'Postgame cleanup completed (loops stopped, state restored)'
          entity_id: automation.huskers_postgame_cleanup
