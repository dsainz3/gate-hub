# packages/huskers.yaml
# Single-package setup for Nebraska Huskers:
# - ESPN REST endpoints (raw data)
# - Template sensors (schedule/status/scores/record/standings/kickoff)
# - ESPN phase flags (pre/live/post)
# - Helpers (inputs, groups, scenes)
# - Light show scripts
# - Automations (pregame T-20, TD burst, postgame cleanup)

################################################################################
# RAW DATA (ESPN)
################################################################################
rest:
  - resource: 'https://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard'
    method: GET
    scan_interval: 300
    timeout: 30
    sensor:
      - name: espn_cfb_scoreboard
        unique_id: espn_cfb_scoreboard
        value_template: >-
          {{ (value_json.events | length) if (value_json is defined and value_json.events is defined) else 0 }}
        json_attributes:
          - events
          - week
          - season
        availability: >-
          {{ value_json is defined }}

  - resource: 'https://site.api.espn.com/apis/site/v2/sports/football/college-football/teams/158'
    method: GET
    scan_interval: 3600
    timeout: 30
    sensor:
      - name: espn_nebraska_team_info
        unique_id: espn_nebraska_team_info
        value_template: >-
          {{ value_json.team.displayName if (value_json is defined and value_json.team is defined) else 'Nebraska' }}
        json_attributes:
          - team
        availability: >-
          {{ value_json is defined }}

  - resource: 'https://site.api.espn.com/apis/site/v2/sports/football/college-football/teams/158/schedule'
    method: GET
    scan_interval: 1800
    timeout: 30
    sensor:
      - name: espn_nebraska_schedule
        unique_id: espn_nebraska_schedule
        value_template: >-
          {{ (value_json.events | length) if (value_json is defined and value_json.events is defined) else 0 }}
        json_attributes:
          - events
          - team
          - requestedSeason
        availability: >-
          {{ value_json is defined }}

  - resource: 'https://site.api.espn.com/apis/site/v2/sports/football/college-football/rankings'
    method: GET
    scan_interval: 3600
    timeout: 30
    sensor:
      - name: espn_cfb_rankings
        unique_id: espn_cfb_rankings
        value_template: >-
          {{ (value_json.rankings | length) if (value_json is defined and value_json.rankings is defined) else 0 }}
        json_attributes:
          - rankings
        availability: >-
          {{ value_json is defined }}

  - resource_template: >-
      {% set season = state_attr('sensor.espn_nebraska_schedule', 'requestedSeason') %}
      {% if season is mapping %}
        {% set season_year = season['year'] if 'year' in season else now().year %}
        {% set season_type = season['type'] if 'type' in season else 2 %}
      {% else %}
        {% set season_year = now().year %}
        {% set season_type = 2 %}
      {% endif %}
      {% set current_year = now().year %}
      {% set adjusted_year = season_year if season_year <= current_year else current_year %}
      {% if adjusted_year == current_year and now().month < 6 %}
        {% set adjusted_year = adjusted_year - 1 %}
      {% endif %}
      https://sports.core.api.espn.com/v2/sports/football/leagues/college-football/seasons/{{ adjusted_year }}/types/{{ season_type }}/groups/5/standings/0?lang=en&region=us
    method: GET
    scan_interval: 1800
    timeout: 30
    sensor:
      - name: espn_big_ten_teams
        unique_id: espn_big_ten_teams
        value_template: >-
          {% if value_json is defined and value_json.standings is defined %}
            {{ value_json.standings | length }}
          {% else %}0{% endif %}
        json_attributes:
          - standings
          - displayName
        availability: >-
          {{ value_json is defined and value_json.standings is defined and value_json.standings | length > 0 }}

################################################################################
# HELPERS
################################################################################
input_boolean:
  huskers_automations_enabled:
    name: Huskers Automations Enabled
    icon: mdi:flag-checkered
    initial: true

  huskers_game_mode:
    name: Huskers Game Mode
    icon: mdi:stadium
    initial: true

  huskers_test_mode:
    name: Huskers Test Mode
    icon: mdi:flask
    initial: false

  huskers_use_manual_score:
    name: Huskers Use Manual Score
    icon: mdi:tune
    initial: false

  huskers_use_manual_kickoff:
    name: Huskers Use Manual Kickoff
    icon: mdi:timer-cog
    initial: false

  huskers_color_show:
    name: Huskers Color Show Active
    icon: mdi:lightbulb-group
    initial: false

  huskers_theater_show_running:
    name: Huskers Theater Show Running
    icon: mdi:theater
    initial: false

input_number:
  huskers_chase_cycle_seconds:
    name: Chase Cycle Length
    icon: mdi:speedometer
    min: 8
    max: 120
    step: 1
    mode: slider
    unit_of_measurement: s
    initial: 30

  huskers_hail_bpm:
    name: Hail Varsity BPM
    icon: mdi:metronome
    min: 80
    max: 180
    step: 1
    mode: slider
    unit_of_measurement: bpm
    initial: 132

  huskers_hail_varsity_bpm:
    name: Hail Varsity BPM (Alias)
    icon: mdi:metronome
    min: 80
    max: 180
    step: 1
    mode: slider
    unit_of_measurement: bpm
    initial: 132

  huskers_our_score:
    name: Our Score (Auto)
    icon: mdi:scoreboard
    min: 0
    max: 100
    step: 1
    initial: 0

  huskers_our_score_manual:
    name: Our Score (Manual)
    icon: mdi:account-edit
    min: 0
    max: 100
    step: 1
    initial: 0
  huskers_opponent_score_manual:
    name: Opponent Score (Manual)
    icon: mdi:account-multiple
    min: 0
    max: 100
    step: 1
    initial: 0

  huskers_kickoff_in_manual:
    name: Kickoff In (Manual)
    icon: mdi:clock-edit
    min: -300
    max: 300
    step: 1
    unit_of_measurement: min
    initial: 60

################################################################################
# CONNECTIVITY
################################################################################

input_text:
  huskers_last_score:
    name: Huskers Last Score Text
    icon: mdi:text

################################################################################
# GROUPS
################################################################################
group:
  huskers_eight_lights:
    name: Huskers – All Eight Lights
    entities:
      - light.light_theater_left
      - light.light_theater_right
      - light.light_front_left
      - light.light_front_right
      - light.light_garage_left
      - light.light_garage_center
      - light.light_garage_right
      - light.light_office

################################################################################
# SCENES
################################################################################
scene:
  - id: huskers_seven_all_scarlet
    name: Huskers – All Scarlet (Base)
    entities:
      light.light_theater_left:
        state: 'on'
        hs_color: [355, 90]
        brightness: 255
      light.light_theater_right:
        state: 'on'
        hs_color: [355, 90]
        brightness: 255
      light.light_front_left:
        state: 'on'
        hs_color: [355, 90]
        brightness: 255
      light.light_front_right:
        state: 'on'
        hs_color: [355, 90]
        brightness: 255
      light.light_garage_left:
        state: 'on'
        hs_color: [355, 90]
        brightness: 255
      light.light_garage_center:
        state: 'on'
        hs_color: [355, 90]
        brightness: 255
      light.light_garage_right:
        state: 'on'
        hs_color: [355, 90]
        brightness: 255
      light.light_office:
        state: 'on'
        hs_color: [355, 90]
        brightness: 255

################################################################################
# SCRIPTS
################################################################################
script:
  huskers_chase30_start:
    alias: 'Huskers: Start Cream Chase (45s Dual)'
    mode: restart
    sequence:
      - variables:
          permanent_light: light.permanent_outdoor_lights
          husker_effect_name: >-
            {% set effects = state_attr('light.permanent_outdoor_lights', 'effect_list') or [] %}
            {% if 'LED-Gametime' in effects %}
              LED-Gametime
            {% elif 'Husker' in effects %}
              Husker
            {% elif 'Nebraska' in effects %}
              Nebraska
            {% else %}
              ''
            {% endif %}
          scarlet_rgb: [228, 28, 56]
          cream_rgb: [253, 243, 231]
          chase_brightness_pct: 80
          permanent_brightness_pct: 100
      - service: script.turn_off
        target:
          entity_id: script.huskers_chase_speed_loop
        continue_on_error: true
      - service: scene.create
        data:
          scene_id: huskers_before_chase
          snapshot_entities: >-
            {% set base = expand('group.huskers_eight_lights') | map(attribute='entity_id') | list %}
            {% if has_value(permanent_light) %}
              {{ base + [permanent_light] }}
            {% else %}
              {{ base }}
            {% endif %}
      - service: light.turn_on
        target:
          entity_id: group.huskers_eight_lights
        data:
          rgb_color: '{{ scarlet_rgb }}'
          brightness_pct: '{{ chase_brightness_pct }}'
          transition: 0.1
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ has_value(permanent_light) }}"
            sequence:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ husker_effect_name != '' }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id: '{{ permanent_light }}'
                        data:
                          effect: '{{ husker_effect_name }}'
                          brightness_pct: '{{ permanent_brightness_pct }}'
                default:
                  - service: light.turn_on
                    target:
                      entity_id: '{{ permanent_light }}'
                    data:
                      rgb_color: '{{ scarlet_rgb }}'
                      brightness_pct: '{{ permanent_brightness_pct }}'
                      transition: 0.1
      - service: script.turn_on
        target:
          entity_id: script.huskers_chase30_loop

  huskers_chase30_loop:
    alias: 'Huskers: Cream Chase LOOP (45s Dual)'
    mode: restart
    sequence:
      - variables:
          lights:
            - light.light_theater_left
            - light.light_theater_right
            - light.light_front_left
            - light.light_front_right
            - light.light_garage_left
            - light.light_garage_center
            - light.light_garage_right
            - light.light_office
          accent_spacing: 3
          cycle_ms: 45000
          step_ms: '{{ (cycle_ms / (lights | count)) | int }}'
          xfade_ms: 2000
          transition_sec: '{{ (xfade_ms / 1000) | float }}'
          scarlet_rgb: [228, 28, 56]
          cream_rgb: [253, 243, 231]
          chase_brightness_pct: 80
          permanent_brightness_pct: 100
          hold_ms: '{{ [ (step_ms - xfade_ms) | int, 250 ] | max }}'
      - repeat:
          while:
            - condition: template
              value_template: '{{ true }}'
          sequence:
            - repeat:
                count: '{{ lights | count }}'
                sequence:
                  - variables:
                      total: '{{ lights | count }}'
                      spacing: '{{ [accent_spacing | int, (lights | count) - 1] | min }}'
                      current_index: '{{ ((repeat.index | int) - 1) % total }}'
                      secondary_index: '{{ (current_index + spacing) % total }}'
                      prev_primary_index: '{{ (current_index - 1) % total }}'
                      prev_secondary_index: '{{ (prev_primary_index + spacing) % total }}'
                      primary_light: '{{ lights[current_index|int] }}'
                      secondary_light: '{{ lights[secondary_index|int] }}'
                      prev_primary_light: '{{ lights[prev_primary_index|int] }}'
                      prev_secondary_light: '{{ lights[prev_secondary_index|int] }}'
                  - service: light.turn_on
                    target:
                      entity_id: '{{ prev_primary_light }}'
                    data:
                      rgb_color: '{{ scarlet_rgb }}'
                      brightness_pct: '{{ chase_brightness_pct }}'
                      transition: '{{ transition_sec }}'
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ prev_secondary_light != prev_primary_light }}"
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: '{{ prev_secondary_light }}'
                            data:
                              rgb_color: '{{ scarlet_rgb }}'
                              brightness_pct: '{{ chase_brightness_pct }}'
                              transition: '{{ transition_sec }}'
                  - service: light.turn_on
                    target:
                      entity_id: '{{ primary_light }}'
                    data:
                      rgb_color: '{{ cream_rgb }}'
                      brightness_pct: '{{ chase_brightness_pct }}'
                      transition: '{{ transition_sec }}'
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ secondary_light != primary_light }}"
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: '{{ secondary_light }}'
                            data:
                              rgb_color: '{{ cream_rgb }}'
                              brightness_pct: '{{ chase_brightness_pct }}'
                              transition: '{{ transition_sec }}'
                  - delay:
                      milliseconds: '{{ hold_ms | int }}'

  huskers_chase30_stop:
    alias: 'Huskers: Stop Cream Chase (restore)'
    mode: single
    sequence:
      - service: script.turn_off
        target:
          entity_id: script.huskers_chase30_loop
      - delay: '00:00:00.5'
      - service: scene.turn_on
        target:
          entity_id: scene.huskers_before_chase
        continue_on_error: true

  huskers_chase_speed_start:
    alias: 'Huskers: Start Cream Chase (Variable-Speed)'
    mode: restart
    sequence:
      - variables:
          permanent_light: light.permanent_outdoor_lights
          husker_effect_name: >-
            {% set effects = state_attr('light.permanent_outdoor_lights', 'effect_list') or [] %}
            {% if 'LED-Gametime' in effects %}
              LED-Gametime
            {% elif 'Husker' in effects %}
              Husker
            {% elif 'Nebraska' in effects %}
              Nebraska
            {% else %}
              ''
            {% endif %}
          scarlet_rgb: [228, 28, 56]
          cream_rgb: [253, 243, 231]
          chase_brightness_pct: 80
      - service: script.turn_off
        target:
          entity_id: script.huskers_chase30_loop
        continue_on_error: true
      - service: scene.create
        data:
          scene_id: huskers_before_chase
          snapshot_entities: >-
            {% set base = expand('group.huskers_eight_lights') | map(attribute='entity_id') | list %}
            {% if has_value(permanent_light) %}
              {{ base + [permanent_light] }}
            {% else %}
              {{ base }}
            {% endif %}
      - service: light.turn_on
        target:
          entity_id: group.huskers_eight_lights
        data:
          rgb_color: '{{ scarlet_rgb }}'
          brightness_pct: '{{ chase_brightness_pct }}'
          transition: 0.1
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ has_value(permanent_light) }}"
            sequence:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ husker_effect_name != '' }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id: '{{ permanent_light }}'
                        data:
                          effect: '{{ husker_effect_name }}'
                          brightness_pct: '{{ permanent_brightness_pct }}'
                default:
                  - service: light.turn_on
                    target:
                      entity_id: '{{ permanent_light }}'
                    data:
                      rgb_color: '{{ scarlet_rgb }}'
                      brightness_pct: '{{ permanent_brightness_pct }}'
                      transition: 0.1
      - service: script.turn_on
        target:
          entity_id: script.huskers_chase_speed_loop

  huskers_chase_speed_loop:
    alias: 'Huskers: Cream Chase LOOP (Variable-Speed)'
    mode: restart
    sequence:
      - variables:
          lights:
            - light.light_theater_left
            - light.light_theater_right
            - light.light_front_left
            - light.light_front_right
            - light.light_garage_left
            - light.light_garage_center
            - light.light_garage_right
            - light.light_office
      - repeat:
          while:
            - condition: template
              value_template: '{{ true }}'
          sequence:
            - variables:
                cycle_secs: "{{ states('input_number.huskers_chase_cycle_seconds') | float(30) }}"
                step_ms: '{{ (cycle_secs * 1000 / (lights | count)) | int }}'
                xfade_ms: 300
                hold_ms: '{{ [ (step_ms - xfade_ms) | int, 250 ] | max }}'
            - repeat:
                for_each: '{{ lights }}'
                sequence:
                  - variables:
                      current: '{{ repeat.item }}'
                      prev_index: '{{ (repeat.index - 2) % (lights | count) }}'
                      previous: '{{ lights[prev_index|int] }}'
                  - service: light.turn_on
                    target:
                      entity_id: '{{ previous }}'
                    data:
                      hs_color: [355, 90]
                      brightness: 255
                      transition: 0.3
                  - service: light.turn_on
                    target:
                      entity_id: '{{ current }}'
                    data:
                      hs_color: [45, 20]
                      brightness: 255
                      transition: 0.3
                  - delay:
                      milliseconds: '{{ hold_ms | int }}'

  huskers_chase_speed_stop:
    alias: 'Huskers: Stop Cream Chase (Variable-Speed, restore)'
    mode: single
    sequence:
      - service: script.turn_off
        target:
          entity_id: script.huskers_chase_speed_loop
      - delay: '00:00:00.5'
      - service: scene.turn_on
        target:
          entity_id: scene.huskers_before_chase
        continue_on_error: true

  huskers_hail_burst_8s:
    alias: 'Huskers: Hail Varsity Burst (8s BPM)'
    mode: restart
    sequence:
      - variables:
          permanent_light: light.permanent_outdoor_lights
          husker_effect_name: >-
            {% set effects = state_attr('light.permanent_outdoor_lights', 'effect_list') or [] %}
            {% if 'LED-Gametime' in effects %}
              LED-Gametime
            {% elif 'Husker' in effects %}
              Husker
            {% elif 'Nebraska' in effects %}
              Nebraska
            {% else %}
              ''
            {% endif %}
          scarlet_rgb: [228, 28, 56]
          cream_rgb: [253, 243, 231]
          chase_brightness_pct: 80
          permanent_brightness_pct: 100
      - variables:
          lights:
            - light.light_theater_left
            - light.light_theater_right
            - light.light_front_left
            - light.light_front_right
            - light.light_garage_left
            - light.light_garage_center
            - light.light_garage_right
            - light.light_office
          bpm: "{{ states('input_number.huskers_hail_bpm') | float(132) }}"
          beat_ms: '{{ (60000 / bpm) | int }}'
          total_ms: 8000
          beats: '{{ (total_ms / beat_ms) | round(0) | int }}'
          patterns:
            -   - light.light_theater_left
                - light.light_front_right
            -   - light.light_theater_right
                - light.light_front_left
            -   - light.light_garage_left
                - light.light_office
            -   - light.light_garage_center
                - light.light_garage_right
            -   - light.light_theater_left
                - light.light_garage_left
                - light.light_office
            -   - light.light_theater_right
                - light.light_garage_right
                - light.light_front_right
      - service: scene.create
        data:
          scene_id: huskers_before_burst
          snapshot_entities: >-
            {% set base = expand('group.huskers_eight_lights') | map(attribute='entity_id') | list %}
            {% if has_value(permanent_light) %}
              {{ base + [permanent_light] }}
            {% else %}
              {{ base }}
            {% endif %}
      - service: light.turn_on
        target:
          entity_id: group.huskers_eight_lights
        data:
          rgb_color: '{{ scarlet_rgb }}'
          brightness_pct: '{{ chase_brightness_pct }}'
          transition: 0.05
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ has_value(permanent_light) }}"
            sequence:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ husker_effect_name != '' }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id: '{{ permanent_light }}'
                        data:
                          effect: '{{ husker_effect_name }}'
                          brightness_pct: '{{ permanent_brightness_pct }}'
                default:
                  - service: light.turn_on
                    target:
                      entity_id: '{{ permanent_light }}'
                    data:
                      rgb_color: '{{ scarlet_rgb }}'
                      brightness_pct: '{{ permanent_brightness_pct }}'
                      transition: 0.05
      - repeat:
          count: '{{ [beats, 1] | max }}'
          sequence:
            - variables:
                cream_set: '{{ patterns | random }}'
            - service: light.turn_on
              target:
                entity_id: group.huskers_eight_lights
              data:
                rgb_color: '{{ scarlet_rgb }}'
                brightness_pct: '{{ chase_brightness_pct }}'
                transition: 0
            - service: light.turn_on
              target:
                entity_id: '{{ cream_set }}'
              data:
                rgb_color: '{{ cream_rgb }}'
                brightness_pct: '{{ chase_brightness_pct }}'
                transition: 0.05
            - delay:
                milliseconds: '{{ (beat_ms * 0.80) | int }}'
      - service: scene.turn_on
        target:
          entity_id: scene.huskers_before_burst
        continue_on_error: true

  kiosk_stop_all_huskers_shows:
    alias: 'Kiosk: Stop All Huskers Shows'
    mode: single
    sequence:
      - service: script.turn_on
        target:
          entity_id:
            - script.huskers_chase30_stop
            - script.huskers_chase_speed_stop

  # Debug helper routines exposed as scripts rather than automations
  huskers_debug_exterior_brightness:
    alias: '[Huskers Debug] Exterior brightness check'
    mode: single
    variables:
      cloud_cover: "{{ states('sensor.openweathermap_cloud_coverage') | int(50) }}"
      calc_pct: >-
        {% set pct = 100 - (cloud_cover * 0.6) %}
        {{ [10, [pct|round(0), 100]|min]|max }}
    sequence:
      - service: light.turn_on
        target:
          entity_id:
            - light.front_porch_lights
            - light.light_garage_left
            - light.light_garage_center
            - light.light_garage_right
        data:
          brightness_pct: "{{ calc_pct }}"
          transition: 2
      - if:
          - condition: template
            value_template: "{{ has_value('light.permanent_outdoor_lights') }}"
        then:
          - service: light.turn_on
            target:
              entity_id: light.permanent_outdoor_lights
            data:
              brightness_pct: "{{ calc_pct }}"
              transition: 2
            continue_on_error: true
      - service: logbook.log
        data:
          name: Huskers Debug
          message: "Exterior brightness test → {{ calc_pct }}% (cloud: {{ cloud_cover }}%)"

  huskers_debug_scene_activated:
    alias: '[Huskers Debug] Scene activated'
    mode: single
    variables:
      test_scene: scene.huskers_seven_all_scarlet
    sequence:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ has_value(test_scene) }}"
            sequence:
              - service: scene.turn_on
                target:
                  entity_id: "{{ test_scene }}"
              - service: logbook.log
                data:
                  name: Huskers Debug
                  message: "Scene turned on: {{ test_scene }}"
        default:
          - service: logbook.log
            data:
              name: Huskers Debug
              message: "Scene not found: {{ test_scene }} (skipped)"

  huskers_debug_script_start:
    alias: '[Huskers Debug] Script start'
    mode: single
    variables:
      start_script: script.huskers_chase30_start
    sequence:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ has_value(start_script) }}"
            sequence:
              - service: script.turn_on
                target:
                  entity_id: "{{ start_script }}"
              - service: logbook.log
                data:
                  name: Huskers Debug
                  message: "Started script: {{ start_script }}"
        default:
          - service: logbook.log
            data:
              name: Huskers Debug
              message: "Script not found: {{ start_script }} (skipped)"

  huskers_debug_script_stop:
    alias: '[Huskers Debug] Script stop'
    mode: single
    variables:
      loops:
        - script.huskers_chase30_loop
        - script.huskers_chase_speed_loop
    sequence:
      - repeat:
          for_each: "{{ loops }}"
          sequence:
            - if:
                - condition: template
                  value_template: "{{ has_value(repeat.item) }}"
              then:
                - service: script.turn_off
                  target:
                    entity_id: "{{ repeat.item }}"
                - service: logbook.log
                  data:
                    name: Huskers Debug
                    message: "Stopped {{ repeat.item }}"
      - service: logbook.log
        data:
          name: Huskers Debug
          message: 'Loop-stop sweep completed'

  huskers_debug_theater_color_change:
    alias: '[Huskers Debug] Theater color change'
    mode: single
    variables:
      test_ct: 370
      test_brightness: 60
    sequence:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ has_value('light.theater_lights') }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: light.theater_lights
                data:
                  brightness_pct: "{{ test_brightness }}"
                  color_temp: "{{ test_ct }}"
                  transition: 1
              - delay: '00:00:02'
              - service: light.turn_on
                target:
                  entity_id: light.theater_lights
                data:
                  brightness_pct: 30
                  color_temp: 454
                  transition: 1
              - service: logbook.log
                data:
                  name: Huskers Debug
                  message: 'Theater color debug complete'
        default:
          - service: logbook.log
            data:
              name: Huskers Debug
              message: 'Theater lights entity not found (skipped)'

################################################################################
# TEMPLATE SENSORS & ESPN PHASE FLAGS
################################################################################
template:
  - sensor:
      # Schedule (short state, full text in attribute to avoid 255-char limit)
      - name: huskers_schedule_combined
        unique_id: huskers_schedule_combined
        state: >-
          {% set events = state_attr('sensor.espn_nebraska_schedule', 'events') or [] %}
          {% if events %}{{ events | length }} games scheduled{% else %}No schedule{% endif %}
        attributes:
          markdown: >-
            {% set events = state_attr('sensor.espn_nebraska_schedule', 'events') or [] %}
            {% if events -%}
            ## Nebraska Schedule ({{ now().year }})

            {% set ns = namespace(lines=[]) -%}
            {% set score_unknown = ['?', None, '', 'unknown', 'unavailable'] -%}
            {%- for game in events %}
              {%- set comp = (game.competitions | default([])) | first %}
              {%- if not comp %}{%- continue %}{%- endif %}
              {%- set date = (game.date | as_datetime | as_local) if game.date is defined else none %}
              {%- set us_home = comp.competitors[0].team.id == '158' if (comp.competitors is defined and comp.competitors|length >= 2) else false %}
              {%- set opp = comp.competitors[1].team.displayName if us_home and comp.competitors|length >= 2 else (comp.competitors[0].team.displayName if comp.competitors|length >= 1 else 'TBD') %}
              {%- set loc = 'vs' if us_home else 'at' %}
              {%- set done = comp.status.type.completed if (comp.status is defined and comp.status.type is defined) else false %}
              {%- set home = (comp.competitors | selectattr('homeAway','equalto','home') | list | first) %}
              {%- set away = (comp.competitors | selectattr('homeAway','equalto','away') | list | first) %}
              {%- set h_score = (home.score.value if home and home.score is mapping and home.score.value is defined else (home.score if home and home.score is defined else '?')) %}
              {%- set a_score = (away.score.value if away and away.score is mapping and away.score.value is defined else (away.score if away and away.score is defined else '?')) %}
              {%- set date_ts = as_timestamp(date, default=None) if date else none %}
              {%- set date_text = date_ts | timestamp_custom('%b %-d, %-I:%M %p', True) if date_ts is not none else 'TBD' %}
              {%- set h_fmt = h_score if h_score in score_unknown else (h_score | float(0) | round(0) | int) %}
              {%- set a_fmt = a_score if a_score in score_unknown else (a_score | float(0) | round(0) | int) %}
              {%- if done %}
                {%- set line = '- **' ~ date_text ~ '** — ' ~ loc ~ ' ' ~ opp ~ ' — **Final** ' ~ h_fmt ~ '-' ~ a_fmt %}
              {%- else %}
                {%- set line = '- **' ~ date_text ~ '** — ' ~ loc ~ ' ' ~ opp %}
              {%- endif %}
              {%- set ns.lines = ns.lines + [line] %}
            {%- endfor %}
            {{ ns.lines | join('\n') }}
            {%- else %}
            **Schedule unavailable**
            {%- endif %}
      - name: huskers_next_game
        unique_id: huskers_next_game
        icon: mdi:calendar-clock
        state: >-
          {% set events = state_attr('sensor.espn_nebraska_schedule', 'events') or [] %}
          {% set now_ts = now().timestamp() %}
          {% set next = namespace(game=None, comp=None, dt=None) %}
          {% for g in events %}
            {% set comp = (g.competitions | default([])) | first %}
            {% if not comp %}{% continue %}{% endif %}
            {% set dt = g.date | as_datetime %}
            {% if not dt %}{% continue %}{% endif %}
            {% set completed = comp.status.type.completed if (comp.status is defined and comp.status.type is defined) else false %}
            {% if not completed and dt.timestamp() >= (now_ts - 21600) %}
              {% set next.game = g %}
              {% set next.comp = comp %}
              {% set next.dt = dt %}
              {% break %}
            {% endif %}
          {% endfor %}
          {% if next.dt %}
            {% set local = next.dt | as_local %}
            {% set local_ts = as_timestamp(local, default=None) %}
            {% set our_team = next.comp.competitors | selectattr('team.id','equalto','158') | list | first %}
            {% set opponent = next.comp.competitors | rejectattr('team.id','equalto','158') | list | first %}
            {% set is_home = our_team.homeAway == 'home' if our_team is defined and our_team.homeAway is defined else false %}
            {% set opp_name = opponent.team.displayName if opponent and opponent.team is defined else 'TBD' %}
            {{ local_ts | timestamp_custom('%b %-d, %Y %-I:%M %p %Z', True) if local_ts is not none else 'TBD' }} — {% if is_home %}vs{% else %}@{% endif %} {{ opp_name }}
          {% else %}No upcoming game{% endif %}
        attributes:
          date: >-
            {% set events = state_attr('sensor.espn_nebraska_schedule', 'events') or [] %}
            {% set now_ts = now().timestamp() %}
            {% set next = namespace(dt=None) %}
            {% for g in events %}
              {% set comp = (g.competitions | default([])) | first %}
              {% if not comp %}{% continue %}{% endif %}
              {% set dt = g.date | as_datetime %}
              {% if not dt %}{% continue %}{% endif %}
              {% set completed = comp.status.type.completed if (comp.status is defined and comp.status.type is defined) else false %}
              {% if not completed and dt.timestamp() >= (now_ts - 21600) %}
                {% set next.dt = dt %}
                {% break %}
              {% endif %}
            {% endfor %}
            {% if next.dt %}
              {% set local = next.dt | as_local %}
              {% set local_ts = as_timestamp(local, default=None) %}
              {{ local_ts | timestamp_custom('%b %-d, %Y', True) if local_ts is not none else 'TBD' }}
            {% else %}No upcoming game{% endif %}
          time: >-
            {% set events = state_attr('sensor.espn_nebraska_schedule', 'events') or [] %}
            {% set now_ts = now().timestamp() %}
            {% set next = namespace(dt=None) %}
            {% for g in events %}
              {% set comp = (g.competitions | default([])) | first %}
              {% if not comp %}{% continue %}{% endif %}
              {% set dt = g.date | as_datetime %}
              {% if not dt %}{% continue %}{% endif %}
              {% set completed = comp.status.type.completed if (comp.status is defined and comp.status.type is defined) else false %}
              {% if not completed and dt.timestamp() >= (now_ts - 21600) %}
                {% set next.dt = dt %}
                {% break %}
              {% endif %}
            {% endfor %}
            {% if next.dt %}
              {% set local = next.dt | as_local %}
              {% set local_ts = as_timestamp(local, default=None) %}
              {{ local_ts | timestamp_custom('%-I:%M %p %Z', True) if local_ts is not none else 'TBD' }}
            {% else %}No upcoming game{% endif %}
          location: >-
            {% set events = state_attr('sensor.espn_nebraska_schedule', 'events') or [] %}
            {% set now_ts = now().timestamp() %}
            {% set next = namespace(comp=None) %}
            {% for g in events %}
              {% set comp = (g.competitions | default([])) | first %}
              {% if not comp %}{% continue %}{% endif %}
              {% set dt = g.date | as_datetime %}
              {% if not dt %}{% continue %}{% endif %}
              {% set completed = comp.status.type.completed if (comp.status is defined and comp.status.type is defined) else false %}
              {% if not completed and dt.timestamp() >= (now_ts - 21600) %}
                {% set next.comp = comp %}
                {% break %}
              {% endif %}
            {% endfor %}
            {% if next.comp %}
              {% set venue = next.comp.venue if next.comp.venue is defined else none %}
              {% set parts = [] %}
              {% if venue and venue.fullName is defined and venue.fullName %}
                {% set parts = parts + [venue.fullName] %}
              {% endif %}
              {% if venue and venue.address is defined %}
                {% set city = venue.address.city if venue.address.city is defined else '' %}
                {% set state = venue.address.state if venue.address.state is defined else '' %}
                {% set loc_parts = [] %}
                {% if city %}{% set loc_parts = loc_parts + [city] %}{% endif %}
                {% if state %}{% set loc_parts = loc_parts + [state] %}{% endif %}
                {% if loc_parts %}{% set parts = parts + [loc_parts | join(', ')] %}{% endif %}
              {% endif %}
              {% set base = parts | join(' – ') if parts else 'TBD' %}
              {% set our_team = next.comp.competitors | selectattr('team.id','equalto','158') | list | first %}
              {% set descriptor = 'Home' if our_team and our_team.homeAway is defined and our_team.homeAway == 'home' else 'Away' %}
              {% if base != 'TBD' %}
                {{ base }} ({{ descriptor }})
              {% else %}TBD{% endif %}
            {% else %}No upcoming game{% endif %}
          opponent: >-
            {% set events = state_attr('sensor.espn_nebraska_schedule', 'events') or [] %}
            {% set now_ts = now().timestamp() %}
            {% set next = namespace(comp=None) %}
            {% for g in events %}
              {% set comp = (g.competitions | default([])) | first %}
              {% if not comp %}{% continue %}{% endif %}
              {% set dt = g.date | as_datetime %}
              {% if not dt %}{% continue %}{% endif %}
              {% set completed = comp.status.type.completed if (comp.status is defined and comp.status.type is defined) else false %}
              {% if not completed and dt.timestamp() >= (now_ts - 21600) %}
                {% set next.comp = comp %}
                {% break %}
              {% endif %}
            {% endfor %}
            {% if next.comp %}
              {% set opponent = next.comp.competitors | rejectattr('team.id','equalto','158') | list | first %}
              {% if opponent and opponent.team is defined %}
                {{ opponent.team.displayName }}
              {% else %}TBD{% endif %}
            {% else %}No upcoming game{% endif %}
      # Today’s game status (plus basic attributes)
      - name: huskers_game_status_espn
        unique_id: huskers_game_status_espn
        variables:
          game_payload: >-
            {% set scoreboard_events = state_attr('sensor.espn_cfb_scoreboard', 'events') or [] %}
            {% set game = namespace(comp=None, source='none') %}
            {% for ev in scoreboard_events %}
              {% set comp = (ev.competitions | default([])) | first %}
              {% if comp and comp.competitors is defined %}
                {% if comp.competitors | selectattr('team.id','equalto','158') | list | count > 0 %}
                  {% set game.comp = comp %}
                  {% set game.source = 'scoreboard' %}
                  {% break %}
                {% endif %}
              {% endif %}
            {% endfor %}

            {% if game.comp is none %}
              {% set schedule_events = state_attr('sensor.espn_nebraska_schedule', 'events') or [] %}
              {% set now_ts = now().timestamp() %}
              {% set recent = namespace(comp=None, delta=999999) %}
              {% for item in schedule_events %}
                {% set comp = (item.competitions | default([])) | first %}
                {% if not comp or comp.competitors is not defined %}{% continue %}{% endif %}
                {% if comp.competitors | selectattr('team.id','equalto','158') | list | count == 0 %}{% continue %}{% endif %}
                {% set dt = item.date | as_datetime %}
                {% if not dt %}{% continue %}{% endif %}
                {% set ts = as_timestamp(dt, 0) %}
                {% if ts is none %}{% continue %}{% endif %}
                {% if ts > now_ts %}{% continue %}{% endif %}
                {% set delta = now_ts - ts %}
                {% if delta < recent.delta %}
                  {% set recent.comp = comp %}
                  {% set recent.delta = delta %}
                {% endif %}
              {% endfor %}
              {% if recent.comp and recent.delta <= 43200 %}
                {% set game.comp = recent.comp %}
                {% set game.source = 'schedule' %}
              {% endif %}
            {% endif %}

            {% set status = 'No game today' %}
            {% set home_team = '' %}
            {% set away_team = '' %}
            {% set home_score = 0 %}
            {% set away_score = 0 %}

            {% if game.comp %}
              {% set status_obj = game.comp.status if game.comp.status is defined else none %}
              {% set status_type = status_obj.type if status_obj is defined and status_obj.type is defined else none %}
              {% set description = status_type.description if status_type is defined and status_type.description is defined else none %}
              {% set completed = status_type.completed if status_type is defined and status_type.completed is defined else false %}
              {% if description %}
                {% set status = description %}
              {% elif completed %}
                {% set status = 'Final' %}
              {% else %}
                {% set status = 'Scheduled' %}
              {% endif %}

              {% set home = (game.comp.competitors | selectattr('homeAway','equalto','home') | list | first) %}
              {% set away = (game.comp.competitors | selectattr('homeAway','equalto','away') | list | first) %}

              {% if home %}
                {% if home.team is defined and home.team.displayName is defined %}
                  {% set home_team = home.team.displayName %}
                {% endif %}
                {% if home.score is defined %}
                  {% if home.score is mapping %}
                    {% set raw_home_score = home.score.value if home.score.value is defined else home.score.displayValue if home.score.displayValue is defined else 0 %}
                  {% else %}
                    {% set raw_home_score = home.score %}
                  {% endif %}
                  {% set home_score = (raw_home_score | int(0)) %}
                {% endif %}
              {% endif %}

              {% if away %}
                {% if away.team is defined and away.team.displayName is defined %}
                  {% set away_team = away.team.displayName %}
                {% endif %}
                {% if away.score is defined %}
                  {% if away.score is mapping %}
                    {% set raw_away_score = away.score.value if away.score.value is defined else away.score.displayValue if away.score.displayValue is defined else 0 %}
                  {% else %}
                    {% set raw_away_score = away.score %}
                  {% endif %}
                  {% set away_score = (raw_away_score | int(0)) %}
                {% endif %}
              {% endif %}
            {% endif %}

            {{ {
              'has_game': game.comp is not none,
              'source': game.source,
              'status': status,
              'home_team': home_team,
              'away_team': away_team,
              'home_score': home_score | int(0),
              'away_score': away_score | int(0)
            } | tojson }}
        state: >-
          {% set game = game_payload | from_json %}
          {{ game.status }}
        attributes:
          status_source: >-
            {% set game = game_payload | from_json %}
            {{ game.source if game.has_game else 'none' }}
          home_team: >-
            {% set game = game_payload | from_json %}
            {{ game.home_team if game.has_game else '' }}
          away_team: >-
            {% set game = game_payload | from_json %}
            {{ game.away_team if game.has_game else '' }}
          home_score: >-
            {% set game = game_payload | from_json %}
            {{ game.home_score if game.has_game else 0 }}
          away_score: >-
            {% set game = game_payload | from_json %}
            {{ game.away_score if game.has_game else 0 }}

      # Nebraska record
      - name: huskers_record
        unique_id: huskers_record
        state: >-
          {% set events = state_attr('sensor.espn_nebraska_schedule', 'events') or [] %}
          {% set w = 0 %}
          {% set l = 0 %}
          {% for game in events %}
            {% set comp = (game.competitions | default([])) | first %}
            {% if not comp or not (comp.status is defined and comp.status.type is defined and comp.status.type.completed) %}
              {% continue %}
            {% endif %}
            {% set huskers = comp.competitors | selectattr('team.id','equalto','158') | list | first %}
            {% set opp = comp.competitors | rejectattr('team.id','equalto','158') | list | first %}
            {% if huskers and opp and huskers.score is defined and opp.score is defined %}
              {% set huskers_score = huskers.score.value if huskers.score is defined and huskers.score is not none and huskers.score.value is defined else huskers.score %}
              {% set opp_score = opp.score.value if opp.score is defined and opp.score is not none and opp.score.value is defined else opp.score %}
              {% if (huskers_score | int(0)) > (opp_score | int(0)) %}
                {% set w = w + 1 %}
              {% else %}
                {% set l = l + 1 %}
              {% endif %}
            {% endif %}
          {% endfor %}
          {{ w }}-{{ l }}

      - name: huskers_record_dashboard
        unique_id: huskers_record_dashboard
        icon: mdi:trophy-variant
        state: >-
          {% set a = states('sensor.huskers_record') %}
          {% if a not in ['unknown','unavailable','None',''] %}{{ a }}{% else %}N/A{% endif %}

      # Time to next kickoff (minutes) — always numeric
      - name: huskers_kickoff_in_2
        unique_id: huskers_kickoff_in_2
        unit_of_measurement: min
        icon: mdi:timer
        state: >-
          {% set events = state_attr('sensor.espn_nebraska_schedule', 'events') or [] %}
          {% set now_ts = now().timestamp() %}
          {% set next_dt = none %}
          {% for g in events %}
            {% set comp = (g.competitions | default([])) | first %}
            {% if not comp %}{% continue %}{% endif %}
            {% set dt = g.date | as_datetime %}
            {% set completed = comp.status.type.completed if (comp.status is defined and comp.status.type is defined) else false %}
            {% if dt and not completed and dt.timestamp() > now_ts %}
              {% set next_dt = dt %}
              {% break %}
            {% endif %}
          {% endfor %}
          {% if next_dt %}
            {{ max(0, ((next_dt - now()).total_seconds() / 60) | round(0) | int) }}
          {% else %}
            0
          {% endif %}
        attributes:
          kickoff_iso: >-
            {% set events = state_attr('sensor.espn_nebraska_schedule', 'events') or [] %}
            {% set now_ts = now().timestamp() %}
            {% set next_dt = none %}
            {% for g in events %}
              {% set comp = (g.competitions | default([])) | first %}
              {% if not comp %}{% continue %}{% endif %}
              {% set dt = g.date | as_datetime %}
              {% set completed = comp.status.type.completed if (comp.status is defined and comp.status.type is defined) else false %}
              {% if dt and not completed and dt.timestamp() > now_ts %}
                {% set next_dt = dt %}
                {% break %}
              {% endif %}
            {% endfor %}
            {{ next_dt.isoformat() if next_dt else '' }}
          has_next_game: >-
            {% set events = state_attr('sensor.espn_nebraska_schedule', 'events') or [] %}
            {% set now_ts = now().timestamp() %}
            {% set next_dt = none %}
            {% for g in events %}
              {% set comp = (g.competitions | default([])) | first %}
              {% if not comp %}{% continue %}{% endif %}
              {% set dt = g.date | as_datetime %}
              {% set completed = comp.status.type.completed if (comp.status is defined and comp.status.type is defined) else false %}
              {% if dt and not completed and dt.timestamp() > now_ts %}
                {% set next_dt = dt %}
                {% break %}
              {% endif %}
            {% endfor %}
            {{ (next_dt is not none) | bool }}

      # Our score (auto) from scoreboard
      - name: huskers_our_score_auto
        unique_id: huskers_our_score_auto
        state: >-
          {% set events = state_attr('sensor.espn_cfb_scoreboard', 'events') or [] %}
          {% set score = none %}
          {% for e in events %}
            {% set comp = (e.competitions | default([])) | first %}
            {% if comp and comp.competitors is defined %}
              {% for c in comp.competitors %}
                {% if c.team is defined and c.team.id == '158' %}
                  {% set score = c.score if c.score is defined else 0 %}
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endfor %}
          {{ (score | int(0)) if score is not none else 0 }}

      # Effective score (manual override aware)
      - name: huskers_our_score_effective
        unique_id: huskers_our_score_effective
        state: >-
          {% if is_state('input_boolean.huskers_use_manual_score','on') %}
            {{ states('input_number.huskers_our_score_manual') | int(0) }}
          {% else %}
            {{ states('sensor.huskers_our_score_auto') | int(0) }}
          {% endif %}

      # Kickoff minutes (auto) routed from huskers_kickoff_in_2
      - name: huskers_kickoff_in_auto
        unique_id: huskers_kickoff_in_auto
        unit_of_measurement: min
        state: "{{ states('sensor.huskers_kickoff_in_2') | int(0) }}"
        availability: "{{ states('sensor.huskers_kickoff_in_2') not in ['unknown', 'unavailable'] }}"

      # Effective kickoff minutes (manual override aware)
      - name: huskers_kickoff_in_effective
        unique_id: huskers_kickoff_in_effective
        unit_of_measurement: min
        state: >-
          {% if is_state('input_boolean.huskers_use_manual_kickoff','on') %}
            {{ states('input_number.huskers_kickoff_in_manual') | int(0) }}
          {% else %}
            {{ states('sensor.huskers_kickoff_in_auto') | int(0) }}
          {% endif %}

      # AP ranking
      - name: huskers_ap_ranking_espn
        unique_id: huskers_ap_ranking_espn
        state: >-
          {% set rankings = state_attr('sensor.espn_cfb_rankings', 'rankings') or [] %}
          {% set rank = 'Unranked' %}
          {% for poll in rankings %}
            {% if poll.name == 'AP Top 25' and poll.ranks is defined %}
              {% for team in poll.ranks %}
                {% if team.team is defined and team.team.id == '158' %}
                  {% set rank = '#' ~ team.current %}
                  {% break %}
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endfor %}
          {{ rank }}

      # Big Ten standings (short state + markdown attribute)
      - name: big_ten_standings_espn
        unique_id: big_ten_standings_espn
        icon: mdi:trophy
        state: >-
          {% set standings = state_attr('sensor.espn_big_ten_teams', 'standings') or [] %}
          {% if standings %}
            {{ standings | length }} teams
          {% else %}
            unavailable
          {% endif %}
        attributes:
          markdown: >-
            {% set standings = state_attr('sensor.espn_big_ten_teams', 'standings') or [] %}
            {% set season_meta = state_attr('sensor.espn_nebraska_schedule', 'requestedSeason') %}
            {% if season_meta is mapping and 'year' in season_meta %}
              {% set season_year = season_meta['year'] %}
            {% else %}
              {% set season_year = now().year %}
            {% endif %}
            {% if now().month < 6 %}
              {% set season_year = season_year - 1 %}
            {% endif %}
            {% set team_names = {
              '2483': 'Oregon Ducks',
              '84': 'Indiana Hoosiers',
              '213': 'Penn State Nittany Lions',
              '194': 'Ohio State Buckeyes',
              '356': 'Illinois Fighting Illini',
              '2294': 'Iowa Hawkeyes',
              '130': 'Michigan Wolverines',
              '135': 'Minnesota Golden Gophers',
              '164': 'Rutgers Scarlet Knights',
              '264': 'Washington Huskies',
              '30': 'USC Trojans',
              '158': 'Nebraska Cornhuskers',
              '26': 'UCLA Bruins',
              '127': 'Michigan State Spartans',
              '275': 'Wisconsin Badgers',
              '77': 'Northwestern Wildcats',
              '120': 'Maryland Terrapins',
              '2509': 'Purdue Boilermakers'
            } %}
            {% if standings %}
              {% set ns = namespace(rows=[]) %}
              {%- for entry in standings %}
                {% set team_ref = entry.team['$ref'] if entry.team is mapping and '$ref' in entry.team else '' %}
                {% set team_href = team_ref.split('?')[0] if team_ref else '' %}
                {% set team_id = team_href.rsplit('/', 1)[-1] if team_href else '' %}
                {% set overall_record = (entry.records | selectattr('name','equalto','overall') | list | first) if entry.records is defined else none %}
                {% set conf_record = (entry.records | selectattr('name','equalto','vs. Conf.') | list | first) if entry.records is defined else none %}
                {% set overall_text = '-' %}
                {% if overall_record is mapping %}
                  {% if overall_record.summary is defined %}
                    {% set overall_text = overall_record.summary %}
                  {% elif overall_record.displayValue is defined %}
                    {% set overall_text = overall_record.displayValue %}
                  {% endif %}
                {% endif %}
                {% set conf_text = '-' %}
                {% if conf_record is mapping %}
                  {% if conf_record.summary is defined %}
                    {% set conf_text = conf_record.summary %}
                  {% elif conf_record.displayValue is defined %}
                    {% set conf_text = conf_record.displayValue %}
                  {% endif %}
                {% endif %}
                {% set parts = overall_text.split('-') if overall_text not in ['-', ''] else [] %}
                {% set wins = parts[0] | int(0) if parts | length > 0 else 0 %}
                {% set losses = parts[1] | int(0) if parts | length > 1 else 0 %}
                {% set ns.rows = ns.rows + [{
                  'team': team_names.get(team_id, 'Team ' ~ team_id),
                  'overall': overall_text,
                  'conf': conf_text,
                  'wins': wins,
                  'losses': losses
                }] %}
              {%- endfor %}
              {% set rows = ns.rows | sort(attribute='losses') | sort(attribute='wins', reverse=True) %}
              ## Big Ten Standings ({{ season_year }})
              | Rank | Team | Overall | Conf |
              | --- | --- | --- | --- |
              {%- for row in rows %}
              | {{ loop.index }} | {{ row.team }} | {{ row.overall }} | {{ row.conf }} |
              {%- endfor %}
            {% else %}
              Big Ten standings unavailable
            {% endif %}
  - binary_sensor:
      - name: huskers_is_pregame_espn
        unique_id: huskers_is_pregame_espn
        state: >-
          {% set status = states('sensor.huskers_game_status_espn') %}
          {{ status in ['Scheduled', 'Pre-Game', 'Postponed', 'Delayed'] }}

      - name: huskers_is_live_espn
        unique_id: huskers_is_live_espn
        state: >-
          {% set status = states('sensor.huskers_game_status_espn') %}
          {{ status in ['In Progress', 'Halftime', '1st Quarter', '2nd Quarter', '3rd Quarter', '4th Quarter', 'Overtime', 'End Period'] }}

      - name: huskers_is_postgame_espn
        unique_id: huskers_is_postgame_espn
        state: >-
          {% set status = states('sensor.huskers_game_status_espn') %}
          {{ status in ['Final', 'Final/OT'] }}

      - name: huskers_light_show_active
        unique_id: huskers_light_show_active
        device_class: running
        state: >-
          {{ is_state('script.huskers_chase30_loop','on')
             or is_state('script.huskers_chase_speed_loop','on')
             or is_state('script.huskers_hail_burst_8s','on') }}

      - name: huskers_lighting_hold
        unique_id: huskers_lighting_hold
        state: >-
          {% set auto_enabled = is_state('input_boolean.huskers_automations_enabled','on') %}
          {% set game_mode = is_state('input_boolean.huskers_game_mode','on') %}
          {% set manual_kick = is_state('input_boolean.huskers_use_manual_kickoff','on') %}
          {% set has_next = state_attr('sensor.huskers_kickoff_in_2','has_next_game') | default(false) %}
          {% set minutes = states('sensor.huskers_kickoff_in_effective') | float(999) %}
          {% set pre_window = (manual_kick or has_next) and minutes >= 0 and minutes <= 120 %}
          {% set live = is_state('binary_sensor.huskers_is_live_espn','on') %}
          {% set show_active = is_state('binary_sensor.huskers_light_show_active','on') %}
          {% set postgame_recent = (
            is_state('binary_sensor.huskers_is_postgame_espn','on')
            and (
              now().timestamp()
              - as_timestamp(states.binary_sensor.huskers_is_postgame_espn.last_changed, 0)
            ) <= 1800
          ) %}
          {{ auto_enabled and game_mode and (
            show_active
            or live
            or pre_window
            or postgame_recent
          ) }}

################################################################################
# AUTOMATIONS
################################################################################
automation:
  - id: huskers_game_mode_enable_window
    alias: 'Huskers: Enable Game Mode Window'
    description: 'Automatically turns game mode on 2 hours before kickoff and while a game is active.'
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: sensor.huskers_kickoff_in_effective
        below: 121
        for:
          minutes: 1
      - platform: state
        entity_id: binary_sensor.huskers_is_pregame_espn
        to: 'on'
      - platform: state
        entity_id: binary_sensor.huskers_is_live_espn
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.huskers_automations_enabled
        state: 'on'
      - condition: state
        entity_id: input_boolean.huskers_game_mode
        state: 'off'
      - condition: or
        conditions:
          - condition: template
            value_template: >-
              {{ state_attr('sensor.huskers_kickoff_in_2', 'has_next_game') | default(false) }}
          - condition: state
            entity_id: binary_sensor.huskers_is_pregame_espn
            state: 'on'
          - condition: state
            entity_id: binary_sensor.huskers_is_live_espn
            state: 'on'
    action:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.huskers_game_mode
      - service: logbook.log
        data:
          name: Huskers Game Mode
          message: >-
            Game mode enabled (kickoff in {{ states('sensor.huskers_kickoff_in_effective') }} min).

  - id: huskers_game_mode_disable_window
    alias: 'Huskers: Disable Game Mode Window'
    description: 'Turns game mode off two hours after postgame or when the next kickoff is more than two hours away.'
    mode: single
    trigger:
      - id: postgame_elapsed
        platform: time_pattern
        minutes: '/5'
      - id: kickoff_far
        platform: numeric_state
        entity_id: sensor.huskers_kickoff_in_effective
        above: 120
        for:
          minutes: 5
    condition:
      - condition: state
        entity_id: input_boolean.huskers_game_mode
        state: 'on'
      - condition: template
        value_template: >-
          {{ not is_state('binary_sensor.huskers_is_pregame_espn', 'on') }}
      - condition: template
        value_template: >-
          {{ not is_state('binary_sensor.huskers_is_live_espn', 'on') }}
      - condition: template
        value_template: >-
          {% if trigger is not defined or trigger.id == 'kickoff_far' %}
            true
          {% else %}
            {% set postgame = states.binary_sensor.huskers_is_postgame_espn %}
            {{ postgame is not none
               and postgame.state == 'on'
               and (now().timestamp() - as_timestamp(postgame.last_changed, 0)) >= 7200 }}
          {% endif %}
    action:
      - variables:
          disable_reason: >-
            {% if trigger is not defined or trigger.id == 'kickoff_far' %}
              kickoff outside the two-hour window
            {% else %}
              postgame window elapsed
            {% endif %}
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.huskers_game_mode
      - service: logbook.log
        data:
          name: Huskers Game Mode
          message: >-
            Game mode disabled ({{ disable_reason }}).

  - id: huskers_showtime_at_t_20
    alias: 'Huskers: Pregame Showtime (T-20 Minutes)'
    description: 'Starts the 30s cream chase ~20 minutes before kickoff.'
    initial_state: true
    mode: single
    trigger:
      - id: countdown_window
        platform: numeric_state
        entity_id: sensor.huskers_kickoff_in_effective
        above: 19
        below: 21
        for:
          seconds: 5
      - id: safety_poll
        platform: time_pattern
        minutes: '/1'
    condition:
      - condition: state
        entity_id: input_boolean.huskers_automations_enabled
        state: 'on'
      - condition: state
        entity_id: input_boolean.huskers_game_mode
        state: 'on'
      - condition: or
        conditions:
          - condition: state
            entity_id: binary_sensor.huskers_is_pregame_espn
            state: 'on'
          - condition: state
            entity_id: input_boolean.huskers_test_mode
            state: 'on'
      - condition: state
        entity_id: script.huskers_chase30_loop
        state: 'off'
      - condition: state
        entity_id: script.huskers_chase_speed_loop
        state: 'off'
      - condition: template
        value_template: >-
          {% if trigger is defined and trigger.id == 'safety_poll' %}
            {% set minutes = states('sensor.huskers_kickoff_in_effective') | float(99) %}
            {{ 0 <= minutes <= 25 }}
          {% else %}
            true
          {% endif %}
    action:
      - service: script.turn_on
        target:
          entity_id: script.huskers_chase30_start
      - service: logbook.log
        data:
          name: Huskers Automation
          message: "Pregame show started (T-{{ states('sensor.huskers_kickoff_in_effective') }} min)"

  - id: huskers_td_burst_on_score
    alias: 'Huskers: Touchdown Celebration'
    description: 'Fires Hail Varsity BPM burst when Nebraska score increases.'
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.huskers_our_score_effective
    condition:
      - condition: state
        entity_id: input_boolean.huskers_automations_enabled
        state: 'on'
      - condition: state
        entity_id: input_boolean.huskers_game_mode
        state: 'on'
      - condition: template
        value_template: >-
          {{ trigger.from_state is not none and
             trigger.to_state is not none and
             (trigger.to_state.state | int(0)) > (trigger.from_state.state | int(0)) }}
    action:
      - service: script.turn_on
        target:
          entity_id: script.huskers_hail_burst_8s
      - service: logbook.log
        data:
          name: Huskers Celebration
          message: 'Score: {{ trigger.from_state.state }} → {{ trigger.to_state.state }} (Hail burst)'
          entity_id: automation.huskers_td_burst_on_score

  - id: huskers_postgame_cleanup
    alias: 'Huskers: Postgame Cleanup'
    description: 'Stops chase loops and restores lights when postgame window closes.'
    initial_state: true
    mode: single
    trigger:
      - id: postgame_closed
        platform: state
        entity_id: binary_sensor.huskers_is_postgame_espn
        from: 'on'
        to: 'off'
      - id: postgame_unavailable
        platform: state
        entity_id: binary_sensor.huskers_is_postgame_espn
        from: 'on'
        to: 'unavailable'
      - id: postgame_unknown
        platform: state
        entity_id: binary_sensor.huskers_is_postgame_espn
        from: 'on'
        to: 'unknown'
      - id: game_mode_disabled
        platform: state
        entity_id: input_boolean.huskers_game_mode
        from: 'on'
        to: 'off'
      - id: chase_timeout
        platform: time_pattern
        minutes: '/5'
    condition:
      - condition: template
        value_template: >-
          {% if trigger is not defined %}
            true
          {% elif trigger.id in ['postgame_closed', 'postgame_unavailable', 'postgame_unknown'] %}
            {{ is_state('input_boolean.huskers_game_mode', 'on') }}
          {% elif trigger.id == 'game_mode_disabled' %}
            true
          {% elif trigger.id == 'chase_timeout' %}
            {% set now_ts = as_timestamp(now()) %}
            {% set threshold = 900 %}
            {% set chase30_last = as_timestamp(state_attr('script.huskers_chase30_loop', 'last_triggered')) %}
            {% set chase_speed_last = as_timestamp(state_attr('script.huskers_chase_speed_loop', 'last_triggered')) %}
            {% set chase30_expired = is_state('script.huskers_chase30_loop', 'on')
              and chase30_last is not none
              and (now_ts - chase30_last) > threshold %}
            {% set chase_speed_expired = is_state('script.huskers_chase_speed_loop', 'on')
              and chase_speed_last is not none
              and (now_ts - chase_speed_last) > threshold %}
            {{ chase30_expired or chase_speed_expired }}
          {% else %}
            true
          {% endif %}
    action:
      - parallel:
          - service: script.turn_on
            target:
              entity_id: script.huskers_chase30_stop
          - service: script.turn_on
            target:
              entity_id: script.huskers_chase_speed_stop
      - service: logbook.log
        data:
          name: Huskers Automation
          message: 'Postgame cleanup completed (loops stopped, state restored)'
          entity_id: automation.huskers_postgame_cleanup

# packages/huskers_everything.yaml
# …your existing content above…

frontend:
  themes:
    Huskers Cream:
      modes:
        light:
          --huskers-cream: "#FDF3E7"
          --huskers-scarlet: "#E41C38"
          --huskers-black: "#000000"
          --huskers-ink: "#111111"
          --huskers-muted: "#5c5c5c"

          primary-background-color: var(--huskers-cream)
          card-background-color: "#FFF9F0"
          app-header-background-color: "#E41C38"
          app-header-text-color: "#000000"
          app-header-icon-color: "#000000"
          app-header-button-text-color: "#000000"
          header-icon-color: "#000000"
          mdc-theme-primary: "#E41C38"
          mdc-theme-on-primary: "#000000"

          primary-color: "#E41C38"
          accent-color: "#000000"
          text-primary-color: var(--huskers-ink)
          primary-text-color: var(--huskers-ink)
          secondary-text-color: var(--huskers-muted)
          disabled-text-color: "#9b9b9b"

          state-icon-color: var(--huskers-black)
          state-icon-active-color: "#E41C38"
          state-unavailable-color: "#9b9b9b"

          label-badge-background-color: "#FFF4E6"
          label-badge-text-color: var(--huskers-ink)
          paper-item-icon-color: var(--huskers-black)
          paper-item-icon-active-color: "#E41C38"

          ha-card-border-radius: "16px"
          ha-card-border-color: "rgba(0,0,0,0.12)"
          ha-card-box-shadow: "0 2px 12px rgba(0,0,0,0.08)"
          divider-color: "rgba(0,0,0,0.06)"
          app-header-border-bottom: "1px solid #000000"

          slider-color: "#E41C38"
          slider-secondary-color: "rgba(228,28,56,0.2)"

          markdown-code-background-color: "#FFF2E6"
          table-row-background-color: "#FFF7EC"
          table-row-alternative-background-color: "#FFF2E0"

          # vars used in your markdown card styles
          --huskers-scoreboard-border: "1px solid rgba(0,0,0,0.12)"
          --huskers-scoreboard-shadow: "0 6px 18px rgba(0,0,0,0.12)"

        dark:
          --huskers-cream: "#1F1A18"
          --huskers-scarlet: "#FF3A52"
          --huskers-black: "#E0E0E0"
          --huskers-ink: "#F2F2F2"
          --huskers-muted: "#C8C8C8"

          primary-background-color: var(--huskers-cream)
          card-background-color: "#26201D"
          app-header-background-color: "#FF3A52"
          app-header-text-color: "#0A0A0A"
          app-header-icon-color: "#0A0A0A"
          app-header-button-text-color: "#0A0A0A"
          header-icon-color: "#0A0A0A"
          mdc-theme-primary: "#FF3A52"
          mdc-theme-on-primary: "#0A0A0A"

          primary-color: "#FF3A52"
          accent-color: "#E0E0E0"
          primary-text-color: var(--huskers-ink)
          secondary-text-color: var(--huskers-muted)
          disabled-text-color: "#9b9b9b"

          state-icon-color: "#E0E0E0"
          state-icon-active-color: "#FF3A52"

          ha-card-border-radius: "16px"
          ha-card-border-color: "rgba(255,255,255,0.12)"
          ha-card-box-shadow: "0 2px 12px rgba(0,0,0,0.35)"
          divider-color: "rgba(255,255,255,0.08)"

          # vars used in your markdown card styles
          --huskers-scoreboard-border: "1px solid rgba(255,255,255,0.12)"
          --huskers-scoreboard-shadow: "0 6px 18px rgba(0,0,0,0.35)"
