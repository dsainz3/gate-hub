# Set repo root (change if needed)
$root = "."

# ==========
# main.py
# ==========
$mainDir  = Join-Path $root "tools\automation-builder\automation_builder"
$mainFile = Join-Path $mainDir "main.py"
New-Item -ItemType Directory -Path $mainDir -Force | Out-Null

@'
import os, re, subprocess, tempfile, pathlib, yaml, requests
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()

USE_OLLAMA = (os.getenv("USE_OLLAMA", "true").lower() == "true")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or os.getenv("GH_TOKEN")
GITHUB_API = "https://api.github.com"

SYSTEM = """You write Home Assistant YAML (automations or blueprints) ONLY.
- Output valid YAML only, no markdown fences or prose.
- Prefer blueprints with !input selectors when possible.
- No secrets; use placeholders/!input for entity_ids.
"""

class Req(BaseModel):
    prompt: str
    repo: str                   # e.g., "dsainz3/gate-hub"
    base_branch: str = "main"
    target_path: str = "packages/generated"
    open_pr: bool = True

def _run(cmd: str, cwd=None):
    subprocess.check_call(cmd, shell=True, cwd=cwd)

def _call_llm(user_prompt: str) -> str:
    if USE_OLLAMA:
        r = requests.post(
            "http://localhost:11434/api/generate",
            json={"model":"llama3.1", "prompt": SYSTEM + "\n\n" + user_prompt, "stream": False, "options":{"temperature":0}},
            timeout=600
        )
        r.raise_for_status()
        return r.json()["response"].strip()
    if not OPENAI_API_KEY:
        raise HTTPException(500, "OPENAI_API_KEY not set and USE_OLLAMA=false")
    from openai import OpenAI
    client = OpenAI(api_key=OPENAI_API_KEY)
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role":"system","content":SYSTEM},
                  {"role":"user","content":user_prompt}],
        temperature=0
    )
    return resp.choices[0].message.content.strip()

def _validate_yaml(txt: str):
    data = yaml.safe_load(txt)
    if not isinstance(data, (list, dict)):
        raise ValueError("YAML must be a mapping or list")
    return data

def _safe_slug(s: str, limit=50) -> str:
    s = s.lower()
    s = re.sub(r"[^a-z0-9\-]+", "-", s)
    s = re.sub(r"-+", "-", s).strip("-")
    return (s or "automation")[:limit]

def _create_pr(owner: str, repo: str, head: str, base: str, title: str, body: str) -> str:
    if not GITHUB_TOKEN:
        raise HTTPException(500, "GITHUB_TOKEN missing")
    r = requests.post(
        f"{GITHUB_API}/repos/{owner}/{repo}/pulls",
        headers={"Authorization": f"Bearer {GITHUB_TOKEN}",
                 "Accept": "application/vnd.github+json"},
        json={"title": title, "head": head, "base": base, "body": body},
        timeout=60
    )
    if r.status_code not in (200, 201):
        raise HTTPException(500, f"PR create failed: {r.status_code} {r.text}")
    return r.json()["html_url"]

@app.post("/generate")
def generate(req: Req):
    # 1) Generate YAML
    raw = _call_llm(f"Create a Home Assistant automation or blueprint for: {req.prompt}")
    raw = re.sub(r"^```[a-zA-Z]*\n|\n```$", "", raw).strip()
    _validate_yaml(raw)

    # 2) Git flow: clone, branch, write file, commit, push
    owner, repo_name = req.repo.split("/", 1)
    branch = "ai/auto-" + _safe_slug(req.prompt, 40)

    with tempfile.TemporaryDirectory() as td:
        _run(f"git clone https://github.com/{req.repo}.git .", cwd=td)
        _run(f"git checkout {req.base_branch}", cwd=td)
        _run(f"git checkout -b {branch}", cwd=td)

        target_dir = pathlib.Path(td, req.target_path)
        target_dir.mkdir(parents=True, exist_ok=True)
        out_path = target_dir / f"{_safe_slug(req.prompt, 50)}.yaml"
        out_path.write_text(raw + "\n", encoding="utf-8")

        _run("git add .", cwd=td)
        _run(f'git commit -m "AI: {req.prompt}"', cwd=td)

        if not GITHUB_TOKEN:
            raise HTTPException(500, "GITHUB_TOKEN missing for push/PR")

        remote = f"https://x-access-token:{GITHUB_TOKEN}@github.com/{req.repo}.git"
        _run(f"git push {remote} HEAD:{branch}", cwd=td)

    pr_url = None
    if req.open_pr:
        pr_url = _create_pr(owner, repo_name, head=branch, base=req.base_branch,
                            title=f"AI: {req.prompt}",
                            body="Generated by automation-builder. Please review carefully.")

    return {"status": "ok", "branch": branch, "pr": pr_url}
'@ | Set-Content -Path $mainFile -Encoding UTF8

# ==========
# README.md
# ==========
$readmeDir  = Join-Path $root "tools\automation-builder"
$readmeFile = Join-Path $readmeDir "README.md"
New-Item -ItemType Directory -Path $readmeDir -Force | Out-Null

@'
# automation-builder

A tiny FastAPI service that turns natural-language requests into Home Assistant
automations/blueprints, validates YAML, commits to a branch, and opens a PR.

## Run with Docker Compose
1. Create a GitHub personal access token (repo scope) and export it for Compose:
   ```bash
   export GITHUB_TOKEN=ghp_...
'@ | Set-Content -Path $readmeFile -Encoding UTF8

Write-Host "âœ… Created:
 - $mainFile
 - $readmeFile"
