# packages/huskers_cfbd.yaml
# Auto-updating Huskers data from CFBD

rest:
  # Nebraska record (overall + conference)
  - resource_template: 'https://api.collegefootballdata.com/records?year={{ now().year }}&team=Nebraska'
    method: GET
    headers:
      Authorization: !secret cfbd_bearer
      Accept: application/json
    scan_interval: 600 # 10 min
    sensor:
      - name: huskers_records_raw
        unique_id: huskers_records_raw
        value_template: "{{ value | default('', true) }}"

  # Big Ten conference standings
  - resource_template: 'https://api.collegefootballdata.com/standings?year={{ now().year }}&conference=Big%20Ten'
    method: GET
    headers:
      Authorization: !secret cfbd_bearer
      Accept: application/json
    scan_interval: 900 # 15 min
    sensor:
      - name: b1g_standings_raw
        unique_id: b1g_standings_raw
        value_template: "{{ value | default('', true) }}"

  # Nebraska schedule (entire year)
  - resource_template: 'https://api.collegefootballdata.com/games?year={{ now().year }}&team=Nebraska'
    method: GET
    headers:
      Authorization: !secret cfbd_bearer
      Accept: application/json
    scan_interval: 3600 # 60 min
    sensor:
      - name: huskers_schedule_raw
        unique_id: huskers_schedule_raw
        value_template: "{{ value | default('', true) }}"

template:
  - sensor:
      # ----- Record (overall) -----
      - name: huskers_record_overall
        unique_id: huskers_record_overall
        state: >-
          {% set raw = states('sensor.huskers_records_raw') %}
          {% set data = raw | from_json if raw | length > 2 and raw.startswith('[') else [] %}
          {% set rec = (data[0].get('total', {}) if data else {}) %}
          {% set w = rec.get('wins') %}
          {% set l = rec.get('losses') %}
          {% set t = rec.get('ties', 0) %}
          {% if w is not none and l is not none %}
            {{ w }}-{{ l }}{{ '-' ~ t if t|int > 0 else '' }}
          {% else %}unknown{% endif %}

      # ----- Record (conference) -----
      - name: huskers_record_conference
        unique_id: huskers_record_conference
        state: >-
          {% set raw = states('sensor.huskers_records_raw') %}
          {% set data = raw | from_json if raw | length > 2 and raw.startswith('[') else [] %}
          {% set crecs = (data[0].get('conferenceRecords', []) if data else []) %}
          {% set b1g = (crecs | selectattr('conference','eq','Big Ten') | list | first) %}
          {% if b1g %}
            {{ b1g.get('wins', 0) }}-{{ b1g.get('losses', 0) }}{{ '-' ~ b1g.get('ties', 0) if b1g.get('ties', 0)|int > 0 else '' }}
          {% else %}unknown{% endif %}

      # ----- Big Ten standings (Markdown) -----
      - name: b1g_standings_md
        unique_id: b1g_standings_md
        state: >-
          {% set raw = states('sensor.b1g_standings_raw') %}
          {% set data = raw | from_json if raw | length > 2 and raw.startswith('[') else [] %}
          {% if not data %}
            **Big Ten standings unavailable.**
          {% else %}
            {% set teams = data[0].get('standings', []) %}
            {# Normalize rows as {name,cw,cl,ow,ol} #}
            {% set rows = [] %}
            {% for t in teams %}
              {% set name = t.get('team') or t.get('school') %}
              {% set cw = t.get('conferenceWins', t.get('conference', {}).get('wins', 0)) | int %}
              {% set cl = t.get('conferenceLosses', t.get('conference', {}).get('losses', 0)) | int %}
              {% set ow = t.get('overallWins', t.get('total', {}).get('wins', 0)) | int %}
              {% set ol = t.get('overallLosses', t.get('total', {}).get('losses', 0)) | int %}
              {% set _ = rows.append({'name': name, 'cw': cw, 'cl': cl, 'ow': ow, 'ol': ol}) %}
            {% endfor %}
            {% set sorted = rows | sort(attribute='cw', reverse=true) | list %}
            ## Big Ten Standings ({{ now().year }})
            {% for r in sorted %}
            {{ loop.index }}) {{ r.name }} — Conf {{ r.cw }}-{{ r.cl }} | Overall {{ r.ow }}-{{ r.ol }}
            {% endfor %}
          {% endif %}

      # ----- Nebraska schedule (Markdown) -----
      - name: huskers_schedule_md
        unique_id: huskers_schedule_md
        state: >-
          {% set raw = states('sensor.huskers_schedule_raw') %}
          {% set games = raw | from_json if raw | length > 2 and raw.startswith('[') else [] %}
          {% if not games %}
            **Schedule unavailable.**
          {% else %}
            {% set lines = ['## Nebraska Schedule (' ~ now().year ~ ')'] %}
            {% for g in games %}
              {% set start = g.get('start_date') or g.get('startTime') or '' %}
              {% set dt = as_datetime(start) if start else None %}
              {% set date = (dt.astimezone(now().tzinfo).strftime('%b %-d, %-I:%M %p') if dt else 'TBD') %}
              {% set home = g.get('home_team') %}
              {% set away = g.get('away_team') %}
              {% set opp = (away if home == 'Nebraska' else home) %}
              {% set loc = ('vs' if home == 'Nebraska' else 'at') %}
              {% if g.get('completed') %}
                {% set score = (g.get('home_points', '?') ~ '–' ~ g.get('away_points', '?')) %}
                {% set _ = lines.append('- ' ~ date ~ ' — ' ~ loc ~ ' ' ~ opp ~ ' — **Final** ' ~ score) %}
              {% else %}
                {% set _ = lines.append('- ' ~ date ~ ' — ' ~ loc ~ ' ' ~ opp) %}
              {% endif %}
            {% endfor %}
            {{ lines | join('\n') }}
          {% endif %}
