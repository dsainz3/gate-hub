#!/usr/bin/env python3
"""Render automation descriptions table for documentation."""
from __future__ import annotations

import pathlib
from typing import Dict

import yaml

ROOT = pathlib.Path(__file__).resolve().parents[1]
DATA_FILE = ROOT / "shared" / "automation_descriptions.yaml"
OUTPUT_FILE = ROOT / "docs" / "includes" / "automation-descriptions-table.md"


def load_descriptions() -> Dict[str, str]:
    with DATA_FILE.open("r", encoding="utf-8") as handle:
        data = yaml.safe_load(handle) or {}
    descriptions = data.get("automation_descriptions", {})
    if not isinstance(descriptions, dict):
        raise TypeError("automation_descriptions must be a mapping")
    return {key: str(value).strip() for key, value in descriptions.items()}


def render_table(descriptions: Dict[str, str]) -> str:
    lines = [
        "<!-- Autogenerated by scripts/render_automation_descriptions.py; do not edit by hand. -->",
        "| Automation | Summary |",
        "| --- | --- |",
    ]
    for entity_id in sorted(descriptions):
        summary = descriptions[entity_id].replace("|", "\\|")
        lines.append(f"| `{entity_id}` | {summary} |")
    lines.append("")
    return "\n".join(lines)


def main() -> None:
    OUTPUT_FILE.parent.mkdir(parents=True, exist_ok=True)
    table = render_table(load_descriptions())
    OUTPUT_FILE.write_text(table, encoding="utf-8")


if __name__ == "__main__":
    main()
